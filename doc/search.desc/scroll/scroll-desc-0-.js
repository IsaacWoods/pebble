searchState.loadedDescShard("scroll", 0, "Scroll\nBig Endian byte order context\nThe requested offset to read/write at is invalid\nCore-read - core, no_std friendly trait for reading basic …\nCore-write - core, no_std friendly trait for writing basic …\nThe endianness (byte order) of a stream of bytes\nContains the error value\nA custom Scroll error\nLittle Endian byte order context\nThe machine’s native byte order\nNetwork byte order context\nContains the success value\nA very generic, contextual pread interface in Rust.\nA very generic, contextual pwrite interface in Rust.\nAn signed leb128 integer\nThe type you tried to read was too big\nAn unsigned leb128 integer\nReads a value implementing <code>FromCtx</code> from <code>Self</code> at <code>offset</code>, …\nReads a value implementing <code>FromCtx</code> from <code>Self</code> at <code>offset</code>, …\nReads a value from <code>Self</code> at <code>offset</code> with <code>ctx</code>. Cannot fail. …\nReads a value from <code>Self</code> at <code>offset</code> with <code>ctx</code>. Cannot fail. …\nGeneric context-aware conversion traits, for automatic …\nWrites <code>n</code> into <code>Self</code> at <code>offset</code>; uses default context. For …\nWrites <code>n</code> into <code>Self</code> at <code>offset</code>; uses default context. For …\nWrites <code>n</code> into <code>Self</code> at <code>offset</code> with <code>ctx</code>\nWrites <code>n</code> into <code>Self</code> at <code>offset</code> with <code>ctx</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads a value from <code>self</code> at <code>offset</code> with a default <code>Ctx</code>. For …\nReads a value from <code>self</code> at <code>offset</code> with a default <code>Ctx</code>. For …\nTries to write <code>inout.len()</code> <code>N</code>s into <code>inout</code> from <code>Self</code> …\nTries to write <code>inout.len()</code> <code>N</code>s into <code>inout</code> from <code>Self</code> …\nTries to write <code>inout.len()</code> <code>N</code>s into <code>inout</code> from <code>Self</code> …\nTries to write <code>inout.len()</code> <code>N</code>s into <code>inout</code> from <code>Self</code> …\nReads a value from <code>self</code> at <code>offset</code> with the given <code>ctx</code>, and …\nWrite <code>n</code> into <code>self</code> at <code>offset</code>, with a default <code>Ctx</code>. Updates …\nWrite <code>n</code> into <code>self</code> at <code>offset</code>, with a default <code>Ctx</code>. Updates …\nWrite <code>n</code> into <code>self</code> at <code>offset</code>, with the <code>ctx</code>. Updates the …\nWrite <code>n</code> into <code>self</code> at <code>offset</code>, with the <code>ctx</code>. Updates the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a value from <code>self</code> at <code>offset</code> with a default <code>Ctx</code>. For …\nReads a value from <code>self</code> at <code>offset</code> with a default <code>Ctx</code>. For …\nReads a value from <code>self</code> at <code>offset</code> with the given <code>ctx</code>\nReads a value from <code>self</code> at <code>offset</code> with the given <code>ctx</code>\nWrite <code>N</code> at offset <code>I</code> with context <code>Ctx</code>\nRead a variable length u64 from <code>bytes</code> at <code>offset</code>\nRead a variable length i64 from <code>bytes</code> at <code>offset</code>\nReturn how many bytes this Uleb128 takes up in memory\nReturn how many bytes this Sleb128 takes up in memory\nReads <code>Self</code> from <code>This</code> using the context <code>Ctx</code>; must <em>not</em> fail\nWrites <code>Self</code> into <code>This</code> using the context <code>Ctx</code>\nA trait for measuring how large something is; for a byte …\nA C-style, null terminator based delimiter\nA newline-based delimiter\nA space-based delimiter\nGets the size of <code>Self</code> with a <code>Ctx</code>, and in <code>Self::Units</code>. …\nThe parsing context for converting a byte sequence to a …\nA tab-based delimiter\nTries to read <code>Self</code> from <code>This</code> using the context <code>Ctx</code>\nTries to write <code>Self</code> into <code>This</code> using the context <code>Ctx</code> To …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHow large is <code>Self</code>, given the <code>ctx</code>?")