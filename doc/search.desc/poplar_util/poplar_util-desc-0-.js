searchState.loadedDescShard("poplar_util", 0, "Values can be wrapped in this type when they’re printed …\nA guard for when you want to store some data in a static, …\nThis macro should be called at the beginning of functions …\nIt’s useful to be able to model an integral type such as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the data, if this guard has been …\nGet a mutable reference to the data, if this guard has …\nInitialize this <code>InitGuard</code>, allowing it to be read from in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module includes some macros for more easily working …\nGet a reference to the data, if this guard has been …\nGet a mutable reference to the data, if this guard has …\nA pinned projection of a struct field.\nAn unpinned projection of a struct field.\nLike <code>Bitmap</code>, but for arrays. This is unfortunately needed …\nFind <code>n</code> consecutive unset bits, set them and return the …\nFind <code>n</code> consecutive unset bits, set them and return the …\nFree <code>n</code> previously allocated bits, starting at <code>index</code>.\nFree <code>n</code> previously allocated bits, starting at <code>index</code>.\n<code>LinkerSymbol</code> is an extern type that represents a symbol …\nDivide <code>x</code> by <code>divide_by</code>, taking the ceiling if it does not …\nFast integer <code>log2</code> that floors to the lower power-of-2 if <code>x</code> …\nReturns <code>true</code> if all values in <code>other</code> are within <code>self</code>.\nSplit <code>self</code> into three ranges: the portion before <code>other</code>, …")