searchState.loadedDescShard("poplar", 0, "A <code>Handle</code> is used to represent a task’s access to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPoplar’s <code>async</code> runtime. This provides an executor based …\n<code>N</code> must be a multiple of 4, and padded with zeros, so the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new channel. Returns one end as a <code>Channel</code>, and a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceive a message from the channel, if there’s one …\nA <code>DmaToken</code> refers to an underlying <code>DmaObject</code>, <code>DmaArray</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe upper byte of the class-code. This identifies the Base …\nThe ID of the particular device. These are allocated by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe lower byte of the class-code. This may indicate a …\nA handle to an <code>Event</code> that is signalled when this PCI …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA device-specific revision identifier. These are chosen by …\nThe middle byte of the class-code. This identifies the Sub …\nThe ID of the manufacturer of the device. These are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe virtual address (address in the task’s address …\nFor <code>MemoryObject</code>s with a known physical mapping, translate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransferred handles must have the <code>TRANSFER</code> right.\nThe <code>Channel</code> handle must have the <code>SEND</code> right to use the …\nThe <code>Channel</code> handle is invalid.\nA handle to be transferred is invalid.\nName must be greater than <code>0</code> bytes, and not greater than <code>256</code>…\nName must be greater than <code>0</code> bytes, and not greater than <code>256</code>…\nThe <code>Channel</code> handle isn’t a <code>Channel</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreate a MemoryObject kernel object of the given size (in …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe calling task does not have the correct capability to …\nThe address passed in <code>a</code> to write the info struct into was …\nThe kernel did not create a framebuffer.\nDescribes how the supplied framebuffer represents pixels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMakes a raw <code>pci_get_info</code> system call, given a pointer to a …\nConvert a <code>Result</code> that carries a custom status on success. …")