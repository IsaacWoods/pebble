var searchIndex = JSON.parse('{\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":"SIIKKKKKKKKK","n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":[[0,"bit_field"],[12,"core::ops::range"]],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[5,0,0,6,5,6,5,6,5,6,5,6],"f":[0,0,0,[-1,1,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,-2],-1,[],[[3,[1]]]],[[-1,-2],-3,[],[[3,[1]]],[]],[[-1,1,2],-1,[]],[[-1,1,2],4,[]],[[-1,-2,-1],-1,[],[[3,[1]]]],[[-1,-2,-3],4,[],[[3,[1]]],[]]],"c":[],"p":[[15,"usize"],[15,"bool"],[8,"RangeBounds",12],[15,"tuple"],[8,"BitField",0],[8,"BitArray",0]],"b":[]},\
"bitflags":{"doc":"Generate types for C-style flags with ergonomic APIs.","t":"SCIQSSDILLOKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLALLLLLLALLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLDIILLLLLLFLLLKFLLLK","n":["ALL","BitFlags","Bits","Bits","EMPTY","FLAGS","Flag","Flags","all","all","bitflags","bits","borrow","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","from","from_bits","from_bits","from_bits_retain","from_bits_truncate","from_bits_truncate","from_name","from_name","insert","insert","intersection","intersection","intersects","intersects","into","is_all","is_all","is_empty","is_empty","is_named","is_unnamed","iter","iter","iter","iter_names","iter_names","name","new","parser","remove","remove","set","set","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_into","type_id","union","union","value","Iter","IterNames","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","next","next","remaining","try_from","try_from","try_into","try_into","type_id","type_id","ParseError","ParseHex","WriteHex","borrow","borrow_mut","empty_flag","fmt","fmt","from","from_str","into","invalid_hex_flag","invalid_named_flag","parse_hex","to_writer","try_from","try_into","type_id","write_hex"],"q":[[0,"bitflags"],[65,"bitflags::iter"],[86,"bitflags::parser"],[105,"core::marker"],[106,"core::option"],[107,"core::result"],[108,"core::any"],[109,"core::fmt"],[110,"core::fmt"]],"d":["A value with all bits set.","","A bits type that can be used as storage for a flags type.","The underlying bits type.","A value with all bits unset.","The set of defined flags.","A defined flags value that may be named or unnamed.","A set of defined flags using a bits type as storage.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Generate a flags type.","Get the underlying bits value.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether the flag is named.","Whether the flag is unnamed.","Yield the bits of a source flags value in a set of …","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Get the name of this flag.","Define a flag.","Parsing flags from text.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the flags value of this flag.","An iterator over flags values.","An iterator over flags values.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Get a flags value of any remaining bits that haven’t …","","","","","","","An error encountered while parsing flags from text.","Parse a value from a hex string.","Encode a value as a hex string.","","","A hex or named flag wasn’t found between separators.","","","Returns the argument unchanged.","Parse a flags value from text.","Calls <code>U::from(self)</code>.","An invalid hex flag was encountered.","A named flag that doesn’t correspond to any on the flags …","Parse the value from hex.","Write a flags value as text.","","","","Write the value as hex."],"i":[18,0,0,11,18,11,0,0,11,11,0,11,6,6,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11,11,11,11,11,11,6,11,11,11,11,6,6,0,11,11,11,11,6,6,0,11,11,11,11,11,11,11,11,6,6,6,11,11,6,0,0,7,8,7,8,7,8,7,8,7,8,7,8,8,7,8,7,8,7,8,0,0,0,12,12,12,12,12,12,0,12,12,12,19,0,12,12,12,20],"f":[0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],0,[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],1,2],[[-1,-1],1,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[[],[[3,[-1]]],[]],[[],[[3,[-1]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[4,[[3,[-1]]],[]],[4,[[3,[-1]]],[]],[[-1,-1],5,2],[[-1,-1],5,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],1,2],[[-1,-1],1,2],[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[6,[-1]]],1,[]],[[[6,[-1]]],1,[]],0,[-1,[[7,[-1]]],[]],[-1,[[7,[-1]]],[]],[-1,[[8,[-1]]],[]],[-1,[[8,[-1]]],[]],[[[6,[-1]]],4,[]],[[4,-1],[[6,[-1]]],[]],0,[[-1,-1],5,2],[[-1,-1],5,2],[[-1,-1,1],5,2],[[-1,-1,1],5,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],5,2],[[-1,-1],5,2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[6,[-1]]],-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1]]],3,11],[[[8,[-1]]],3,11],[[[8,[-1]]],-1,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[[12,13],14],[[12,13],14],[-1,-1,[]],[4,[[9,[-1,12]]],11],[-1,-2,[],[]],[-1,12,15],[-1,12,15],[4,[[9,[-1,12]]],2],[[-1,-2],[[9,[5,16]]],11,17],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,-2],14,[],17]],"c":[],"p":[[15,"bool"],[8,"Sized",105],[4,"Option",106],[15,"str"],[15,"tuple"],[3,"Flag",0],[3,"Iter",65],[3,"IterNames",65],[4,"Result",107],[3,"TypeId",108],[8,"Flags",0],[3,"ParseError",86],[3,"Formatter",109],[6,"Result",109],[8,"Display",109],[3,"Error",109],[8,"Write",109],[8,"Bits",0],[8,"ParseHex",86],[8,"WriteHex",86]],"b":[[92,"impl-Debug-for-ParseError"],[93,"impl-Display-for-ParseError"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[156,"core::cmp"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::option"],[160,"core::result"],[161,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[11]]],9],[[[8,[12]]],9],[[[8,[13]]],9],[[[8,[14]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[1,-1],9,19],[[2,-1],9,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[3]]]],[[2,2],[[20,[3]]]],[[[8,[21]]],7],[[[8,[21]],[8,[7]]],9],[[[8,[21]],[8,[7]]],9],[[[8,[21]]],10],[[[8,[21]],[8,[10]]],9],[[[8,[21]],[8,[10]]],9],[[[8,[21]]],11],[[[8,[21]],[8,[11]]],9],[[[8,[21]]],12],[[[8,[21]],[8,[12]]],9],[[[8,[21]]],13],[[[8,[21]]],13],[[[8,[21]],[8,[13]]],9],[[[8,[21]]],14],[[[8,[21]]],14],[[[8,[21]],[8,[14]]],9],[[[8,[21]],22],14],[[[8,[21]],22],11],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],15],[[[8,[21]],22],15],[[[8,[21]],22],15],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[[8,[21]],7],9],[[[8,[7]],[8,[21]]],9],[[[8,[21]],10],9],[[[8,[10]],[8,[21]]],9],[[[8,[21]],11],9],[[[8,[11]],[8,[21]]],9],[[[8,[21]],12],9],[[[8,[12]],[8,[21]]],9],[[[8,[21]],13],9],[[[8,[21]],13],9],[[[8,[13]],[8,[21]]],9],[[[8,[21]],14],9],[[[8,[21]],14],9],[[[8,[14]],[8,[21]]],9],[[[8,[25]],[8,[21]]],9],[[[8,[21]],14,22],9],[[[8,[21]],11,22],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9]],"c":[53,56],"p":[[4,"BigEndian",0],[4,"LittleEndian",0],[4,"Ordering",156],[15,"bool"],[3,"Formatter",157],[6,"Result",157],[15,"f32"],[15,"slice"],[15,"tuple"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher",158],[4,"Option",159],[15,"u8"],[15,"usize"],[4,"Result",160],[3,"TypeId",161],[15,"i8"],[8,"ByteOrder",0]],"b":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"hal":{"doc":"","t":"ANGDDDIIGGGDDIESEEEDLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLFLLLLLLLLLLLLFKKLLFLLLKLLLLLLLLMMLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMM","n":["memory","AlreadyMapped","Bytes","FakeFrameAllocator","Flags","Frame","FrameAllocator","FrameSize","Gibibytes","Kibibytes","Mebibytes","PAddr","Page","PageTable","PagingError","SIZE","Size1GiB","Size2MiB","Size4KiB","VAddr","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","align_down","align_down","align_up","align_up","allocate","allocate","allocate_n","allocate_n","backward_checked","backward_checked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cached","canonicalise","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","contains","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","executable","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","frames_needed","free_n","free_n","from","from","from","from","from","from","from","from","from","from","from","from","gibibytes","into","into","into","into","into","into","into","into","into","into","is_aligned","is_aligned","kibibytes","map","map_area","map_range","map_range","mebibytes","mut_ptr","new","new","new_with_kernel_mapped","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ptr","start","start","starts_with","starts_with","steps_between","steps_between","sub","sub","sub_assign","sub_assign","switch_to","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","user_accessible","writable"],"q":[[0,"hal"],[1,"hal::memory"],[200,"core::ops::range"],[201,"core::option"],[202,"core::clone"],[203,"core::cmp"],[204,"core::cmp"],[205,"core::fmt"],[206,"core::cmp"]],"d":["The HAL memory API tries to model an abstract version of a …","The virtual memory that is being mapped is already mapped …","","A <code>FrameAllocator</code> that can’t actually allocate or free …","Defines the permissions for a region of memory. Used both …","","<code>FrameAllocator</code> is used to interact with a physical memory …","This trait is implemented by a number of marker types, one …","","","","Represents a physical address. If the target architecture …","","A <code>PageTable</code> allows the manipulation of a set of …","","","","","","Represents a virtual address. On architectures that have …","","","","","","","","","","Align this address to the given alignment, moving …","Align this address to the given alignment, moving …","","Align this address to the given alignment, moving upwards …","Allocate a <code>Frame</code>.","","Allocate <code>n</code> contiguous <code>Frame</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","Canonicalise this virtual address. On x86_64 and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Free <code>n</code> frames that were previously allocated by this …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Map a <code>Page</code> to a <code>Frame</code> with the given flags.","Map an area of <code>size</code> bytes starting at the given address …","Map each <code>Page</code> in a range to a corresponding <code>Frame</code> with the …","Map each <code>Page</code> in a range to a corresponding <code>Frame</code> with the …","","","Construct a new <code>PAddr</code>. On x86_64, physical addresses must …","Construct a new <code>VAddr</code>. This will canonicalise the given …","Constructs a new set of page tables, but with the kernel …","","","","","","","","","","","","","","","","","","","Install these page tables as the current set.","Get the physical address that a given virtual address is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,4,5,6,7,1,4,6,7,6,7,6,7,28,9,28,9,1,4,9,1,4,5,23,6,7,13,14,15,9,1,4,5,23,6,7,13,14,15,5,7,6,7,6,7,1,4,5,6,7,13,14,15,1,4,6,7,13,14,15,1,4,5,6,7,1,4,5,6,7,13,14,15,5,1,4,5,23,6,6,6,7,7,7,13,14,15,1,4,3,28,9,9,1,4,5,23,6,7,7,7,13,14,15,0,9,1,4,5,23,6,7,13,14,15,6,7,0,32,32,32,32,0,7,6,7,32,1,4,6,7,13,14,15,7,1,4,1,4,1,4,6,7,6,7,32,32,9,1,4,5,23,6,7,13,14,15,9,1,4,5,23,6,7,13,14,15,9,1,4,5,23,6,7,13,14,15,32,5,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],2],[],3],[[[4,[-1]],2],[],3],[[5,5]],[[6,2]],[[7,2]],[[[1,[-1]],2],8,3],[[[4,[-1]],2],8,3],[[6,2],8],[[7,2],8],[[6,2],6],[[7,2],7],[[6,2],6],[[7,2],7],[-1,[[1,[-2]]],[],[]],[9,[[1,[-1]]],3],[[-1,2],[[10,[[1,[-2]]]]],[],[]],[[9,2],[[10,[[1,[-1]]]]],3],[[[1,[-1]],2],[[11,[[1,[-1]]]]],3],[[[4,[-1]],2],[[11,[[4,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[7,7],[[6,2],[[11,[6]]]],[[7,2],[[11,[7]]]],[[6,2],[[11,[6]]]],[[7,2],[[11,[7]]]],[[[1,[-1]]],[[1,[-1]]],[3,12]],[[[4,[-1]]],[[4,[-1]]],[12,3]],[5,5],[6,6],[7,7],[13,13],[14,14],[15,15],[[[1,[-1]],[1,[-1]]],16,[3,17]],[[[4,[-1]],[4,[-1]]],16,[17,3]],[[6,6],16],[[7,7],16],[[13,13],16],[[14,14],16],[[15,15],16],[6,[[1,[-1]]],3],[7,[[4,[-1]]],3],[[],5],[[],6],[[],7],[[[1,[-1]],[1,[-1]]],18,[3,19]],[[[4,[-1]],[4,[-1]]],18,[19,3]],[[5,5],18],[[6,6],18],[[7,7],18],[[13,13],18],[[14,14],18],[[15,15],18],0,[[[1,[-1]],20],21,[3,22]],[[[4,[-1]],20],21,[22,3]],[[5,20],21],[[23,20],21],[[6,20],21],[[6,20],21],[[6,20],21],[[7,20],21],[[7,20],21],[[7,20],21],[[13,20],21],[[14,20],21],[[15,20],21],[[[1,[-1]],2],[[11,[[1,[-1]]]]],3],[[[4,[-1]],2],[[11,[[4,[-1]]]]],3],[24,24],[[-1,[1,[-2]],2],8,[],[]],[[9,[1,[-1]],2],8,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,2],18],[[7,2],18],[26,24],[[-1,[4,[-2]],[1,[-2]],5,-4],[[27,[8,23]]],[],3,[],[[28,[-3]]]],[[-1,7,6,2,5,-3],[[27,[8,23]]],[],[],[[28,[-2]]]],[[-1,[10,[[4,[-2]]]],[10,[[1,[-2]]]],5,-4],[[27,[8,23]]],[],3,[],[[28,[-3]]]],[[-1,[10,[[4,[-2]]]],[10,[[1,[-2]]]],5,-4],[[27,[8,23]]],[],3,[],[[28,[-3]]]],[29,24],[7],[2,[[11,[6]]]],[2,7],[[-1,-3],-1,[],[],[[28,[-2]]]],[[[1,[-1]],[1,[-1]]],[[11,[16]]],[3,30]],[[[4,[-1]],[4,[-1]]],[[11,[16]]],[30,3]],[[6,6],[[11,[16]]]],[[7,7],[[11,[16]]]],[[13,13],[[11,[16]]]],[[14,14],[[11,[16]]]],[[15,15],[[11,[16]]]],[7],0,0,[6,[[1,[-1]]],3],[7,[[4,[-1]]],3],[[[1,[-1]],[1,[-1]]],[[11,[2]]],3],[[[4,[-1]],[4,[-1]]],[[11,[2]]],3],[[6,2]],[[7,2]],[[6,2],8],[[7,2],8],[-1,8,[]],[[-1,7],[[11,[6]]],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[-1,[4,[-2]]],[[11,[[1,[-2]]]]],[],3],0,0],"c":[],"p":[[3,"Frame",1],[15,"usize"],[8,"FrameSize",1],[3,"Page",1],[3,"Flags",1],[3,"PAddr",1],[3,"VAddr",1],[15,"tuple"],[3,"FakeFrameAllocator",1],[3,"Range",200],[4,"Option",201],[8,"Clone",202],[4,"Size4KiB",1],[4,"Size2MiB",1],[4,"Size1GiB",1],[4,"Ordering",203],[8,"Ord",203],[15,"bool"],[8,"PartialEq",203],[3,"Formatter",204],[6,"Result",204],[8,"Debug",204],[4,"PagingError",1],[6,"Bytes",1],[6,"Gibibytes",1],[6,"Kibibytes",1],[4,"Result",205],[8,"FrameAllocator",1],[6,"Mebibytes",1],[8,"PartialOrd",203],[3,"TypeId",206],[8,"PageTable",1]],"b":[[98,"impl-LowerHex-for-PAddr"],[99,"impl-UpperHex-for-PAddr"],[100,"impl-Debug-for-PAddr"],[101,"impl-LowerHex-for-VAddr"],[102,"impl-Debug-for-VAddr"],[103,"impl-UpperHex-for-VAddr"],[118,"impl-From%3C*const+T%3E-for-VAddr"],[119,"impl-From%3C*mut+T%3E-for-VAddr"]]},\
"hash32":{"doc":"32-bit hashing machinery","t":"IDDIIQDLLLLLLKLLLLLLKLLLLLLKLLLLLLLLLLLLLLKLL","n":["BuildHasher","BuildHasherDefault","FnvHasher","Hash","Hasher","Hasher","Murmur3Hasher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","default","default","default","eq","finish","finish","finish","fmt","from","from","from","hash","hash_slice","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write"],"q":[[0,"hash32"],[45,"core::default"],[46,"core::fmt"],[47,"core::fmt"],[48,"core::result"],[49,"core::any"]],"d":["See <code>core::hash::BuildHasher</code> for details","See <code>core::hash::BuildHasherDefault</code> for details","32-bit Fowler-Noll-Vo hasher","See <code>core::hash::Hash</code> for details","See <code>core::hash::Hasher</code> for details","See <code>core::hash::BuildHasher::Hasher</code>","32-bit MurmurHash3 hasher","","","","","","","See <code>core::hash::BuildHasher.build_hasher</code>","","","","","","","See <code>core::hash::Hasher.finish</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>const</code> constructor","","","","","","","","","","See <code>core::hash::Hasher.write</code>","",""],"i":[0,0,0,0,0,16,0,4,5,1,4,5,1,16,1,1,4,5,1,1,3,4,5,1,4,5,1,17,17,4,5,1,1,4,5,1,4,5,1,4,5,1,3,4,5],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[1,[-1]]],[],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[],4],[[],5],[[],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],6,[2,3]],[-1,7,[]],[4,7],[5,7],[[[1,[-1]],8],9,[2,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],10,[],3],[[[11,[-1]],-2],10,12,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[-1,[11,[15]]],10,[]],[[4,[11,[15]]],10],[[5,[11,[15]]],10]],"c":[],"p":[[3,"BuildHasherDefault",0],[8,"Default",45],[8,"Hasher",0],[3,"FnvHasher",0],[3,"Murmur3Hasher",0],[15,"bool"],[15,"u32"],[3,"Formatter",46],[6,"Result",46],[15,"tuple"],[15,"slice"],[8,"Sized",47],[4,"Result",48],[3,"TypeId",49],[15,"u8"],[8,"BuildHasher",0],[8,"Hash",0]],"b":[]},\
"heapless":{"doc":"<code>static</code> friendly data structures that don’t require …","t":"CCCDEGGDDDDNDDCDNDDLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGGGGGLLLLLLLLLLLDEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLDQILALLLLLLLLLLLLLLLLLLLLLLLDDQILLLLLLLLLLLLLLLLLLLLLLLLLDDIDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Arc","BinaryHeap","Bucket","Deque","Entry","FnvIndexMap","FnvIndexSet","HistoryBuffer","IndexMap","IndexSet","LinearMap","Occupied","OccupiedEntry","OldestOrdered","Pos","String","Vacant","VacantEntry","Vec","as_mut","as_mut","as_mut_ptr","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slices","as_str","back","back_mut","binary_heap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clear_with","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains_key","contains_key","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","difference","drop","drop","drop","drop","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_slice","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_str","front","front_mut","get","get","get","get_mut","get_mut","get_mut","hash","hash","hash","hash","index","index","index_mut","index_mut","insert","insert","insert","insert","insert","insert","intersection","into","into","into","into","into","into","into","into","into","into","into","into_array","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_full","is_full","is_subset","is_superset","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","key","key","keys","keys","last","last","last_mut","len","len","len","len","len","mpmc","ne","ne","ne","new","new","new","new","new","new","new","new_with","next","oldest_ordered","partial_cmp","partial_cmp","pool","pop","pop","pop_back","pop_back_unchecked","pop_front","pop_front_unchecked","pop_unchecked","push","push","push_back","push_back_unchecked","push_front","push_front_unchecked","push_str","push_unchecked","recent","remove","remove","remove","remove","remove","remove_entry","resize","resize_default","retain","retain_mut","set_len","sorted_linked_list","spsc","starts_with","swap_remove","swap_remove","swap_remove_unchecked","symmetric_difference","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values","values_mut","values_mut","write","write_char","write_str","write_str","BinaryHeap","Kind","Max","Min","PeekMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","default","deref","deref_mut","drop","fmt","from","from","from","from","into","into","into","into","into_iter","into_vec","is_empty","iter","iter_mut","len","new","peek","peek_mut","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","MpMcQueue","Q16","Q2","Q32","Q4","Q64","Q8","borrow","borrow_mut","default","dequeue","enqueue","from","into","new","try_from","try_into","type_id","Box","Init","Node","Pool","Uninit","alloc","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cmp","deref","deref_mut","eq","fmt","fmt","free","from","from","from","from","from","grow","grow_exact","hash","init","into","into","into","into","into","new","partial_cmp","singleton","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Box","Data","Pool","alloc","arc","as_mut","as_ref","borrow","borrow_mut","cmp","deref","deref_mut","drop","eq","fmt","fmt","forget","freeze","from","grow","grow_exact","hash","init","into","partial_cmp","try_from","try_into","type_id","Arc","ArcInner","Data","Pool","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","deref","drop","eq","fmt","fmt","from","from","hash","into","into","new","partial_cmp","try_from","try_from","try_into","try_into","type_id","type_id","FindMut","Iter","Kind","LinkedIndexU16","LinkedIndexU8","LinkedIndexUsize","Max","Min","Node","SortedLinkedList","SortedLinkedListIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","deref","deref_mut","drop","drop","eq","eq","eq","find_mut","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_full","iter","new_u16","new_u8","new_usize","next","partial_cmp","partial_cmp","partial_cmp","peek","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Consumer","Iter","IterMut","Producer","Queue","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clone","clone","default","dequeue","dequeue","dequeue_unchecked","dequeue_unchecked","drop","enqueue","enqueue","enqueue_unchecked","enqueue_unchecked","eq","fmt","from","from","from","from","from","hash","hash","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_full","iter","iter_mut","len","len","len","new","next","next","next_back","next_back","peek","peek","ready","ready","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"heapless"],[344,"heapless::binary_heap"],[399,"heapless::mpmc"],[417,"heapless::pool"],[474,"heapless::pool::singleton"],[502,"heapless::pool::singleton::arc"],[531,"heapless::sorted_linked_list"],[641,"heapless::spsc"],[721,"core::option"],[722,"core::cmp"],[723,"hash32"],[724,"hash32"],[725,"core::clone"],[726,"core::cmp"],[727,"core::default"],[728,"core::cmp"],[729,"core::result"],[730,"core::fmt"],[731,"core::fmt"],[732,"core::hash"],[733,"hash32"],[734,"core::any"],[735,"core::fmt"],[736,"core::slice::iter"],[737,"core::convert"]],"d":["","","","A fixed capacity double-ended queue.","A view into an entry in the map","A <code>heapless::IndexMap</code> using the default FNV hasher","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","A “history buffer”, similar to a write-only ring …","Fixed capacity <code>IndexMap</code>","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","The entry corresponding to the key <code>K</code> exists in the map","An occupied entry which can be manipulated","An iterator on the underlying buffer ordered from oldest …","","A fixed capacity <code>String</code>","The entry corresponding to the key <code>K</code> does not exist in the …","A view into an empty slot in the underlying map","A fixed capacity <code>Vec</code>","","","Returns a raw pointer to the vector’s buffer, which may …","Returns a pair of mutable slices which contain, in order, …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Returns a raw pointer to the vector’s buffer.","","","","","","Returns the array slice backing the buffer, without …","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire string.","Provides a reference to the back element, or None if the …","Provides a mutable reference to the back element, or None …","A priority queue implemented with a binary heap.","","","","","","","","","","","","","","","","","","","","","","","Returns the maximum number of elements the deque can hold.","Returns the capacity of the buffer, which is the length of …","Returns the number of elements the map can hold","Returns the number of elements the set can hold","Returns the number of elements that the map can hold","Returns the maximum number of elements the String can hold","Returns the maximum number of elements the vector can hold.","Clears the deque, removing all values.","Clears the buffer, replacing every element with the …","Remove all key-value pairs in the map, while preserving …","Clears the set, removing all values.","Clears the map, removing all key-value pairs","Truncates this <code>String</code>, removing all contents.","Clears the vector, removing all values.","Clears the buffer, replacing every element with the given …","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns true if the map contains a value for the specified …","Returns true if the map contains a value for the specified …","","","","","","","","","","","","","Visits the values representing the difference, i.e. the …","","","","","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","Returns an entry for the corresponding key","","","","","","","","","","","","","","","","","","","","","Extends the vec from an iterator.","Clones and writes all elements in a slice to the buffer.","Clones and appends all elements in a slice to the <code>Vec</code>.","Get the first key-value pair","Get the first value","Get the first key-value pair, with mutable access to the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Constructs a new vector with a fixed capacity of <code>N</code> and …","","Provides a reference to the front element, or None if the …","Provides a mutable reference to the front element, or None …","Gets a reference to the value associated with this entry","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key","Gets a mutable reference to the value associated with this …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","","","","","","","","","Overwrites the underlying map’s value with this entry’…","Inserts this entry into to underlying map, yields a …","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts a key-value pair into the map.","Inserts an element at position <code>index</code> within the vector, …","Visits the values representing the intersection, i.e. the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contents of the vector as an array of length <code>M</code> …","Converts a <code>String</code> into a byte vector.","","","","","","","","","","","","","Consumes this entry to yield to key associated with it","Consumes this entry and yields a reference to the …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns whether the deque is empty.","Returns true if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns true if the map contains no elements","Returns true if the vec is empty","Returns whether the deque is full (i.e. if …","Returns true if the vec is full","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …","Examples","Returns an iterator over the deque.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the values of the set, in their …","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator that allows modifying each value.","Return an iterator over the key-value pairs of the map, in …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key that this entity corresponds to","Get the key associated with this entry","Return an iterator over the keys of the map, in their order","An iterator visiting all keys in arbitrary order","Get the last key-value pair","Get the last value","Get the last key-value pair, with mutable access to the …","Returns the number of elements currently in the deque.","Returns the current fill level of the buffer.","Return the number of key-value pairs in the map.","Returns the number of elements in the set.","Returns the number of elements in this map","A fixed capacity Multiple-Producer Multiple-Consumer …","","","","Constructs a new, empty deque with a fixed capacity of <code>N</code>","Constructs a new history buffer.","Creates an empty <code>IndexMap</code>.","Creates an empty <code>IndexSet</code>","Creates an empty <code>LinearMap</code>","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new history buffer, where every element is …","","Returns an iterator for iterating over the buffer from …","","","A heap-less, interrupt-safe, lock-free memory pool (*)","Removes the last character from the string buffer and …","Removes the last element from a vector and returns it, or …","Removes the item from the back of the deque and returns …","Removes an item from the back of the deque and returns it, …","Removes the item from the front of the deque and returns …","Removes an item from the front of the deque and returns …","Removes the last element from a vector and returns it","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the front of the deque","Appends an <code>item</code> to the front of the deque","Appends a given string slice onto the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Returns a reference to the most recently written value.","Removes this entry from the map and yields its value","Same as <code>swap_remove</code>","Removes a value from the set. Returns <code>true</code> if the value …","Removes a key from the map, returning the value at the key …","Removes and returns the element at position <code>index</code> within …","Removes this entry from the map and yields its …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","A fixed sorted priority linked list, similar to <code>BinaryHeap</code> …","Fixed capacity Single Producer Single Consumer (SPSC) queue","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Remove the key-value pair equivalent to <code>key</code> and return its …","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Visits the values representing the symmetric difference, …","Shortens this <code>String</code> to the specified length.","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e. all the …","Return an iterator over the values of the map, in their …","An iterator visiting all values in arbitrary order","Return an iterator over mutable references to the the …","An iterator visiting all values mutably in arbitrary order","Writes an element to the buffer, overwriting the oldest …","","","","A priority queue implemented with a binary heap.","The binary heap kind: min-heap or max-heap","Max-heap","Min-heap","Structure wrapping a mutable reference to the greatest …","","","","","","","","","Returns the capacity of the binary heap.","Drops all items from the binary heap.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …","Checks if the binary heap is empty.","Returns an iterator visiting all values in the underlying …","Returns a mutable iterator visiting all values in the …","Returns the length of the binary heap.","Creates an empty BinaryHeap as a $K-heap.","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the peeked value from the heap and returns it.","Removes the <em>top</em> (greatest if max-heap, smallest if …","Pushes an item onto the binary heap.","Pushes an item onto the binary heap without first checking …","","","","","","","","","","","","","MPMC queue with a capacity for N elements N must be a …","MPMC queue with a capability for 16 elements.","MPMC queue with a capability for 2 elements.","MPMC queue with a capability for 32 elements.","MPMC queue with a capability for 4 elements.","MPMC queue with a capability for 64 elements.","MPMC queue with a capability for 8 elements.","","","","Returns the item in the front of the queue, or <code>None</code> if the …","Adds an <code>item</code> to the end of the queue","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates an empty queue","","","","A memory block","Initialized type state","Unfortunate implementation detail required to use the …","A lock-free memory pool","Uninitialized type state","Claims a memory block from the pool","","","","","","","","","","","","","","","","","","","Returns a memory block to the pool","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Increases the capacity of the pool","Increases the capacity of the pool","","Initializes this memory block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty pool","","<code>Pool</code> as a global singleton","","","","","","","","","","","","","","","","A memory block that belongs to the global memory pool, <code>POOL</code>","The type of data that can be allocated on this pool","A global singleton memory pool","Claims a memory block from the pool","Like <code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather …","","","","","","","","","","","","Forgets the contents of this memory block without running …","(DO NOT USE, SEE DEPRECATION) Freezes the contents of this …","Returns the argument unchanged.","Increases the capacity of the pool","Increases the capacity of the pool","","Initializes this memory block","Calls <code>U::from(self)</code>.","","","","","<code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather than …","Unfortunate implementation detail required to use the …","The data behind the Arc pointer","Pool of Arc pointers","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>Arc</code>","","","","","","","","Comes from <code>SortedLinkedList::find_mut</code>.","Iterator for the linked list.","The linked list kind: min-list or max-list","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Marker for Max sorted <code>SortedLinkedList</code>.","Marker for Min sorted <code>SortedLinkedList</code>.","A node in the <code>SortedLinkedList</code>.","The linked list.","Trait for defining an index for the linked list, never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find an element in the list that can be changed and …","This will resort the element into the correct position in …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the linked list is empty.","Checks if the linked list is full.","Get an iterator over the sorted list.","Create a new linked list.","Create a new linked list.","Create a new linked list.","","","","","Peek at the first element.","Pops the first element in the list.","This will pop the element from the list.","Pop an element from the list without checking so the list …","Pushes an element to the linked list and sorts it into …","Pushes a value onto the list without checking if the list …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A queue “consumer”; it can dequeue items from the queue","An iterator over the items of a queue","A mutable iterator over the items of a queue","A queue “producer”; it can enqueue items into the queue","A statically allocated single producer single consumer …","","","","","","","","","","","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","","","","Returns the item in the front of the queue, or <code>None</code> if the …","Returns the item in the front of the queue, or <code>None</code> if the …","Returns the item in the front of the queue, without …","Returns the item in the front of the queue, without …","","Adds an <code>item</code> to the end of the queue","Adds an <code>item</code> to the end of the queue, returns back the <code>item</code>…","Adds an <code>item</code> to the end of the queue, without checking if …","Adds an <code>item</code> to the end of the queue, without checking if …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if the queue is empty","Returns <code>true</code> if the queue is full","Iterates from the front of the queue to the back","Returns an iterator that allows modifying each value","Returns the number of elements in the queue","Returns the number of elements in the queue","Returns the number of elements in the queue","Creates an empty queue with a fixed capacity of <code>N - 1</code>","","","","","Returns a reference to the item in the front of the queue …","Returns the item in the front of the queue without …","Returns if there are any items to dequeue. When this …","Returns if there is any space to enqueue a new item. When …","Splits a queue into producer and consumer endpoints","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,27,0,0,1,1,1,3,5,5,1,8,5,5,1,1,8,1,3,5,3,3,0,3,8,27,41,45,11,15,16,5,1,19,3,8,27,41,45,11,15,16,5,1,19,3,8,11,15,16,5,1,3,8,11,15,16,5,1,8,3,11,15,16,5,1,19,5,1,15,11,16,3,8,11,15,16,5,1,8,5,1,5,1,15,3,8,16,1,1,11,11,15,16,5,5,5,1,1,1,1,1,1,8,8,11,11,15,15,1,1,1,8,1,11,15,11,3,8,11,15,16,5,5,1,3,8,27,41,45,11,15,16,5,5,5,5,5,5,5,5,5,5,1,19,11,15,16,5,5,5,1,1,5,3,3,41,11,16,41,11,16,5,5,1,1,11,16,11,16,41,45,11,15,16,1,15,3,8,27,41,45,11,15,16,5,1,19,1,5,3,3,3,11,11,11,15,16,1,1,1,19,45,41,15,3,11,15,16,1,3,1,15,15,3,11,15,16,3,11,16,41,45,11,16,11,15,11,3,8,11,15,16,0,5,5,5,3,8,11,15,16,5,1,8,19,8,5,1,0,5,1,3,3,3,3,1,5,1,3,3,3,3,5,1,8,41,11,15,16,1,41,1,1,1,1,1,0,0,1,11,1,1,15,5,1,3,8,27,41,45,11,15,16,5,1,1,19,3,8,27,41,45,11,15,16,5,1,19,3,8,27,41,45,11,15,16,5,1,19,15,11,16,11,16,8,5,5,1,0,0,0,0,0,85,86,53,55,85,86,53,55,53,53,53,53,55,55,55,53,85,86,53,55,85,86,53,55,53,53,53,53,53,53,53,53,53,53,55,53,53,53,85,86,53,55,85,86,53,55,85,86,53,55,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,59,61,61,66,59,61,60,67,66,59,61,60,67,61,61,61,61,61,61,59,66,59,61,60,67,59,59,61,61,66,59,61,60,67,59,61,0,66,59,61,60,67,66,59,61,60,67,66,59,61,60,67,0,69,0,69,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,68,68,68,68,68,68,68,0,0,71,0,70,70,87,70,87,70,70,70,70,70,70,70,70,87,70,70,87,70,70,70,87,70,87,70,87,0,0,0,0,0,0,0,0,0,0,0,88,89,90,78,79,75,72,73,74,88,89,90,78,79,75,72,73,74,72,73,74,72,73,74,75,75,78,75,72,73,74,78,75,78,72,73,74,88,89,90,78,79,75,72,73,74,88,89,90,78,79,75,72,73,74,79,78,78,78,78,78,78,79,72,73,74,78,78,75,78,78,78,88,89,90,78,79,75,72,73,74,88,89,90,78,79,75,72,73,74,88,89,90,78,79,75,72,73,74,0,0,0,0,0,80,83,84,81,82,80,83,84,81,82,80,81,82,80,83,80,80,81,80,81,80,80,82,80,82,80,80,80,83,84,81,82,80,80,80,83,84,81,82,80,80,83,84,80,80,80,80,80,81,82,80,83,84,83,84,80,81,81,82,80,80,83,84,81,82,80,83,84,81,82,80,83,84,81,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[1,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[],[]],[[[3,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[5,6],[5,[[1,[7]]]],[[[1,[-1]]],[],[]],[[[8,[-1]]],[[2,[-1]]],[]],[5,[[2,[7]]]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[[1,[-1]]],[]],[[[8,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[3,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[5,6],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],10,[]],[[[8,[-1]]],10,[]],[[[11,[-1,-2,-3]]],10,[12,13],[],14],[[[15,[-1,-2]]],10,[12,13],14],[[[16,[-1,-2]]],10,12,[]],[5,10],[[[1,[-1]]],10,[]],[[[3,[-1]]],4,[]],[[[8,[-1]]],4,[]],[[[11,[-1,-2,-3]]],4,[12,13],[],14],[[[15,[-1,-2]]],4,[12,13],14],[[[16,[-1,-2]]],4,12,[]],[5,4],[[[1,[-1]]],4,[]],[[[8,[-1]],-1],4,[17,18]],[[[3,[-1]]],[[3,[-1]]],18],[[[11,[-1,-2,-3]]],[[11,[-1,-2,-3]]],[12,13,18],18,18],[[[15,[-1,-2]]],[[15,[-1,-2]]],[12,13,18],18],[[[16,[-1,-2]]],[[16,[-1,-2]]],[12,18],18],[5,5],[[[1,[-1]]],[[1,[-1]]],18],[[[19,[-1]]],[[19,[-1]]],18],[[5,5],20],[[[1,[-1]],[1,[-1]]],20,21],[[[15,[-2,-3]],-1],22,[23,12,13],[[24,[-1]],12,13],14],[[[11,[-2,-3,-4]],-1],22,[23,12,13],[[24,[-1]],12,13],[],14],[[[16,[-1,-2]],-1],22,12,[]],[[],[[3,[-1]]],[]],[[],[[8,[-1]]],[]],[[],[[11,[-1,-2,-3]]],[12,13],[],[14,25]],[[],[[15,[-1,-2]]],[12,13],[14,25]],[[],[[16,[-1,-2]]],12,[]],[[],5],[[],[[1,[-1]]],[]],[[[8,[-1]]],[[2,[-1]]],[]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[-1,-3]]],[12,13],14,14],[[[3,[-1]]],4,[]],[[[8,[-1]]],4,[]],[[[16,[-1,-2]]],4,[],[]],[[[1,[-1]]],4,[]],[[[1,[-1]],[2,[-1]]],22,26],[[[11,[-1,-2,-3]],-1],[[27,[-1,-2]]],[12,13],[],14],[[[11,[-1,-2,-3]],[11,[-1,-2,-4]]],22,[12,13],12,14,14],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[16,[-1,-2]],[16,[-1,-2]]],22,12,26],[[5,6],22],[[5,6],22],[[5,5],22],[[[1,[-2]],[2,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[1,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[28,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[28,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[26,[-1]]]],[[[8,[-1]],-2],4,[],29],[[[8,[-1]],-2],4,18,29],[[[11,[-1,-2,-3]],-4],4,[12,13],[],14,29],[[[11,[-1,-2,-3]],-4],4,[12,13,17],17,14,29],[[[15,[-1,-2]],-3],4,[12,13],14,29],[[[15,[-1,-2]],-3],4,[12,13,17],14,29],[[[1,[-1]],-2],4,17,29],[[[1,[-1]],-2],4,[],29],[[[1,[-1]],-2],4,[],29],[[[8,[-1]],[2,[-1]]],4,18],[[[1,[-1]],[2,[-1]]],[[30,[4,4]]],18],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[15,[-1,-2]]],[[9,[-1]]],[12,13],14],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[3,[-1]],31],32,33],[[[8,[-1]],31],32,33],[[[11,[-1,-2,-3]],31],32,[12,13,33],33,14],[[[15,[-1,-2]],31],32,[12,13,33],14],[[[16,[-1,-2]],31],32,[12,33],33],[[5,31],32],[[5,31],32],[[[1,[-1]],31],32,33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,5],[6,5],[7,5],[35,5],[36,5],[37,5],[38,5],[-1,-1,[]],[39,5],[40,5],[-1,-1,[]],[-1,-1,[]],[-1,[[11,[-2,-3,-4]]],29,[12,13],[],[14,25]],[-1,[[15,[-2,-3]]],29,[12,13],[14,25]],[-1,[[16,[-2,-3]]],29,12,[]],[-1,5,29],[-1,5,29],[-1,5,29],[-1,[[1,[-2]]],29,[]],[[[2,[-1]]],[[30,[[1,[-1]],4]]],18],[6,[[30,[5]]]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[16,[-2,-3]],-1],[[9,[-3]]],[12,23],[[24,[-1]],12],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[16,[-2,-3]],-1],[[9,[-3]]],[12,23],[[24,[-1]],12],[]],[[5,-1],4,42],[[5,-1],4,43],[[[1,[-1]],-2],4,44,43],[[[1,[-1]],-2],4,13,42],[[[11,[-2,-3,-4]],-1],-3,[23,12,13],[12,13,[24,[-1]]],[],14],[[[16,[-2,-3]],-1],-3,[12,23],[[24,[-1]],12],[]],[[[11,[-2,-3,-4]],-1],-3,[23,12,13],[12,13,[24,[-1]]],[],14],[[[16,[-2,-3]],-1],-3,[12,23],[[24,[-1]],12],[]],[[[41,[-1,-2]],-2],-2,[12,13],[]],[[[45,[-1,-2]],-2],[[30,[-2,-2]]],[12,13],[]],[[[11,[-1,-2,-3]],-1,-2],[[30,[[9,[-2]],[4,[-1,-2]]]]],[12,13],[],14],[[[15,[-1,-2]],-1],[[30,[22,-1]]],[12,13],14],[[[16,[-1,-2]],-1,-2],[[30,[[9,[-2]],[4,[-1,-2]]]]],12,[]],[[[1,[-1]],10,-1],[[30,[4,-1]]],[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[-1,-3]]],[12,13],14,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[30,[[28,[-1]],[1,[-1]]]]],[]],[5,[[1,[7]]]],[[[3,[-1]]],[],[]],[[[3,[-1]]],[],[]],[[[3,[-1]]],[],[]],[[[11,[-1,-2,-3]]],[],[12,13],[],14],[[[11,[-1,-2,-3]]],[],[12,13],[],14],[[[11,[-1,-2,-3]]],[],[12,13],[],14],[[[15,[-1,-2]]],[],[12,13],14],[[[16,[-1,-2]]],[],12,[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[-1,-2,[],[]],[[[45,[-1,-2]]],-1,[12,13],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[3,[-1]]],22,[]],[[[11,[-1,-2,-3]]],22,[12,13],[],14],[[[15,[-1,-2]]],22,[12,13],14],[[[16,[-1,-2]]],22,12,[]],[[[1,[-1]]],22,[]],[[[3,[-1]]],22,[]],[[[1,[-1]]],22,[]],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[3,[-1]]],[[0,[-1]]],[]],[[[11,[-1,-2,-3]]],[[0,[-1,-2]]],[12,13],[],14],[[[15,[-1,-2]]],[[0,[-1]]],[12,13],14],[[[16,[-1,-2]]],[[0,[-1,-2]]],12,[]],[[[3,[-1]]],[[0,[-1]]],[]],[[[11,[-1,-2,-3]]],[[0,[-1,-2]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[-1,-2]]],12,[]],[[[41,[-1,-2]]],-1,[12,13],[]],[[[45,[-1,-2]]],-1,[12,13],[]],[[[11,[-1,-2,-3]]],[[0,[46]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[46]]],12,[]],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[15,[-1,-2]]],[[9,[-1]]],[12,13],14],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[3,[-1]]],10,[]],[[[8,[-1]]],10,[]],[[[11,[-1,-2,-3]]],10,[12,13],[],14],[[[15,[-1,-2]]],10,[12,13],14],[[[16,[-1,-2]]],10,12,[]],0,[[5,6],22],[[5,6],22],[[5,5],22],[[],[[3,[-1]]],[]],[[],[[8,[-1]]],[]],[[],[[11,[-1,-2,[47,[-3]]]]],[],[],[]],[[],[[15,[-1,[47,[-2]]]]],[],[]],[[],[[16,[-1,-2]]],[],[]],[[],5],[[],[[1,[-1]]],[]],[-1,[[8,[-1]]],[17,18]],[[[19,[-1]]],[[9,[-1]]],[]],[[[8,[-1]]],[[19,[-1]]],[]],[[5,5],[[9,[20]]]],[[[1,[-1]],[1,[-1]]],[[9,[20]]],48],0,[5,[[9,[49]]]],[[[1,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],-1,[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],-1,[]],[[[1,[-1]]],-1,[]],[[5,49],[[30,[4,4]]]],[[[1,[-1]],-1],[[30,[4,-1]]],[]],[[[3,[-1]],-1],[[30,[4,-1]]],[]],[[[3,[-1]],-1],4,[]],[[[3,[-1]],-1],[[30,[4,-1]]],[]],[[[3,[-1]],-1],4,[]],[[5,6],[[30,[4,4]]]],[[[1,[-1]],-1],4,[]],[[[8,[-1]]],[[9,[-1]]],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[15,[-2,-3]],-1],22,[23,12,13],[[24,[-1]],12,13],14],[[[16,[-2,-3]],-1],[[9,[-3]]],[12,23],[[24,[-1]],12],[]],[[[1,[-1]],10],-1,[]],[[[41,[-1,-2]]],[[4,[-1,-2]]],[12,13],[]],[[[1,[-1]],10,-1],[[30,[4,4]]],18],[[[1,[-1]],10],[[30,[4,4]]],[18,25]],[[[1,[-1]],-2],4,[],50],[[[1,[-1]],-2],4,[],50],[[[1,[-1]],10],4,[]],0,0,[[[1,[-1]],[2,[-1]]],22,26],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[1,[-1]],10],-1,[]],[[[1,[-1]],10],-1,[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[46]]],[12,13],14,14],[[5,10],4],[[[1,[-1]],10],4,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[2,[-1]]],[[30,[[1,[-1]]]]],18],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[46]]],[12,13],14,14],[[[11,[-1,-2,-3]]],[[0,[46]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[46]]],12,[]],[[[11,[-1,-2,-3]]],[[0,[46]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[46]]],12,[]],[[[8,[-1]],-1],4,[]],[[5,49],[[30,[4,52]]]],[[5,6],[[30,[4,52]]]],[[[1,[7]],6],32],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],10,21,54],[[[53,[-1,-2]]],4,21,54],[[[53,[-1,-2]]],[[53,[-1,-2]]],[21,18],54],[[],[[53,[-1,-2]]],21,54],[[[55,[-1,-2]]],-1,21,54],[[[55,[-1,-2]]],-1,21,54],[[[55,[-1,-2]]],4,21,54],[[[53,[-1,-2]],31],32,[21,33],54],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],[],21,54],[[[53,[-1,-2]]],[[1,[-1]]],21,54],[[[53,[-1,-2]]],22,21,54],[[[53,[-1,-2]]],[[56,[-1]]],21,54],[[[53,[-1,-2]]],[[57,[-1]]],21,54],[[[53,[-1,-2]]],10,21,54],[[],[[53,[-1,-2]]],[],[]],[[[53,[-1,-2]]],[[9,[-1]]],21,54],[[[53,[-1,-2]]],[[9,[[55,[-1,-2]]]]],21,54],[[[53,[-1,-2]]],[[9,[-1]]],21,54],[[[55,[-1,-2]]],-1,21,54],[[[53,[-1,-2]]],-1,21,54],[[[53,[-1,-2]],-1],[[30,[4,-1]]],21,54],[[[53,[-1,-2]],-1],4,21,54],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[58,[-1]]],[]],[[[58,[-1]]],[[9,[-1]]],[]],[[[58,[-1]],-1],[[30,[4,-1]]],[]],[-1,-1,[]],[-1,-2,[],[]],[[],[[58,[-1]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],0,0,0,0,0,[[[59,[-1]]],[[9,[[61,[-1,60]]]]],[]],[[[61,[-2]]],[[2,[-1]]],[],[[62,[[2,[-1]]]]]],[[[61,[-2]]],[[2,[-1]]],[],[[63,[[2,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[-1]],[61,[-1]]],20,21],[[[61,[-1]]],-1,[]],[[[61,[-1]]],-1,[]],[[[61,[-1]],[61,[-1]]],22,26],[[[61,[-1]],31],32,33],[[[61,[-1]],31],32,64],[[[59,[-1]],[61,[-1,-2]]],4,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[59,[-1]],[2,[7]]],10,[]],[[[59,[-1]],[65,[-2]]],10,[],[[62,[[2,[[66,[-1]]]]]]]],[[[61,[-1]],-2],4,44,43],[[[61,[-1,60]],-1],[[61,[-1,67]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[59,[-1]]],[]],[[[61,[-1]],[61,[-1]]],[[9,[20]]],48],0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],0,0,0,[[],[[9,[[68,[-1,60]]]]],23],0,[[[68,[-1]]],[[2,[-2]]],69,[]],[[[68,[-1]]],[[2,[-2]]],69,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]],[68,[-1]]],20,69],[[[68,[-1]]],[],69],[[[68,[-1]]],[],69],[[[68,[-1,-2]]],4,69,[]],[[[68,[-1]],[68,[-1]]],22,69],[[[68,[-1]],31],32,69],[[[68,[-1]],31],32,69],[[[68,[-1,67]]],[[68,[-1,60]]],69],[[[68,[-1,60]]],[[68,[-1,67]]],69],[-1,-1,[]],[[[2,[7]]],10],[[[65,[-1]]],10,[[62,[[2,[66]]]]]],[[[68,[-1]],-2],4,69,43],[[[68,[-1,60]]],[[68,[-1,67]]],69],[-1,-2,[],[]],[[[68,[-1]],[68,[-1]]],[[9,[20]]],69],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],0,0,0,0,[[[70,[-1]]],[],71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1]]],[[70,[-1]]],71],[[[70,[-1]],[70,[-1]]],20,71],[[[70,[-1]]],[],71],[[[70,[-1]]],4,71],[[[70,[-1]],[70,[-1]]],22,71],[[[70,[-1]],31],32,71],[[[70,[-1]],31],32,71],[-1,-1,[]],[-1,-1,[]],[[[70,[-1]],-2],4,71,43],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[30,[[70,[-1]]]]],71],[[[70,[-1]],[70,[-1]]],[[9,[20]]],71],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[73,73],[74,74],[[72,72],20],[[73,73],20],[[74,74],20],[[[75,[-1,-2,-3]]],[],21,76,77],[[[75,[-1,-2,-3]]],[],21,76,77],[[[78,[-1,-2,-3]]],4,[],76,[]],[[[75,[-1,-2,-3]]],4,21,76,77],[[72,72],22],[[73,73],22],[[74,74],22],[[[78,[-1,-2,-3]],-4],[[9,[[75,[-1,-2,-3]]]]],21,76,77,50],[[[75,[-1,-2,-3]]],4,21,76,77],[[[78,[-1,-2,-3]],31],32,[21,33],76,77],[[72,31],32],[[73,31],32],[[74,31],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1,-2,-3]]],22,21,76,77],[[[78,[-1,-2,-3]]],22,21,76,77],[[[78,[-1,-2,-3]]],[[79,[-1,-2,-3]]],21,76,77],[[],[[78,[-1,73,-2]]],[],[]],[[],[[78,[-1,72,-2]]],[],[]],[[],[[78,[-1,74,-2]]],[],[]],[[[79,[-1,-2,-3]]],9,21,76,77],[[72,72],[[9,[20]]]],[[73,73],[[9,[20]]]],[[74,74],[[9,[20]]]],[[[78,[-1,-2,-3]]],[[9,[-1]]],21,76,77],[[[78,[-1,-2,-3]]],[[30,[-1,4]]],21,76,77],[[[75,[-1,-2,-3]]],-1,21,76,77],[[[78,[-1,-2,-3]]],-1,21,76,77],[[[78,[-1,-2,-3]],-1],[[30,[4,-1]]],21,76,77],[[[78,[-1,-2,-3]],-1],4,21,76,77],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[80,[-1]]],10,[]],[[[81,[-1]]],10,[]],[[[82,[-1]]],10,[]],[[[80,[-1]]],[[80,[-1]]],18],[[[83,[-1]]],[[83,[-1]]],[]],[[],[[80,[-1]]],[]],[[[80,[-1]]],[[9,[-1]]],[]],[[[81,[-1]]],[[9,[-1]]],[]],[[[80,[-1]]],-1,[]],[[[81,[-1]]],-1,[]],[[[80,[-1]]],4,[]],[[[80,[-1]],-1],[[30,[4,-1]]],[]],[[[82,[-1]],-1],[[30,[4,-1]]],[]],[[[80,[-1]],-1],4,[]],[[[82,[-1]],-1],4,[]],[[[80,[-1]],[80,[-1]]],22,26],[[[80,[-1]],31],32,33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[80,[-1]],-2],4,44,43],[[[80,[-1]],-2],4,13,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[80,[-1]]],[],[]],[[[80,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[80,[-1]]],22,[]],[[[80,[-1]]],22,[]],[[[80,[-1]]],[[83,[-1]]],[]],[[[80,[-1]]],[[84,[-1]]],[]],[[[80,[-1]]],10,[]],[[[81,[-1]]],10,[]],[[[82,[-1]]],10,[]],[[],[[80,[-1]]],[]],[[[83,[-1]]],9,[]],[[[84,[-1]]],9,[]],[[[83,[-1]]],9,[]],[[[84,[-1]]],9,[]],[[[80,[-1]]],[[9,[-1]]],[]],[[[81,[-1]]],[[9,[-1]]],[]],[[[81,[-1]]],22,[]],[[[82,[-1]]],22,[]],[[[80,[-1]]],[[4,[[82,[-1]],[81,[-1]]]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]]],"c":[491],"p":[[3,"Vec",0],[15,"slice"],[3,"Deque",0],[15,"tuple"],[3,"String",0],[15,"str"],[15,"u8"],[3,"HistoryBuffer",0],[4,"Option",721],[15,"usize"],[3,"IndexMap",0],[8,"Eq",722],[8,"Hash",723],[8,"BuildHasher",723],[3,"IndexSet",0],[3,"LinearMap",0],[8,"Copy",724],[8,"Clone",725],[3,"OldestOrdered",0],[4,"Ordering",722],[8,"Ord",722],[15,"bool"],[8,"Sized",724],[8,"Borrow",726],[8,"Default",727],[8,"PartialEq",722],[4,"Entry",0],[15,"array"],[8,"IntoIterator",728],[4,"Result",729],[3,"Formatter",730],[6,"Result",730],[8,"Debug",730],[15,"u32"],[15,"u16"],[15,"i64"],[15,"u64"],[15,"i32"],[15,"i16"],[15,"i8"],[3,"OccupiedEntry",0],[8,"Hasher",723],[8,"Hasher",731],[8,"Hash",731],[3,"VacantEntry",0],[8,"Iterator",732],[3,"BuildHasherDefault",723],[8,"PartialOrd",722],[15,"char"],[8,"FnMut",733],[3,"TypeId",734],[3,"Error",730],[3,"BinaryHeap",344],[8,"Kind",344],[3,"PeekMut",344],[3,"Iter",735],[3,"IterMut",735],[3,"MpMcQueue",399],[3,"Pool",417],[4,"Uninit",417],[3,"Box",417],[8,"AsMut",736],[8,"AsRef",736],[8,"Display",730],[19,"MaybeUninit",737],[3,"Node",417],[4,"Init",417],[3,"Box",474],[8,"Pool",474],[3,"Arc",502],[8,"Pool",502],[3,"LinkedIndexU8",531],[3,"LinkedIndexU16",531],[3,"LinkedIndexUsize",531],[3,"FindMut",531],[8,"SortedLinkedListIndex",531],[8,"Kind",531],[3,"SortedLinkedList",531],[3,"Iter",531],[3,"Queue",641],[3,"Consumer",641],[3,"Producer",641],[3,"Iter",641],[3,"IterMut",641],[4,"Min",344],[4,"Max",344],[3,"ArcInner",502],[3,"Min",531],[3,"Max",531],[3,"Node",531]],"b":[[19,"impl-AsMut%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E"],[20,"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+N%3E"],[27,"impl-AsRef%3C%5Bu8%5D%3E-for-String%3CN%3E"],[28,"impl-AsRef%3Cstr%3E-for-String%3CN%3E"],[29,"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+N%3E"],[30,"impl-AsRef%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E"],[109,"impl-PartialEq%3C%26str%3E-for-String%3CN%3E"],[110,"impl-PartialEq%3Cstr%3E-for-String%3CN%3E"],[111,"impl-PartialEq%3CString%3CN2%3E%3E-for-String%3CN1%3E"],[112,"impl-PartialEq%3C%26%5BB%5D%3E-for-Vec%3CA,+N%3E"],[113,"impl-PartialEq%3CVec%3CB,+N2%3E%3E-for-Vec%3CA,+N1%3E"],[114,"impl-PartialEq%3C%5BB;+M%5D%3E-for-Vec%3CA,+N%3E"],[115,"impl-PartialEq%3C%26%5BB;+M%5D%3E-for-Vec%3CA,+N%3E"],[116,"impl-PartialEq%3C%5BB%5D%3E-for-Vec%3CA,+N%3E"],[117,"impl-PartialEq%3C%26mut+%5BB%5D%3E-for-Vec%3CA,+N%3E"],[118,"impl-Extend%3CT%3E-for-HistoryBuffer%3CT,+N%3E"],[119,"impl-Extend%3C%26T%3E-for-HistoryBuffer%3CT,+N%3E"],[120,"impl-Extend%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S,+N%3E"],[121,"impl-Extend%3C(%26K,+%26V)%3E-for-IndexMap%3CK,+V,+S,+N%3E"],[122,"impl-Extend%3CT%3E-for-IndexSet%3CT,+S,+N%3E"],[123,"impl-Extend%3C%26T%3E-for-IndexSet%3CT,+S,+N%3E"],[124,"impl-Extend%3C%26T%3E-for-Vec%3CT,+N%3E"],[125,"impl-Extend%3CT%3E-for-Vec%3CT,+N%3E"],[126,"impl-Vec%3CT,+N%3E"],[137,"impl-Display-for-String%3CN%3E"],[138,"impl-Debug-for-String%3CN%3E"],[148,"impl-From%3Cu32%3E-for-String%3CN%3E"],[149,"impl-From%3C%26str%3E-for-String%3CN%3E"],[150,"impl-From%3Cu8%3E-for-String%3CN%3E"],[151,"impl-From%3Cu16%3E-for-String%3CN%3E"],[152,"impl-From%3Ci64%3E-for-String%3CN%3E"],[153,"impl-From%3Cu64%3E-for-String%3CN%3E"],[154,"impl-From%3Ci32%3E-for-String%3CN%3E"],[156,"impl-From%3Ci16%3E-for-String%3CN%3E"],[157,"impl-From%3Ci8%3E-for-String%3CN%3E"],[163,"impl-FromIterator%3Cchar%3E-for-String%3CN%3E"],[164,"impl-FromIterator%3C%26str%3E-for-String%3CN%3E"],[165,"impl-FromIterator%3C%26char%3E-for-String%3CN%3E"],[177,"impl-Hash-for-String%3CN%3E"],[178,"impl-Hash-for-String%3CN%3E"],[179,"impl-Hash-for-Vec%3CT,+N%3E"],[180,"impl-Hash-for-Vec%3CT,+N%3E"],[205,"impl-IntoIterator-for-%26Deque%3CT,+N%3E"],[206,"impl-IntoIterator-for-%26mut+Deque%3CT,+N%3E"],[207,"impl-IntoIterator-for-Deque%3CT,+N%3E"],[208,"impl-IntoIterator-for-%26IndexMap%3CK,+V,+S,+N%3E"],[209,"impl-IntoIterator-for-IndexMap%3CK,+V,+S,+N%3E"],[210,"impl-IntoIterator-for-%26mut+IndexMap%3CK,+V,+S,+N%3E"],[213,"impl-IntoIterator-for-%26mut+Vec%3CT,+N%3E"],[214,"impl-IntoIterator-for-%26Vec%3CT,+N%3E"],[215,"impl-IntoIterator-for-Vec%3CT,+N%3E"],[249,"impl-PartialEq%3C%26str%3E-for-String%3CN%3E"],[250,"impl-PartialEq%3Cstr%3E-for-String%3CN%3E"],[251,"impl-PartialEq%3CString%3CN2%3E%3E-for-String%3CN1%3E"],[439,"impl-Debug-for-Box%3CT%3E"],[440,"impl-Display-for-Box%3CT%3E"],[488,"impl-Debug-for-Box%3CP%3E"],[489,"impl-Display-for-Box%3CP%3E"],[516,"impl-Display-for-Arc%3CP%3E"],[517,"impl-Debug-for-Arc%3CP%3E"],[678,"impl-Hash-for-Queue%3CT,+N%3E"],[679,"impl-Hash-for-Queue%3CT,+N%3E"],[685,"impl-IntoIterator-for-%26Queue%3CT,+N%3E"],[686,"impl-IntoIterator-for-%26mut+Queue%3CT,+N%3E"]]},\
"kernel":{"doc":"","t":"HHHHHQQQIKFKAKKFAAAAKAADDDDDDMLFLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLFLLLLLLLMLFMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMFLLLLLLLLLLLLLLLLLLLLDDDDMLLLLLLMLLLLMMALLLLLLLLLLLLLLAMLMAMMMMLMMLLLLLLRDRRLLLLLLMLLLLLLLLLLLLLLDMLLLLLLLLLLMLMLLLDLLLMLLMLLLLLLLMMLLLHIDRAFLLLLALLLLLLLLLLLLKLLLLLALALLLLNDRNEDRRRLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLMLMMMMLLLLLLLLLLLMDDLLLLLLLLLMLLMLMLLLLLLLLMLLLMMLLLLLLLLDLLLLMLLLMLLLLLMMMLLLMNNNNNNNNDEEELMLLLLLLLLLLLLLLLLMLLLLFLLLLLLLLLLMLMLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLMMDDLLLLMLLLLMLLLLMMLLLLMLLLLLLLLMMLLLLLLLLMIKKKKDLLLMLLLLLLLLLLMMLLLLRRHFFFFFFFFFFFAFDDDMLLLLLLLLLLLLMLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLLL","n":["ALLOCATOR","FRAMEBUFFER","PCI_ACCESS","PCI_INFO","PHYSICAL_MEMORY_MANAGER","PageTable","PageTableSize","PerCpu","Platform","context_switch","create_framebuffer","drop_into_userspace","heap_allocator","initialize_task_stacks","kernel_page_table","load_task","memory","object","pci","per_cpu","per_cpu","scheduler","syscall","Allocation","Hole","HoleAllocator","HoleInfo","HoleList","LockedHoleAllocator","addr","alloc","allocate_first_fit","allocate_first_fit","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","back_padding","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dealloc","deref","first","fmt","fmt","free","free","from","from","from","from","from","from","front_padding","get_min_size","handle_alloc_error","heap_bottom","heap_size","holes","info","info","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","new_uninitialized","new_uninitialized","next","size","size","split_hole","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","KernelStackAllocator","PhysicalMemoryManager","SlabAllocator","Stack","_phantom","alloc_bytes","allocate_n","as_any","as_any","as_any_mut","as_any_mut","bitmap","borrow","borrow","borrow_mut","borrow_mut","bottom","buddy","buddy_allocator","clone","clone_into","fmt","free_n","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","kernel_stack_allocator","kernel_stack_slots","new","physical_start","slab_allocator","slab_size","slot_bottom","slot_size","stack_bottom","to_owned","top","top","try_from","try_from","try_into","try_into","type_id","type_id","BASE_SIZE","BuddyAllocator","MAX_ORDER","NUM_BINS","add_range","allocate_block","allocate_n","as_any","as_any_mut","available_bytes","bins","borrow","borrow_mut","buddy_of","free_block","free_n","from","into","into_any","into_any_arc","into_any_rc","new","try_from","try_into","type_id","KernelStackAllocator","_phantom","alloc_kernel_stack","as_any","as_any_mut","borrow","borrow_mut","from","into","into_any","into_any_arc","into_any_rc","kernel_stack_slots","new","slot_size","try_from","try_into","type_id","SlabAllocator","alloc","as_any","as_any_mut","bitmap","borrow","borrow_mut","bottom","free","from","into","into_any","into_any_arc","into_any_rc","new","slab_size","top","try_from","try_into","type_id","KERNEL_OBJECT_ID_COUNTER","KernelObject","KernelObjectId","SENTINEL_KERNEL_ID","address_space","alloc_kernel_object_id","as_any","as_any_mut","borrow","borrow_mut","channel","clone","clone_into","cmp","downcast","downcast_arc","downcast_mut","downcast_rc","downcast_ref","eq","fmt","from","hash","id","into","into_any","into_any_arc","into_any_rc","is","memory_object","partial_cmp","task","to_owned","try_from","try_into","type_id","Active","AddressSpace","MAX_TASKS","NotActive","State","TaskSlot","USER_STACK_BOTTOM","USER_STACK_SLOT_SIZE","USER_STACK_TOP","alloc_task_slot","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eq","fmt","from","from","from","id","id","index","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","map_memory_object","memory_objects","new","owner","page_table","slot_bitmap","state","switch_from","switch_to","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user_stack","ChannelEnd","Message","add_message","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","bytes","from","from","handle_objects","id","id","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","messages","new_channel","new_kernel_channel","num_handles","other_end","owner","receive","send","try_from","try_from","try_into","try_into","type_id","type_id","MemoryObject","as_any","as_any_mut","borrow","borrow_mut","flags","from","from_boot_info","id","id","into","into_any","into_any_arc","into_any_rc","new","owner","physical_address","size","try_from","try_into","type_id","virtual_address","AddressSpaceFull","Blocked","InvalidCapabilityEncoding","InvalidName","NameTooLong","NoKernelStackSlots","Ready","Running","Task","TaskBlock","TaskCreationError","TaskState","add_handle","address_space","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","clone","clone","clone_into","clone_into","decode_capabilities","eq","eq","fmt","fmt","fmt","from","from","from","from","from_boot_info","handles","id","id","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","kernel_stack","kernel_stack_pointer","name","next_handle","owner","state","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","user_slot","user_stack_pointer","PciDevice","PciInfo","as_any","as_any","as_any_mut","as_any_mut","bars","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","device_id","devices","fmt","fmt","from","from","interface","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","revision","sub_class","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vendor_id","PerCpu","scheduler","set_kernel_stack_pointer","set_user_stack_pointer","user_stack_pointer","Scheduler","add_task","as_any","as_any_mut","blocked_queue","borrow","borrow_mut","choose_next","drop_to_userspace","from","into","into_any","into_any_arc","into_any_rc","new","ready_queue","running_task","switch_to_next","try_from","try_into","type_id","NONE_BAR","NONE_OBJECT","SERVICE_MAP","create_memory_object","early_log","get_framebuffer","get_message","handle_syscall","map_memory_object","pci_get_info","register_service","send_message","subscribe_to_service","test_syscall","validation","yield_syscall","UserPointer","UserSlice","UserString","_phantom","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_write","from","from","from","into","into","into","into_any","into_any","into_any","into_any_rc","into_any_rc","into_any_rc","length","new","new","new","ptr","ptr","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","validate_read","validate_write","write"],"q":[[0,"kernel"],[23,"kernel::heap_allocator"],[135,"kernel::memory"],[186,"kernel::memory::buddy_allocator"],[211,"kernel::memory::kernel_stack_allocator"],[229,"kernel::memory::slab_allocator"],[249,"kernel::object"],[285,"kernel::object::address_space"],[346,"kernel::object::channel"],[385,"kernel::object::memory_object"],[407,"kernel::object::task"],[494,"kernel::pci"],[536,"kernel::per_cpu"],[541,"kernel::scheduler"],[562,"kernel::syscall"],[578,"kernel::syscall::validation"],[627,"hal::memory::virtual_address"],[628,"seed::boot_info"],[629,"seed::boot_info"],[630,"core::alloc"],[631,"core::result"],[632,"core::any"],[633,"spin"],[634,"core::fmt"],[635,"core::fmt"],[636,"alloc::sync"],[637,"alloc::rc"],[638,"core::option"],[639,"core::any"],[640,"hal::memory::frame"],[641,"core::ops::range"],[642,"hal::memory"],[643,"seed::boot_info"],[644,"core::marker"],[645,"core::marker"],[646,"poplar::syscall"],[647,"hal::memory"],[648,"poplar::syscall"],[649,"poplar"],[650,"poplar::caps"],[651,"alloc::vec"],[652,"poplar::syscall"],[653,"poplar::syscall::pci"],[654,"poplar::syscall"]],"d":["","","","","","","","","","Do the final part of a context switch: save all the state …","","Do the actual drop into usermode. This assumes that the …","","Often, the platform will need to put stuff on either the …","","","","","","","Get the per-CPU info for the current CPU. To make this …","","","","","","","","","","","","Search for a big enough hole for the given <code>Layout</code> with its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Walk the list, starting at <code>hole</code> and free the allocation …","Free an allocation defined by <code>ptr</code> and <code>layout</code>. Unsafe …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Initialise the <code>HoleAllocator</code>. This should only be called …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Create a new <code>HoleList</code> that contains the given hole. Unsafe …","Create a new, uninitialized <code>HoleAllocator</code>. Before heap …","","","","","Split the given hole into …","","","","","","","","","","","","","","","","","","","","","","","","Represents a stack, either in kernel-space or user-space. …","","","","","","","","","","","","","","","This module implements a buddy allocator, an efficient …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","The “base” block size - the smallest block size this …","","The largest block stored by the buddy allocator is …","","Add a range of <code>Frame</code>s to this allocator, marking them free …","Tries to allocate a block of the given order. If no blocks …","Allocate a block of <code>block_size</code> bytes from this allocator. …","","","","The bins of free blocks, where bin <code>i</code> contains blocks of …","","","Finds the starting frame of the block that is the buddy of …","Free a block starting at <code>start</code> of order <code>order</code>.","Free a block starting at <code>start</code> of <code>block_size</code> bytes. …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Try to allocate a slab out of the allocator. Returns <code>None</code> …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","The next available <code>KernelObjectId</code>. It is shared between …","This trait should be implemented by all types that …","Each kernel object is assigned a unique 64-bit ID, which …","A kernel object ID of <code>0</code> is reserved as a sentinel value …","","","","","","","","","","","Returns a boxed object from a boxed trait object if the …","Returns an <code>Arc</code>-ed object from an <code>Arc</code>-ed trait object if …","Returns a mutable reference to the object within the trait …","Returns an <code>$crate::alloc_reexport::rc::Rc</code>-ed object from …","Returns a reference to the object within the trait object …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Returns true if the trait object wraps an object of type …","","","","","","","","","","","","","","","","","Try to allocate a slot for a Task. Creates a user stack …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add a message <em>to</em> this <code>ChannelEnd</code>. Use <code>send</code> if you want to …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The actual objects extracted from the handles transferred …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The other end of the channel. If this is <code>None</code>, the channel…","","Try to “receive” a message from this <code>ChannelEnd</code>, …","Send a message through this <code>ChannelEnd</code>, to be received by …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Size of this MemoryObject in bytes.","","","","The virtual address to map this MemoryObject at. If this …","The <code>AddressSpace</code> that this task has been created in cannot …","","The byte stream describing the capabilities of an image is …","The task name is not valid UTF-8.","The loader can only load tasks that have a name that can …","The kernel stack allocator has run out of slots - this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decode a capability stream (as found in a task’s image) …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Choose the next task to be run. Returns <code>None</code> if no …","Performs the first transistion from the kernel into …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","List of Tasks ready to be scheduled. Every kernel object …","","Switch to the next scheduled task. This is called when a …","","","","","","Maps the name of a service to the channel used to register …","","","","","This is the architecture-independent syscall handler. It …","","","","","","","This module contains functions that help us validate the …","","","Represents a slice of <code>T</code>s in userspace.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Validate this slice for a write, BUT DOES NOT ACTUALLY …",""],"i":[0,0,0,0,0,10,10,10,0,10,0,10,0,10,10,0,0,0,0,0,10,0,0,0,0,0,0,0,0,20,11,0,18,21,11,14,18,20,15,21,11,14,18,20,15,15,21,11,14,18,20,15,21,11,14,18,20,15,20,15,20,15,11,11,18,20,15,0,18,21,11,14,18,20,15,15,18,0,21,21,21,14,15,21,21,11,14,18,20,15,21,11,14,18,20,15,21,11,14,18,20,15,21,11,14,18,20,15,18,21,11,14,14,20,0,20,15,21,11,14,18,20,15,21,11,14,18,20,15,21,11,14,18,20,15,0,0,0,0,9,8,8,8,5,8,5,38,8,5,8,5,38,8,0,5,5,5,8,8,5,8,5,8,5,8,5,8,5,0,9,8,5,0,38,5,9,5,5,38,5,8,5,8,5,8,5,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,0,0,0,0,39,39,39,39,0,39,39,39,41,41,41,41,41,39,39,39,39,41,39,39,39,39,41,0,39,0,39,39,39,39,48,0,0,48,0,0,0,0,0,46,47,46,48,47,46,48,47,46,48,47,46,48,48,48,47,46,48,46,46,47,47,46,48,47,46,48,47,46,48,47,46,48,46,46,46,46,46,46,46,46,46,47,46,48,47,46,48,47,46,48,47,0,0,52,52,53,52,53,52,53,52,53,53,52,53,53,52,52,52,53,52,53,52,53,52,53,52,52,52,53,52,52,52,52,52,53,52,53,52,53,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,66,62,66,66,66,66,62,62,0,0,0,0,59,59,59,61,62,66,59,61,62,66,59,61,62,66,59,61,62,66,59,61,62,61,62,0,61,62,61,62,66,59,61,62,66,59,59,59,59,59,61,62,66,59,61,62,66,59,61,62,66,59,61,62,66,59,59,59,59,59,59,61,62,59,61,62,66,59,61,62,66,59,61,62,66,59,59,0,0,67,68,67,68,67,67,68,67,68,67,67,68,67,68,67,68,67,68,67,68,67,67,68,67,68,67,68,67,68,67,67,67,68,67,68,67,68,67,68,67,0,79,79,79,79,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,75,76,77,75,76,77,75,76,77,75,76,77,75,75,76,77,75,76,77,75,76,77,75,76,77,76,75,76,77,75,76,75,75,76,77,75,76,77,75,76,77,77,76,76,75],"f":[0,0,0,0,0,0,0,0,0,[[1,1],2],[3,2],[[],4],0,[[5,5,1],[[2,[1,1]]]],[-1,[],[]],[[[6,[-1]],7,8,[9,[-1]]],2,10],0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[11,12],13],[[14,12],[[17,[15,16]]]],[[18,12],[[17,[13,16]]]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[15,15],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[11,13,12],2],[11,[[22,[21]]]],0,[[20,23],24],[[15,23],24],[[14,1,25],2],[[18,13,12],2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],25],[12,4],0,0,0,[14,20],0,[[21,1,25],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[1,25],18],[[],21],[[],11],0,0,0,[[20,12],[[29,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,0,0,[[8,25],31],[[8,25],[[33,[[32,[-1]]]]],34],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[5,5],[[-1,-2],2,[],[]],[[5,23],24],[[8,[32,[-1]],25],2,34],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],0,0,[35,8],0,0,0,0,0,0,[-1,-2,[],[]],0,0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],0,0,0,0,[[36,[33,[32]]],2],[[36,25],[[29,[31]]]],[[36,37],[[29,[31]]]],[-1,19,[]],[-1,19,[]],[36,37],0,[-1,-2,[],[]],[-1,-2,[],[]],[[31,25],31],[[36,31,25],2],[[36,31,37],2],[-1,-1,[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[],36],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],0,0,[[[9,[-1]],25,8],[[29,[5]]],10],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],0,[[1,1,25],[[9,[-1]]],10],0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],0,[38,[[29,[1]]]],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[38,1],2],[-1,-1,[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[1,1,25],38],0,0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],0,0,0,0,0,[[],39],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[39,39],[[-1,-2],2,[],[]],[[39,39],40],[[[26,[41]]],[[17,[[26,[-1]],[26,[41]]]]],41],[[[27,[41]]],[[17,[[27,[-1]],[27,[41]]]]],[19,42,43,41]],[41,[[29,[-1]]],41],[[[28,[41]]],[[17,[[28,[-1]],[28,[41]]]]],41],[41,[[29,[-1]]],41],[[39,39],44],[[39,23],24],[-1,-1,[]],[[39,-1],2,45],[-1,39,[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[41,44],0,[[39,39],[[29,[40]]]],0,[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],0,0,0,0,0,0,0,0,0,[[[46,[-1]],25,8],[[29,[47]]],10],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[48,48],44],[[48,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[46,[-1]]],39,10],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[46,[-1]],[27,[49]],[29,[1]],8],[[17,[2,50]]],10],0,[[39,-1],[[27,[[46,[-2]]]]],51,10],0,0,0,0,[[[46,[-1]]],2,10],[[[46,[-1]]],2,10],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,[[52,53],2],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],0,[52,39],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],0,[39,[[2,[[27,[52]],[27,[52]]]]]],[39,[[27,[52]]]],[53,25],0,0,[[52,-1],[[17,[-2,54]]],55,[]],[[52,53],[[17,[2,56]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],0,[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[[39,57],[[27,[49]]]],[49,39],0,[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[39,[29,[1]],31,25,58],[[27,[49]]]],0,0,0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[59,[-1]],[27,[41]]],60,10],0,[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[61,61],[62,62],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[63,[13]]],[[17,[[65,[64]],66]]]],[[61,61],44],[[62,62],44],[[61,23],24],[[62,23],24],[[66,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[39,[27,[[46,[-1]]]],7,8,[9,[-1]]],[[17,[[27,[[59,[-1]]]],66]]],10],0,[[[59,[-1]]],39,10],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,0,[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[67,67],[68,68],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[67,23],24],[[68,23],24],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],0,0,[-1,[[6,[-2]]],[],[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,1,[]],0,[[[6,[-1]],[27,[[59,[-1]]]]],2,10],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[29,[[27,[[59,[-1]]]]]]],10],[[[6,[-1]]],4,10],[-1,-1,[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[27,[-1]]],[[27,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[],[[6,[-1]]],10],0,0,[[[6,[-1]],62],2,10],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],0,0,0,[[[27,[[59,[-1]]]],25,25,25,25],[[17,[60,69]]],10],[[[27,[[59,[-1]]]],25,25],[[17,[2,70]]],10],[[[27,[[59,[-1]]]],25],[[17,[60,71]]],10],[[[27,[[59,[-1]]]],25,25,25,25,25],[[17,[25,54]]],10],[[25,25,25,25,25,25],25],[[[27,[[59,[-1]]]],25,25,25,25],[[17,[2,50]]],10],[[[27,[[59,[-1]]]],25,25],[[17,[25,72]]],10],[[[27,[[59,[-1]]]],25,25],[[17,[60,73]]],10],[[[27,[[59,[-1]]]],25,25,25,25,25],[[17,[2,56]]],10],[[[27,[[59,[-1]]]],25,25],[[17,[60,74]]],10],[[[27,[[59,[-1]]]],25,25,25,25,25],25,10],0,[[],25],0,0,0,0,[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[26,[-1]]],[[26,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],[[[28,[-1]]],[[28,[19]]],[]],0,[44,[[75,[-1]]],[]],[25,[[76,[-1]]],[]],[[13,25],77],0,0,[[[75,[-1]]],[[17,[-1,2]]],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[77,[[17,[78,2]]]],[[[76,[-1]]],[[17,[[63,[-1]],2]]],[]],[[[76,[-1]]],[[17,[[63,[-1]],2]]],[]],[[[75,[-1]],-1],[[17,[2,2]]],[]]],"c":[],"p":[[3,"VAddr",627],[15,"tuple"],[3,"VideoModeInfo",628],[15,"never"],[3,"Stack",135],[3,"Scheduler",541],[3,"LoadedImage",628],[3,"PhysicalMemoryManager",135],[3,"KernelStackAllocator",211],[8,"Platform",0],[3,"LockedHoleAllocator",23],[3,"Layout",629],[15,"u8"],[3,"Hole",23],[3,"Allocation",23],[3,"AllocError",630],[4,"Result",631],[3,"HoleList",23],[8,"Any",632],[3,"HoleInfo",23],[3,"HoleAllocator",23],[6,"Mutex",633],[3,"Formatter",634],[6,"Result",634],[15,"usize"],[3,"Box",635],[3,"Arc",636],[3,"Rc",637],[4,"Option",638],[3,"TypeId",632],[3,"PAddr",639],[3,"Frame",640],[3,"Range",641],[8,"FrameSize",642],[3,"BootInfo",628],[3,"BuddyAllocator",186],[6,"Bytes",642],[3,"SlabAllocator",229],[3,"KernelObjectId",249],[4,"Ordering",643],[8,"KernelObject",249],[8,"Send",644],[8,"Sync",644],[15,"bool"],[8,"Hasher",645],[3,"AddressSpace",285],[3,"TaskSlot",285],[4,"State",285],[3,"MemoryObject",385],[4,"MapMemoryObjectError",646],[8,"FrameAllocator",642],[3,"ChannelEnd",346],[3,"Message",346],[4,"GetMessageError",646],[8,"FnOnce",647],[4,"SendMessageError",646],[3,"Segment",628],[3,"Flags",648],[3,"Task",407],[3,"Handle",649],[4,"TaskBlock",407],[4,"TaskState",407],[15,"slice"],[4,"Capability",650],[3,"Vec",651],[4,"TaskCreationError",407],[3,"PciDevice",494],[3,"PciInfo",494],[4,"CreateMemoryObjectError",646],[4,"EarlyLogError",646],[4,"GetFramebufferError",652],[4,"PciGetInfoError",653],[4,"RegisterServiceError",646],[4,"SubscribeToServiceError",646],[3,"UserPointer",578],[3,"UserSlice",578],[3,"UserString",578],[15,"str"],[8,"PerCpu",536]],"b":[]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":"QQIQQDDSSSSQQDDDDDDIIIDIIIIIIIIIIDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKKKKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKKKKLLLKKKKKKKLLLKKKLLLLLLLLLLLLLLLLLKLKLKLLLLLLLLLLLLLLLLLLLKLKKKLLLLLLLLLLKKKKLLLLLLLLLLLKLL","n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_owned_by_current_thread","is_owned_by_current_thread","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":[[0,"lock_api"],[359,"core::marker"],[360,"core::default"],[361,"core::fmt"],[362,"core::fmt"],[363,"core::num::nonzero"],[364,"core::result"],[365,"core::option"],[366,"core::any"]],"d":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if …","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The inner …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[37,38,0,16,17,0,0,16,6,5,17,37,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,43,13,2,19,5,14,7,20,15,8,10,11,22,23,42,43,13,2,19,5,14,7,20,15,8,10,11,22,23,3,3,2,5,7,8,10,11,9,9,9,9,12,12,13,14,15,13,14,15,13,14,15,2,19,7,20,8,10,11,22,23,2,19,10,23,24,10,11,25,10,25,2,19,7,20,8,10,11,22,23,13,2,2,19,19,14,7,7,20,20,15,8,8,10,10,11,11,22,22,23,23,13,14,13,14,15,15,15,15,42,43,13,13,13,2,19,5,14,14,14,7,20,15,15,15,8,10,11,22,23,13,14,15,42,43,13,2,19,5,14,7,20,15,8,10,11,22,23,13,14,15,16,16,13,5,14,17,17,15,5,14,16,13,5,14,17,17,34,21,2,19,7,20,8,10,22,23,2,13,14,15,6,13,14,15,15,15,7,8,10,11,42,43,13,2,19,5,14,7,20,15,8,10,11,22,23,42,43,13,2,19,5,14,7,20,15,8,10,11,22,23,16,13,5,14,17,38,38,37,13,5,14,17,38,34,39,39,38,37,13,5,14,21,40,40,2,19,7,20,8,10,22,23,15,15,15,15,15,15,15,15,15,21,11,40,11,40,11,15,15,15,42,43,13,2,19,5,14,7,20,15,8,10,11,22,23,16,5,17,9,3,2,19,5,7,20,8,10,11,22,23,17,9,21,12,2,7,8,10,11,2,7,8,10,11,15,21,11,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],[[[2,[-1,-2]]],1,3,4],[[[5,[-1,-2]]],1,3,6],[[[7,[-1,-2,-3]]],1,3,6,4],[[[8,[-1,-2]]],1,9,4],[[[10,[-1,-2]]],1,9,4],[[[11,[-1,-2]]],1,12,4],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[-1,-2],[[13,[-1,-2]]],[],[]],[[-1,-2,-3],[[14,[-1,-2,-3]]],[],[],[]],[[-1,-2],[[15,[-1,-2]]],[],[]],[[[13,[-1,-2]]],[],16,4],[[[14,[-1,-2,-3]]],[],16,6,4],[[[15,[-1,-2]]],[],17,4],[[],[[13,[-1,-2]]],16,[4,18]],[[],[[14,[-1,-2,-3]]],16,6,[4,18]],[[],[[15,[-1,-2]]],17,[4,18]],[[[2,[-1,-2]]],-2,16,4],[[[19,[-1,-2]]],-2,16,4],[[[7,[-1,-2,-3]]],-3,16,6,4],[[[20,[-1,-2,-3]]],-3,16,6,4],[[[8,[-1,-2]]],-2,17,4],[[[10,[-1,-2]]],-2,17,4],[[[11,[-1,-2]]],-2,21,4],[[[22,[-1,-2]]],-2,17,4],[[[23,[-1,-2]]],-2,17,4],[[[2,[-1,-2]]],-2,16,4],[[[19,[-1,-2]]],-2,16,4],[[[10,[-1,-2]]],-2,17,4],[[[23,[-1,-2]]],-2,17,4],[-1,1,[]],[[[10,[-1,-2]]],[[8,[-1,-2]]],24,4],[[[11,[-1,-2]]],[[8,[-1,-2]]],25,4],[-1,1,[]],[[[10,[-1,-2]]],[[11,[-1,-2]]],25,4],[-1,1,[]],[[[2,[-1,-2]]],1,16,4],[[[19,[-1,-2]]],1,16,4],[[[7,[-1,-2,-3]]],1,16,6,4],[[[20,[-1,-2,-3]]],1,16,6,4],[[[8,[-1,-2]]],1,17,4],[[[10,[-1,-2]]],1,17,4],[[[11,[-1,-2]]],1,21,4],[[[22,[-1,-2]]],1,17,4],[[[23,[-1,-2]]],1,17,4],[[[13,[-1,-2]],26],27,16,[4,28]],[[[2,[-1,-2]],26],27,16,[28,4]],[[[2,[-1,-2]],26],27,16,[29,4]],[[[19,[-1,-2]],26],27,16,[28,4]],[[[19,[-1,-2]],26],27,16,[29,4]],[[[14,[-1,-2,-3]],26],27,16,6,[4,28]],[[[7,[-1,-2,-3]],26],27,16,6,[29,4]],[[[7,[-1,-2,-3]],26],27,16,6,[28,4]],[[[20,[-1,-2,-3]],26],27,16,6,[29,4]],[[[20,[-1,-2,-3]],26],27,16,6,[28,4]],[[[15,[-1,-2]],26],27,17,[4,28]],[[[8,[-1,-2]],26],27,17,[28,4]],[[[8,[-1,-2]],26],27,17,[29,4]],[[[10,[-1,-2]],26],27,17,[29,4]],[[[10,[-1,-2]],26],27,17,[28,4]],[[[11,[-1,-2]],26],27,21,[28,4]],[[[11,[-1,-2]],26],27,21,[29,4]],[[[22,[-1,-2]],26],27,17,[28,4]],[[[22,[-1,-2]],26],27,17,[29,4]],[[[23,[-1,-2]],26],27,17,[28,4]],[[[23,[-1,-2]],26],27,17,[29,4]],[[[13,[-1,-2]]],1,16,4],[[[14,[-1,-2,-3]]],1,16,6,4],[[[13,[-1,-2]]],1,3,4],[[[14,[-1,-2,-3]]],1,3,6,4],[[[15,[-1,-2]]],1,17,4],[[[15,[-1,-2]]],1,9,4],[[[15,[-1,-2]]],1,17,4],[[[15,[-1,-2]]],1,9,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[-2,-1]]],[],16],[30,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,-1,[]],[-1,[[14,[-2,-3,-1]]],[],16,6],[-1,-1,[]],[-1,-1,[]],[-1,[[15,[-2,-1]]],[],17],[-1,-1,[]],[30,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[13,[-1,-2]]],-2,16,4],[[[14,[-1,-2,-3]]],-3,16,6,4],[[[15,[-1,-2]]],-2,17,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],-2,16,[]],[[[14,[-1,-2,-3]]],-3,16,6,[]],[[[15,[-1,-2]]],-2,17,[]],[-1,31,[]],[-1,31,[]],[[[13,[-1,-2]]],31,16,4],[[[5,[-1,-2]]],31,16,6],[[[14,[-1,-2,-3]]],31,16,6,4],[-1,31,[]],[-1,31,[]],[[[15,[-1,-2]]],31,17,4],[[[5,[-1,-2]]],31,16,6],[[[14,[-1,-2,-3]]],31,16,6,4],[-1,1,[]],[[[13,[-1,-2]]],[[2,[-1,-2]]],16,4],[[[5,[-1,-2]]],1,16,6],[[[14,[-1,-2,-3]]],[[7,[-1,-2,-3]]],16,6,4],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[2,[-1,-2]],-3],[[19,[-1,-4]]],16,4,32,4],[[[19,[-1,-2]],-3],[[19,[-1,-4]]],16,4,32,4],[[[7,[-1,-2,-3]],-4],[[20,[-1,-2,-5]]],16,6,4,32,4],[[[20,[-1,-2,-3]],-4],[[20,[-1,-2,-5]]],16,6,4,32,4],[[[8,[-1,-2]],-3],[[22,[-1,-4]]],17,4,32,4],[[[10,[-1,-2]],-3],[[23,[-1,-4]]],17,4,32,4],[[[22,[-1,-2]],-3],[[22,[-1,-4]]],17,4,32,4],[[[23,[-1,-2]],-3],[[23,[-1,-4]]],17,4,32,4],[[[2,[-1,-2]]],[[13,[-1,-2]]],16,4],[-1,[[13,[-2,-1]]],[],16],[-1,[[14,[-2,-3,-1]]],[],16,6],[-1,[[15,[-2,-1]]],[],17],[-1,33,[]],[[[13,[-1,-2]]],-1,16,4],[[[14,[-1,-2,-3]]],-1,16,6,4],[[[15,[-1,-2]]],-1,17,4],[[[15,[-1,-2]]],[[8,[-1,-2]]],17,4],[[[15,[-1,-2]]],[[8,[-1,-2]]],34,4],[[[7,[-1,-2,-3]]],[[14,[-1,-2,-3]]],16,6,4],[[[8,[-1,-2]]],[[15,[-1,-2]]],17,4],[[[10,[-1,-2]]],[[15,[-1,-2]]],17,4],[[[11,[-1,-2]]],[[15,[-1,-2]]],21,4],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,31,[]],[[[13,[-1,-2]]],[[36,[[2,[-1,-2]]]]],16,4],[[[5,[-1,-2]]],31,16,6],[[[14,[-1,-2,-3]]],[[36,[[7,[-1,-2,-3]]]]],16,6,4],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[13,[-1,-2]]],[[36,[[2,[-1,-2]]]]],37,4],[[[5,[-1,-2]]],31,37,6],[[[14,[-1,-2,-3]]],[[36,[[7,[-1,-2,-3]]]]],37,6,4],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[13,[-1,-2]]],[[36,[[2,[-1,-2]]]]],37,4],[[[5,[-1,-2]]],31,37,6],[[[14,[-1,-2,-3]]],[[36,[[7,[-1,-2,-3]]]]],37,6,4],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[2,[-1,-2]],-3],[[35,[[19,[-1,-4]],[2,[-1,-2]]]]],16,4,32,4],[[[19,[-1,-2]],-3],[[35,[[19,[-1,-4]],[19,[-1,-2]]]]],16,4,32,4],[[[7,[-1,-2,-3]],-4],[[35,[[20,[-1,-2,-5]],[7,[-1,-2,-3]]]]],16,6,4,32,4],[[[20,[-1,-2,-3]],-4],[[35,[[20,[-1,-2,-5]],[20,[-1,-2,-3]]]]],16,6,4,32,4],[[[8,[-1,-2]],-3],[[35,[[22,[-1,-4]],[8,[-1,-2]]]]],17,4,32,4],[[[10,[-1,-2]],-3],[[35,[[23,[-1,-4]],[10,[-1,-2]]]]],17,4,32,4],[[[22,[-1,-2]],-3],[[35,[[22,[-1,-4]],[22,[-1,-2]]]]],17,4,32,4],[[[23,[-1,-2]],-3],[[35,[[23,[-1,-4]],[23,[-1,-2]]]]],17,4,32,4],[[[15,[-1,-2]]],[[36,[[8,[-1,-2]]]]],17,4],[[[15,[-1,-2]]],[[36,[[8,[-1,-2]]]]],38,4],[[[15,[-1,-2]]],[[36,[[8,[-1,-2]]]]],34,4],[[[15,[-1,-2]]],[[36,[[8,[-1,-2]]]]],39,4],[[[15,[-1,-2]]],[[36,[[8,[-1,-2]]]]],39,4],[[[15,[-1,-2]]],[[36,[[8,[-1,-2]]]]],38,4],[[[15,[-1,-2]]],[[36,[[11,[-1,-2]]]]],21,4],[[[15,[-1,-2]]],[[36,[[11,[-1,-2]]]]],40,4],[[[15,[-1,-2]]],[[36,[[11,[-1,-2]]]]],40,4],[-1,31,[]],[[[11,[-1,-2]]],[[35,[[10,[-1,-2]],[11,[-1,-2]]]]],21,4],[-1,31,[]],[[[11,[-1,-2]]],[[35,[[10,[-1,-2]],[11,[-1,-2]]]]],40,4],[-1,31,[]],[[[11,[-1,-2]]],[[35,[[10,[-1,-2]],[11,[-1,-2]]]]],40,4],[[[15,[-1,-2]]],[[36,[[10,[-1,-2]]]]],17,4],[[[15,[-1,-2]]],[[36,[[10,[-1,-2]]]]],38,4],[[[15,[-1,-2]]],[[36,[[10,[-1,-2]]]]],38,4],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,1,[]],[[[5,[-1,-2]]],1,16,6],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[2,[-1,-2]]],1,3,4],[[[19,[-1,-2]]],1,3,4],[[[5,[-1,-2]]],1,3,6],[[[7,[-1,-2,-3]]],1,3,6,4],[[[20,[-1,-2,-3]]],1,3,6,4],[[[8,[-1,-2]]],1,9,4],[[[10,[-1,-2]]],1,9,4],[[[11,[-1,-2]]],1,12,4],[[[22,[-1,-2]]],1,9,4],[[[23,[-1,-2]]],1,9,4],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[2,[-1,-2]],-3],-4,16,4,32,[]],[[[7,[-1,-2,-3]],-4],-5,16,6,4,32,[]],[[[8,[-1,-2]],-3],-4,17,4,32,[]],[[[10,[-1,-2]],-3],-4,17,4,32,[]],[[[11,[-1,-2]],-3],-4,21,4,32,[]],[[[2,[-1,-2]],-3],-4,3,4,32,[]],[[[7,[-1,-2,-3]],-4],-5,3,6,4,32,[]],[[[8,[-1,-2]],-3],-4,9,4,32,[]],[[[10,[-1,-2]],-3],-4,9,4,32,[]],[[[11,[-1,-2]],-3],-4,12,4,32,[]],[[[15,[-1,-2]]],[[11,[-1,-2]]],21,4],[-1,1,[]],[[[11,[-1,-2]]],[[10,[-1,-2]]],21,4],[[[15,[-1,-2]]],[[10,[-1,-2]]],17,4]],"c":[],"p":[[15,"tuple"],[3,"MutexGuard",0],[8,"RawMutexFair",0],[8,"Sized",359],[3,"RawReentrantMutex",0],[8,"GetThreadId",0],[3,"ReentrantMutexGuard",0],[3,"RwLockReadGuard",0],[8,"RawRwLockFair",0],[3,"RwLockWriteGuard",0],[3,"RwLockUpgradableReadGuard",0],[8,"RawRwLockUpgradeFair",0],[3,"Mutex",0],[3,"ReentrantMutex",0],[3,"RwLock",0],[8,"RawMutex",0],[8,"RawRwLock",0],[8,"Default",360],[3,"MappedMutexGuard",0],[3,"MappedReentrantMutexGuard",0],[8,"RawRwLockUpgrade",0],[3,"MappedRwLockReadGuard",0],[3,"MappedRwLockWriteGuard",0],[8,"RawRwLockDowngrade",0],[8,"RawRwLockUpgradeDowngrade",0],[3,"Formatter",361],[6,"Result",361],[8,"Debug",361],[8,"Display",361],[15,"never"],[15,"bool"],[8,"FnOnce",362],[3,"NonZeroUsize",363],[8,"RawRwLockRecursive",0],[4,"Result",364],[4,"Option",365],[8,"RawMutexTimed",0],[8,"RawRwLockTimed",0],[8,"RawRwLockRecursiveTimed",0],[8,"RawRwLockUpgradeTimed",0],[3,"TypeId",366],[3,"GuardSend",0],[3,"GuardNoSend",0]],"b":[[121,"impl-Debug-for-MutexGuard%3C\'a,+R,+T%3E"],[122,"impl-Display-for-MutexGuard%3C\'a,+R,+T%3E"],[123,"impl-Debug-for-MappedMutexGuard%3C\'a,+R,+T%3E"],[124,"impl-Display-for-MappedMutexGuard%3C\'a,+R,+T%3E"],[126,"impl-Display-for-ReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[127,"impl-Debug-for-ReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[128,"impl-Display-for-MappedReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[129,"impl-Debug-for-MappedReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[131,"impl-Debug-for-RwLockReadGuard%3C\'a,+R,+T%3E"],[132,"impl-Display-for-RwLockReadGuard%3C\'a,+R,+T%3E"],[133,"impl-Display-for-RwLockWriteGuard%3C\'a,+R,+T%3E"],[134,"impl-Debug-for-RwLockWriteGuard%3C\'a,+R,+T%3E"],[135,"impl-Debug-for-RwLockUpgradableReadGuard%3C\'a,+R,+T%3E"],[136,"impl-Display-for-RwLockUpgradableReadGuard%3C\'a,+R,+T%3E"],[137,"impl-Debug-for-MappedRwLockReadGuard%3C\'a,+R,+T%3E"],[138,"impl-Display-for-MappedRwLockReadGuard%3C\'a,+R,+T%3E"],[139,"impl-Debug-for-MappedRwLockWriteGuard%3C\'a,+R,+T%3E"],[140,"impl-Display-for-MappedRwLockWriteGuard%3C\'a,+R,+T%3E"]]},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLKLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLKOOFLLFLLLLLLLLLLLLLLFFFFLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,16,11,4,6,1,3,8,7,16,11,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,21,4,4,6,6,8,7,11,0,1,3,1,3,21,4,4,6,6,1,3,8,7,16,16,11,11,4,6,1,3,8,7,16,11,4,6,4,6,8,7,0,4,6,1,3,8,7,16,11,4,6,1,3,8,7,1,3,21,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,16,11,4,6,1,3,8,7,16,11,4,6,1,3,8,7,16,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[[-1,8],10,[]],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[-1,13,[]],[[4,14],15],[[4,14],15],[[6,14],15],[[6,14],15],[[1,14],15],[[3,14],15],[[8,14],15],[[7,14],15],[[16,14],15],[[16,14],15],[[11,14],15],[[11,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[17,[4]]]],[5,[[17,[6]]]],[[4,-1],13,18],[[6,-1],13,18],[[8,-1],13,18],[[7,-1],13,18],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[19]]]],[[],[[0,[19]]]],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[20]]]],[[3,[12,[20]]],3],[[-1,1],13,[]],0,0,[[],21],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[21,[[17,[13,16]]]],[21,[[17,[13,16]]]],[6,13],[6,13],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0],"c":[],"p":[[3,"Record",0],[3,"Arguments",170],[3,"RecordBuilder",0],[4,"Level",0],[15,"str"],[4,"LevelFilter",0],[3,"MetadataBuilder",0],[3,"Metadata",0],[4,"Ordering",171],[15,"bool"],[3,"ParseLevelError",0],[4,"Option",172],[15,"tuple"],[3,"Formatter",170],[6,"Result",170],[3,"SetLoggerError",0],[4,"Result",173],[8,"Hasher",174],[8,"Iterator",175],[15,"u32"],[8,"Log",0],[3,"TypeId",176]],"b":[[57,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[58,"impl-PartialEq-for-Level"],[59,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[60,"impl-PartialEq-for-LevelFilter"],[70,"impl-Display-for-Level"],[71,"impl-Debug-for-Level"],[72,"impl-Debug-for-LevelFilter"],[73,"impl-Display-for-LevelFilter"],[78,"impl-Display-for-SetLoggerError"],[79,"impl-Debug-for-SetLoggerError"],[80,"impl-Debug-for-ParseLevelError"],[81,"impl-Display-for-ParseLevelError"],[128,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[129,"impl-PartialOrd-for-Level"],[130,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[131,"impl-PartialOrd-for-LevelFilter"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCNCECQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACACLLLLLLCIKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIKKLKLKKKLLLKKLLKKLLLLLLLKLKKKKKLLLLKKLIILKFKLLFKIKKKKKKKKKKKKKKKKAAAAAAIIIIIIIIKKKKKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[83,"num_traits::bounds"],[86,"num_traits::cast"],[121,"num_traits::float"],[171,"num_traits::identities"],[181,"num_traits::int"],[198,"num_traits::ops"],[204,"num_traits::ops::checked"],[220,"num_traits::ops::inv"],[223,"num_traits::ops::mul_add"],[228,"num_traits::ops::overflowing"],[234,"num_traits::ops::saturating"],[243,"num_traits::ops::wrapping"],[255,"num_traits::pow"],[260,"num_traits::sign"],[270,"core::cmp"],[271,"core::fmt"],[272,"core::fmt"],[273,"core::any"],[274,"core::option"],[275,"core::marker"],[276,"core::ops::arith"],[277,"core::ops::arith"],[278,"core::cmp"],[279,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,2,0,0,0,39,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,39,0,0,2,5,5,0,0,0,0,0,0,2,5,2,5,2,5,0,0,40,40,0,0,0,0,41,0,11,42,42,42,42,42,42,42,42,42,42,42,42,42,42,12,12,12,12,12,12,12,12,12,12,12,12,12,12,43,43,43,43,43,43,43,43,43,43,0,0,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,33,34,0,33,33,34,0,34,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,36,48,49,50,51,52,0,53,53,0,0,54,54,55,0,0,0,56,57,58,0,0,0,0,59,60,61,59,62,0,0,0,0,0,0,63,64,65,66,67,68,69,0,0,0,69,0,0,0,38,0,38,38,38,0,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[8,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],0,0,[[],-1,[]],[[],-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,[[10,[-2]]],11,11],[-1,[[10,[-2]]],12,[]],[13,[[10,[-1]]],[]],[14,[[10,[-1]]],[]],[15,[[10,[-1]]],[]],[16,[[10,[-1]]],[]],[17,[[10,[-1]]],[]],[18,[[10,[-1]]],[]],[19,[[10,[-1]]],[]],[20,[[10,[-1]]],[]],[21,[[10,[-1]]],[]],[22,[[10,[-1]]],[]],[7,[[10,[-1]]],[]],[23,[[10,[-1]]],[]],[24,[[10,[-1]]],[]],[25,[[10,[-1]]],[]],[-1,[[10,[13]]],[]],[-1,[[10,[14]]],[]],[-1,[[10,[15]]],[]],[-1,[[10,[16]]],[]],[-1,[[10,[17]]],[]],[-1,[[10,[18]]],[]],[-1,[[10,[19]]],[]],[-1,[[10,[20]]],[]],[-1,[[10,[21]]],[]],[-1,[[10,[22]]],[]],[-1,[[10,[7]]],[]],[-1,[[10,[23]]],[]],[-1,[[10,[24]]],[]],[-1,[[10,[25]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,[[],-1,[]],[[],-1,[]],[[],-1,[26,27]],[[],-1,[]],[[],-1,[26,27]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[26,28]],[-1,-1,[]],[-1,-1,[]],[-1,29,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,[[30,[23,16,19]]],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[-1,-1],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,17],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,31,32],[-1,31,[]],[[],-1,33],[[],-1,[]],[-1,30,[]],[-1,30,[]],[[],-1,34],[[],-1,[]],0,[-1,7,[]],[-1,7,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1],[[10,[-1]]],[]],[[-1,-1],[[10,[-1]]],[]],[[-1,-1],[[10,[-1]]],[]],[-1,[[10,[-1]]],[]],[[-1,-1],[[10,[-1]]],[]],[[-1,7],[[10,[-1]]],[]],[[-1,7],[[10,[-1]]],[]],[[-1,-1],[[10,[-1]]],[]],0,0,[-1,[],[]],0,0,0,[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],30,[],[],[]],0,0,0,[[-1,-1],[[30,[-1,31]]],[]],[[-1,-1],[[30,[-1,31]]],[]],[[-1,-1],[[30,[-1,31]]],[]],0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,-1],-1,[]],0,0,[[-1,25],[[10,[-1]]],[35,33,36]],[[-1,25],-1,[35,33,37]],[[-1,-2],[],[],[]],0,0,[-1,-1,38],[-1,-1,[]],[[-1,-1],-1,38],[[-1,-1],-1,[]],[-1,31,[]],[-1,31,[]],[-1,-1,38],[-1,-1,[]]],"c":[],"p":[[8,"PartialOrd",270],[4,"FloatErrorKind",0],[3,"Formatter",271],[6,"Result",271],[3,"ParseFloatError",0],[15,"str"],[15,"u32"],[4,"Result",272],[3,"TypeId",273],[4,"Option",274],[8,"NumCast",86],[8,"ToPrimitive",86],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized",275],[8,"Div",276],[8,"Add",276],[4,"FpCategory",277],[15,"tuple"],[15,"bool"],[8,"PartialEq",270],[8,"One",171],[8,"Zero",171],[8,"Clone",278],[8,"CheckedMul",204],[8,"Mul",276],[8,"Signed",260],[8,"Num",0],[8,"Bounded",83],[8,"AsPrimitive",86],[8,"FromPrimitive",86],[8,"FloatConst",121],[8,"FloatCore",121],[8,"PrimInt",181],[8,"CheckedAdd",204],[8,"CheckedDiv",204],[8,"CheckedNeg",204],[8,"CheckedRem",204],[8,"CheckedShl",204],[8,"CheckedShr",204],[8,"CheckedSub",204],[8,"Inv",220],[8,"MulAdd",223],[8,"MulAddAssign",223],[8,"OverflowingAdd",228],[8,"OverflowingMul",228],[8,"OverflowingSub",228],[8,"Saturating",234],[8,"SaturatingAdd",234],[8,"SaturatingMul",234],[8,"SaturatingSub",234],[8,"WrappingAdd",243],[8,"WrappingMul",243],[8,"WrappingNeg",243],[8,"WrappingShl",243],[8,"WrappingShr",243],[8,"WrappingSub",243],[8,"Pow",255]],"b":[[60,"impl-Debug-for-ParseFloatError"],[61,"impl-Display-for-ParseFloatError"]]},\
"pci_types":{"doc":"","t":"EGNIGGENDNEGGGNRNNNDDNDNDGGGNGLLLLLLLLLLLLLLLLLLLALLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMMMMMMMNNNDNNNNNNNNNNNNNNDNEEDNNNNNENNNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNLLLLLLLLLLLLLLLLLLLLLL","n":["Bar","BaseClass","CardBusBridge","ConfigRegionAccess","DeviceId","DeviceRevision","DevselTiming","Endpoint","EndpointHeader","Fast","HeaderType","Interface","InterruptLine","InterruptPin","Io","MAX_BARS","Medium","Memory32","Memory64","PciAddress","PciHeader","PciPciBridge","PciPciBridgeHeader","Slow","StatusRegister","SubClass","SubsystemId","SubsystemVendorId","Unknown","VendorId","bar","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","capabilities","capability","capability_pointer","capable_66mhz","clone","clone","clone","clone","clone","cmp","default","device","device_type","devsel_timing","eq","eq","eq","eq","fast_back_to_back_capable","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_header","from_header","function","function_exists","has_capability_list","has_multiple_functions","header","header","header_type","id","interrupt","interrupt_status","into","into","into","into","into","into","into","into","master_data_parity_error","new","new","new","parity_error_detected","partial_cmp","primary_bus_number","read","received_master_abort","received_target_abort","revision_and_class","secondary_bus_number","segment","signalled_system_error","signalled_target_abort","status","status","status","subordinate_bus_number","subsystem","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","address","address","port","prefetchable","prefetchable","size","size","AGP3","AcceleratedGraphicsPort","BridgeSubsystemVendorId","CapabilityIterator","CompactPCICentralResourceControl","CompactPCIHotswap","DebugPort","Edge","HyperTransport","Int1","Int16","Int2","Int32","Int4","Int8","LevelAssert","LevelDeassert","Msi","MsiCapability","MsiX","MultipleMessageSupport","PciCapability","PciCapabilityAddress","PciExpress","PciHotPlugControl","PciX","PowerManagement","SlotIdentification","TriggerMode","Unknown","Vendor","VitalProductData","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_message_mask","get_multiple_message_capable","get_multiple_message_enable","get_pending","has_per_vector_masking","into","into","into","into","into","into","into_iter","is_64bit","is_enabled","next","offset","partial_cmp","set_enabled","set_message_info","set_message_mask","set_multiple_message_enable","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","address","id","AccessBusController","AtaController","AtmController","AudioDevice","AudioSatelliteCommunicationsController","BluetoothController","BroadbandController","CanBusController","CardBusBridge","CoProcessor","CommunicationsSynchronizationController","ConsumerIrController","DataSatelliteCommunicationsController","Device","DeviceType","Digitizer","DmaController","DpioModule","Ehci","EisaBridge","EntertainmentCryptionController","Ethernet24GHzController","Ethernet5GHzController","EthernetController","FddiController","FibreChannelController","FirewireController","FlashController","FloppyController","GameportController","GenericDockingStation","GenericPciHotPlugController","GpibController","HostBridge","IdeController","InfiniBandController","InfinibandPciHostBridge","IntelligentIoController","InterruptController","IpiBusController","IpmiController","IrdaController","IsaBridge","IsdnController","KeyboardController","LegacyNotVgaCompatible","LegacyVgaCompatible","ManagementCard","McaBridge","Modem","MouseController","MultiportSerialController","NetworkCryptionController","NuBusBridge","NvmeController","Ohci","OtherBridgeDevice","OtherCommunicationsDevice","OtherCryptionController","OtherDisplayController","OtherDockingStation","OtherInputController","OtherInterface","OtherMassStorageController","OtherMemoryController","OtherMultimediaDevice","OtherNetworkController","OtherSignalProcessingController","OtherSystemPeripheral","OtherWirelessController","ParallelPort","PciPciBridge","PcmciaBridge","PerformanceCounter","PicmgController","Processor386","Processor486","ProcessorAlpha","ProcessorMips","ProcessorPentium","ProcessorPowerPc","RacewayBridge","RaidController","RamController","RfController","RtcController","SasController","SataController","ScannerController","ScsiBusController","SdHostController","SemiTransparentPciPciBridge","SercosController","SerialController","SmBusController","SmartCard","SsaBusController","SystemTimer","TelephonyDevice","ThreeDController","TokenRingController","TvSatelliteCommunicationsController","UfsController","Uhci","Unknown","UsbController","UsbType","VgaCompatibleController","VideoDevice","VoiceSatelliteCommunicationsController","WorldFipController","XgaController","Xhci","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","eq","fmt","fmt","from","from","from","into","into","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"pci_types"],[147,"pci_types::Bar"],[154,"pci_types::capability"],[256,"pci_types::capability::PciCapability"],[258,"pci_types::device_type"],[393,"core::option"],[394,"core::cmp"],[395,"core::result"],[396,"core::fmt"],[397,"core::fmt"]],"d":["","","","","","","Slowest time that a device will assert DEVSEL# for any bus …","","Endpoints have a Type-0 header, so the remainder of the …","","","","","","","","","","","PCIe supports 65536 segments, each with 256 buses, each …","Every PCI configuration region starts with a header made …","","PCI-PCI Bridges have a Type-1 header, so the remainder of …","","","","","","","","Get the contents of a BAR in a given slot. Empty bars will …","","","","","","","","","","","","","","","","","","","","","If returns <code>true</code> the device is capable of running at 66 …","","","","","","","","","","The slowest time that a device will assert DEVSEL# for any …","","","","","If returns <code>true</code> the device can accept fast back-to-back …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","If returns <code>true</code> the device implements the pointer for a …","","","","","","","Represents the state of the device’s INTx# signal. If …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This returns <code>true</code> only when the following conditions are …","","","","Will be <code>true</code> whenever the device detects a parity error, …","","","","Will return <code>true</code>, by a master device, whenever its …","Will return <code>true</code>, by a master device, whenever its …","","","","Will be <code>true</code> whenever the device asserts SERR#.","Will return <code>true</code> whenever a target device terminates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AGP Target PCI-PCI bridge capability, Cap ID = <code>0x0E</code>","Accelerated graphics port capability, Cap ID = <code>0x02</code>","Bridge subsystem vendor/device ID capability, Cap ID = <code>0x0D</code>","","CompactPCI Central Resource Control capability, Cap ID = …","CompactPCI HotSwap capability, Cap ID = <code>0x06</code>","Debug port capability, Cap ID = <code>0x0A</code>","","HyperTransport capability, Cap ID = <code>0x08</code>","Device can send 1 interrupt. No interrupt vector …","Device can send 16 interrupts","Device can send 2 interrupts","Device can send 32 interrupts","Device can send 4 interrupts","Device can send 8 interrupts","","","Message signalling interrupts capability, Cap ID = <code>0x05</code>","","MSI-X capability, Cap ID = <code>0x11</code>","Specifies how many MSI interrupts one device can have. …","PCI capabilities","","PCI Express capability, Cap ID = <code>0x10</code>","PCI Standard Hot-Plug Controller capability, Cap ID = <code>0x0C</code>","PCI-X capability, Cap ID = <code>0x07</code>","Power management capability, Cap ID = <code>0x01</code>","Slot identification capability, Cap ID = <code>0x04</code>","When device should trigger the interrupt","Unknown capability","Vendor-specific capability, Cap ID = <code>0x09</code>","Vital product data capability, Cap ID = <code>0x3</code>","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get interrupt mask","How many interrupts this device has?","Return how many interrupts the device is using","Get pending interrupts","Does device supports masking individual vectors?","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Is device using 64-bit addressing?","Is MSI capability enabled?","","","","Enable or disable MSI capability","Set where the interrupts will be sent to","Set interrupt mask","Set how many interrupts the device will use. If requested …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines the Base Class and the Sub-class of a device to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The different register-level programming interfaces …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,12,0,0,0,0,12,0,11,0,0,0,0,3,0,11,3,3,0,0,12,0,11,0,0,0,0,12,0,1,18,1,19,11,9,6,12,3,18,1,19,11,9,6,12,3,6,1,0,1,9,11,9,6,12,3,6,6,6,0,9,11,9,6,12,9,11,9,6,6,12,3,18,1,19,11,9,6,12,3,1,19,6,5,9,18,1,19,18,18,1,9,18,1,19,11,9,6,12,3,9,18,9,6,9,6,19,5,9,9,18,19,6,9,9,18,1,19,19,1,18,1,19,11,11,9,6,12,3,18,1,19,11,9,6,12,3,18,1,19,11,9,6,12,3,5,39,40,41,39,40,39,40,35,35,35,0,35,35,35,36,35,32,32,32,32,32,32,36,36,35,0,35,0,0,0,35,35,35,35,35,0,35,35,35,34,7,32,36,33,34,35,7,32,36,33,34,35,32,33,34,35,32,32,32,36,33,34,35,7,32,36,33,34,35,33,33,33,33,33,7,32,36,33,34,35,7,33,33,7,34,32,33,33,33,33,7,32,32,36,33,34,35,7,32,36,33,34,35,7,32,36,33,34,35,42,42,37,37,37,37,37,37,37,37,37,37,37,37,37,38,0,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,0,37,37,37,37,37,38,37,38,37,38,37,38,37,38,37,38,37,37,38,37,38,37,38,38,37,38,37,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,-1],[[4,[3]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,2],[[1,-1],[[7,[-1]]],5],0,[[1,-1],8,5],[9,10],[11,11],[9,9],[6,6],[12,12],[3,3],[[6,6],13],[[],6],[6,2],0,[9,[[15,[11,14]]]],[[11,11],10],[[9,9],10],[[6,6],10],[[12,12],10],[9,10],[[11,16],17],[[9,16],17],[[6,16],17],[[6,16],17],[[12,16],17],[[3,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[18,-1],[[4,[1]]],5],[[18,-1],[[4,[19]]],5],[6,2],[[-1,6],10,[]],[9,10],[[18,-1],10,5],[1,18],[19,18],[[18,-1],12,5],[[18,-1],[[14,[20,21]]],5],[[1,-1],[[14,[22,23]]],5],[9,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,10],[6,18],[8,9],[[8,2,2,2],6],[9,10],[[6,6],[[4,[13]]]],[[19,-1],2,5],[[-1,6,8],24,[]],[9,10],[9,10],[[18,-1],[[14,[25,26,27,28]]],5],[[19,-1],2,5],[6,8],[9,10],[9,10],[[18,-1],9,5],[[1,-1],9,5],[[19,-1],9,5],[[19,-1],2,5],[[1,-1],[[14,[29,30]]],5],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[2,[[15,[11]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[-1,6,8,24],14,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[33,33],[34,34],[35,35],[[32,32],13],[[32,32],10],[[32,16],17],[[36,16],17],[[33,16],17],[[34,16],17],[[35,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[33,-1],24,5],[33,32],[[33,-1],32,5],[[33,-1],24,5],[33,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,10],[[33,-1],10,5],[[[7,[-1]]],4,5],0,[[32,32],[[4,[13]]]],[[33,10,-1],14,5],[[33,24,2,36,-1],14,5],[[33,-1,24],14,5],[[33,32,-1],14,5],[-1,[[15,[-2]]],[],[]],[2,[[15,[32]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[38,38],[[37,37],10],[[38,38],10],[[37,16],17],[[38,16],17],[[[14,[26,27]]],37],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[28,[[15,[38]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,31,[]],[-1,31,[]]],"c":[],"p":[[3,"EndpointHeader",0],[15,"u8"],[4,"Bar",0],[4,"Option",393],[8,"ConfigRegionAccess",0],[3,"PciAddress",0],[3,"CapabilityIterator",154],[15,"u16"],[3,"StatusRegister",0],[15,"bool"],[4,"DevselTiming",0],[4,"HeaderType",0],[4,"Ordering",394],[15,"tuple"],[4,"Result",395],[3,"Formatter",396],[6,"Result",396],[3,"PciHeader",0],[3,"PciPciBridgeHeader",0],[6,"VendorId",0],[6,"DeviceId",0],[6,"InterruptPin",0],[6,"InterruptLine",0],[15,"u32"],[6,"DeviceRevision",0],[6,"BaseClass",0],[6,"SubClass",0],[6,"Interface",0],[6,"SubsystemId",0],[6,"SubsystemVendorId",0],[3,"TypeId",397],[4,"MultipleMessageSupport",154],[3,"MsiCapability",154],[3,"PciCapabilityAddress",154],[4,"PciCapability",154],[4,"TriggerMode",154],[4,"DeviceType",258],[4,"UsbType",258],[13,"Memory32",147],[13,"Memory64",147],[13,"Io",147],[13,"Unknown",256]],"b":[[69,"impl-Debug-for-PciAddress"],[70,"impl-Display-for-PciAddress"]]},\
"pin_project_lite":{"doc":"A lightweight version of pin-project written with …","t":"O","n":["pin_project"],"q":[[0,"pin_project_lite"]],"d":["A macro that creates a projection type covering all the …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"poplar":{"doc":"","t":"DRLLAALLALLLLLLALLLLRRRRRRDENNNNNLLLLLLLLLLLLLLLLLLLLDEENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLNNNNRRNNEECCENNNNNNNNNNNENNNNNNNNNNNNNCCCNERRRRRRRRRRRRRREENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLACFLLLLLLLLLLLLLLFACCCCAFAFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFNNDENNENLLLLLLLLLLLLLLLLLLLFMLLLLMMLLLLLLLLLLLLLMENNNNDENNMMLLLLLLMLLLMLLLLLLLMLLLLFFFMMLLLLLLLLLLLMMMMMFFFFFFFFFFF","n":["Handle","ZERO_HANDLE","borrow","borrow_mut","caps","channel","cmp","deserialize","early_logger","eq","fmt","from","into","partial_cmp","serialize","syscall","try_from","try_from","try_into","type_id","CAP_EARLY_LOGGING","CAP_GET_FRAMEBUFFER","CAP_PADDING","CAP_PCI_BUS_DRIVER","CAP_SERVICE_PROVIDER","CAP_SERVICE_USER","CapabilitiesRepr","Capability","EarlyLogging","GetFramebuffer","PciBusDriver","ServiceProvider","ServiceUser","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Channel","ChannelReceiveError","ChannelSendError","FailedToDeserialize","FailedToSerialize","ReceiveError","SendError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","from","from","from","from_handle","into","into","into","register_service","send","try_from","try_from","try_from","try_into","try_into","try_into","try_receive","type_id","type_id","type_id","EarlyLogger","borrow","borrow_mut","enabled","flush","from","into","log","try_from","try_into","type_id","AddressPointerInvalid","BytesAddressInvalid","BytesAddressInvalid","BytesBufferTooSmall","CHANNEL_MAX_NUM_BYTES","CHANNEL_MAX_NUM_HANDLES","CannotTransferHandle","ChannelCannotSend","CreateMemoryObjectError","EarlyLogError","FramebufferInfo","GetFramebufferError","GetMessageError","HandlesAddressInvalid","HandlesAddressInvalid","HandlesBufferTooSmall","InvalidChannelHandle","InvalidChannelHandle","InvalidFlags","InvalidHandle","InvalidPhysicalAddressPointer","InvalidSize","InvalidTransferredHandle","InvalidVirtualAddress","MapMemoryObjectError","MessageNotValidUtf8","MessageTooLong","NameLengthNotValid","NameLengthNotValid","NamePointerNotValid","NamePointerNotValid","NoMessage","NoServiceWithThatName","NotAChannel","NotAChannel","NotAMemoryObject","NotAnAddressSpace","OtherEndDisconnected","PciDeviceInfo","PciGetInfoError","PixelFormat","RegionAlreadyMapped","RegisterServiceError","SERVICE_NAME_MAX_LENGTH","SYSCALL_CREATE_CHANNEL","SYSCALL_CREATE_MEMORY_OBJECT","SYSCALL_EARLY_LOG","SYSCALL_GET_FRAMEBUFFER","SYSCALL_GET_MESSAGE","SYSCALL_MAP_MEMORY_OBJECT","SYSCALL_PCI_GET_INFO","SYSCALL_REGISTER_SERVICE","SYSCALL_SEND_MESSAGE","SYSCALL_SUBSCRIBE_TO_SERVICE","SYSCALL_TEST","SYSCALL_WAIT_FOR_MESSAGE","SYSCALL_YIELD","SendMessageError","SubscribeToServiceError","TaskDoesNotHaveCorrectCapability","TaskDoesNotHaveCorrectCapability","TaskDoesNotHaveCorrectCapability","TooManyBytes","TooManyHandles","VirtualAddressNotSupplied","VirtualAddressShouldNotBeSupplied","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create_memory_object","early_log","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_framebuffer","get_framebuffer","get_message","into","into","into","into","into","into","into","into","into","into","into","into","into","into","map_memory_object","pci","pci_get_info","pci_get_info_slice","pci_get_info_vec","raw","raw_x86_64","register_service","result","send_message","subscribe_to_service","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","yield_to_kernel","AccessDenied","Bgr32","FramebufferInfo","GetFramebufferError","InfoAddressIsInvalid","NoFramebufferCreated","PixelFormat","Rgb32","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","get_framebuffer","height","into","into","into","into","pixel_format","stride","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","Bar","BufferNotLargeEnough","BufferPointerInvalid","Memory32","Memory64","PciDeviceInfo","PciGetInfoError","PlatformDoesNotSupportPci","TaskDoesNotHaveCorrectCapability","address","bars","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","default","device_id","eq","fmt","fmt","fmt","from","from","from","interface","into","into","into","into","pci_get_info","pci_get_info_slice","pci_get_info_vec","revision","sub_class","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vendor_id","memory_object","memory_object","size","size","syscall0","syscall1","syscall2","syscall3","syscall4","syscall5","handle_from_syscall_repr","handle_to_syscall_repr","status_from_syscall_repr","status_to_syscall_repr","status_with_payload_to_syscall_repr"],"q":[[0,"poplar"],[20,"poplar::caps"],[53,"poplar::channel"],[87,"poplar::early_logger"],[98,"poplar::syscall"],[272,"poplar::syscall::get_framebuffer"],[321,"poplar::syscall::pci"],[372,"poplar::syscall::pci::Bar"],[376,"poplar::syscall::raw_x86_64"],[382,"poplar::syscall::result"],[387,"core::cmp"],[388,"ptah::de"],[389,"ptah::de"],[390,"core::fmt"],[391,"ptah::ser"],[392,"ptah::ser"],[393,"core::result"],[394,"core::any"],[395,"ptah::ser"],[396,"log"],[397,"core::convert"],[398,"core::convert"]],"d":["A <code>Handle</code> is used to represent a task’s access to a …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","<code>N</code> must be a multiple of 4, and padded with zeros, so the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Receive a message from the channel, if there’s one …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Transferred handles must have the <code>TRANSFER</code> right.","The <code>Channel</code> handle must have the <code>SEND</code> right to use the …","","","","","","","","","The <code>Channel</code> handle is invalid.","","","","","","A handle to be transferred is invalid.","","","","","Name must be greater than <code>0</code> bytes, and not greater than <code>256</code>…","Name must be greater than <code>0</code> bytes, and not greater than <code>256</code>…","","","","","The <code>Channel</code> handle isn’t a <code>Channel</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a MemoryObject kernel object at the given virtual …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The calling task does not have the correct capability to …","","","","The address passed in <code>a</code> to write the info struct into was …","The kernel did not create a framebuffer.","Describes how the supplied framebuffer represents pixels.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The upper byte of the class-code. This identifies the Base …","","","","The ID of the particular device. These are allocated by …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The lower byte of the class-code. This may indicate a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Makes a raw <code>pci_get_info</code> system call, given a pointer to a …","","","A device-specific revision identifier. These are chosen by …","The middle byte of the class-code. This identifies the Sub …","","","","","","","","","","","","The ID of the manufacturer of the device. These are …","","","","","","","","","","","","","","","Convert a <code>Result</code> that carries a custom status on success. …"],"i":[0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,16,16,16,16,16,19,16,19,16,16,16,16,16,19,16,19,16,19,16,19,16,19,16,19,16,0,0,0,21,20,21,20,22,20,21,22,20,21,20,21,22,20,21,22,22,20,21,22,22,22,20,21,22,20,21,22,22,20,21,0,28,28,28,28,28,28,28,28,28,28,33,34,35,35,0,0,34,34,0,0,0,0,0,34,35,35,34,35,32,33,32,32,34,32,0,31,31,27,36,27,36,35,36,34,35,33,33,34,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,27,36,34,34,33,33,31,32,33,34,35,27,36,31,32,33,34,35,27,36,31,32,33,34,35,27,36,31,32,33,34,35,27,36,0,0,31,32,33,34,35,27,36,31,32,33,34,35,27,36,0,0,0,31,31,32,32,33,33,34,34,35,35,27,27,36,36,0,0,0,0,0,0,0,0,0,0,0,31,32,33,34,35,27,36,31,31,32,32,33,33,34,34,35,35,27,27,36,36,31,32,33,34,35,27,36,31,32,33,34,35,27,36,0,38,39,0,0,38,38,0,39,38,39,40,38,39,40,38,39,40,38,39,40,39,38,39,40,38,39,40,0,40,38,38,39,40,40,40,38,39,40,38,38,39,40,38,39,40,38,39,40,40,0,41,41,43,43,0,0,41,41,42,42,42,43,41,42,43,41,42,41,41,42,42,41,42,43,41,42,43,41,42,42,43,41,41,0,0,0,42,42,41,42,43,41,41,42,43,41,42,43,41,42,47,48,47,48,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[1,1],2],[3,[[4,[1]]]],0,[[1,1],5],[[1,6],7],[-1,-1,[]],[-1,-2,[],[]],[[1,1],[[8,[2]]]],[[1,[9,[-1]]],[[11,[10]]],12],0,[13,[[14,[1]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],10,[],[]],[[16,16],5],[[16,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[17]]],19],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,6],7],[[21,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,[[22,[-1,-2]]],[23,24],[23,24]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,[[14,[[22,[26,1]],27]]]],[[[22,[-1,-2]],-1],[[14,[10,20]]],[23,24],[23,24]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[22,[-1,-2]]],[[14,[[8,[-2]],21]]],[23,24],[23,24]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[28,29],5],[28,10],[-1,-1,[]],[-1,-2,[],[]],[[28,30],10],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[32,32],[33,33],[34,34],[35,35],[27,27],[36,36],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[13,13,5,5,13],[[14,[1,32]]]],[25,[[14,[10,31]]]],[[31,6],7],[[32,6],7],[[33,6],7],[[34,6],7],[[35,6],7],[[27,6],7],[[36,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[1,[37,[17]],[37,[1]]],[[14,[[10,[[37,[17]],[37,[1]]]],35]]]],[-1,-2,[],[]],[31,13],[-1,-2,[],[]],[32,13],[33,13],[-1,-2,[],[]],[-1,-2,[],[]],[34,13],[35,13],[-1,-2,[],[]],[-1,-2,[],[]],[27,13],[36,13],[-1,-2,[],[]],[[1,1,[8,[13]],13],[[14,[10,33]]]],0,0,0,0,0,0,[25,[[14,[1,27]]]],0,[[1,[37,[17]],[37,[1]]],[[14,[10,34]]]],[25,[[14,[1,36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,[[14,[31]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[13,[[14,[32]]]],[13,[[14,[33]]]],[-1,[[14,[-2]]],[],[]],[13,[[14,[34]]]],[-1,[[14,[-2]]],[],[]],[13,[[14,[35]]]],[-1,[[14,[-2]]],[],[]],[13,[[14,[27]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[13,[[14,[36]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[],10],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,38],[39,39],[40,40],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[39,39],5],[[38,6],7],[[39,6],7],[[40,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[40,[[14,[1,38]]]],0,[-1,-2,[],[]],[38,13],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,[[14,[38]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[41,41],[[-1,-2],10,[],[]],[[],42],0,[[41,41],5],[[42,6],7],[[43,6],7],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,13],[[42,13],[[14,[13,41]]]],[[[37,[42]]],[[14,[[37,[42]],41]]]],[[],[[14,[[44,[42]],41]]]],0,0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[13,[[14,[41]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,[13,13],[[13,13],13],[[13,13,13],13],[[13,13,13,13],13],[[13,13,13,13,13],13],[[13,13,13,13,13,13],13],[13,[[14,[1,-1]]],[[45,[13]]]],[[[14,[1,-1]]],13,[[46,[13]]]],[13,[[14,[10,-1]]],[[45,[13]]]],[[[14,[10,-1]]],13,[[46,[13]]]],[[[14,[13,-1]]],13,[[46,[13]]]]],"c":[],"p":[[3,"Handle",0],[4,"Ordering",387],[3,"Deserializer",388],[6,"Result",388],[15,"bool"],[3,"Formatter",389],[6,"Result",389],[4,"Option",390],[3,"Serializer",391],[15,"tuple"],[6,"Result",391],[8,"Writer",392],[15,"usize"],[4,"Result",393],[3,"TypeId",394],[4,"Capability",20],[15,"u8"],[15,"array"],[3,"CapabilitiesRepr",20],[4,"ChannelSendError",53],[4,"ChannelReceiveError",53],[3,"Channel",53],[8,"Serialize",391],[8,"DeserializeOwned",388],[15,"str"],[15,"never"],[4,"RegisterServiceError",98],[3,"EarlyLogger",87],[3,"Metadata",395],[3,"Record",395],[4,"EarlyLogError",98],[4,"CreateMemoryObjectError",98],[4,"MapMemoryObjectError",98],[4,"SendMessageError",98],[4,"GetMessageError",98],[4,"SubscribeToServiceError",98],[15,"slice"],[4,"GetFramebufferError",272],[4,"PixelFormat",272],[3,"FramebufferInfo",272],[4,"PciGetInfoError",321],[3,"PciDeviceInfo",321],[4,"Bar",321],[3,"Vec",396],[8,"TryFrom",397],[8,"Into",397],[13,"Memory32",372],[13,"Memory64",372]],"b":[]},\
"poplar_util":{"doc":"","t":"DDLLLLOALLLLALLLLLLOLLLLLLLLLAAAALLLLLLLLLLOOIIKKKKIIKKKKKULIFFFFFFKKIKKKK","n":["BinaryPrettyPrint","InitGuard","as_any","as_any","as_any_mut","as_any_mut","assert_first_call","bitmap","borrow","borrow","borrow_mut","borrow_mut","downcast","fmt","fmt","from","from","get","get_mut","impl_downcast","initialize","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","linker","math","pin","ranges","to_string","try_from","try_from","try_get","try_get_mut","try_into","try_into","type_id","type_id","uninit","unsafe_pinned","unsafe_unpinned","Bitmap","BitmapSlice","alloc","alloc","free","free","Downcast","DowncastSync","as_any","as_any_mut","into_any","into_any_arc","into_any_rc","LinkerSymbol","ptr","PowerOfTwoable","abs_difference","align_down","align_up","ceiling_integer_divide","ceiling_log2","flooring_log2","is_power_of_two","next_power_of_two","RangeIntersect","encompasses","intersection","intersects","split"],"q":[[0,"poplar_util"],[45,"poplar_util::bitmap"],[51,"poplar_util::downcast"],[58,"poplar_util::linker"],[60,"poplar_util::math"],[69,"poplar_util::ranges"],[74,"core::any"],[75,"core::fmt"],[76,"core::fmt"],[77,"alloc::boxed"],[78,"alloc::sync"],[79,"alloc::rc"],[80,"alloc::string"],[81,"core::result"],[82,"core::option"],[83,"core::any"],[84,"core::ops::arith"]],"d":["Values can be wrapped in this type when they’re printed …","A guard for when you want to store some data in a static, …","","","","","This macro should be called at the beginning of functions …","It’s useful to be able to model an integral type such as …","","","","","A copy of the <code>downcast-rs</code> library, but that has been made …","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a reference to the data, if this guard has been …","Get a mutable reference to the data, if this guard has …","Adds downcasting support to traits that extend …","Initialize this <code>InitGuard</code>, allowing it to be read from in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","This module includes some macros for more easily working …","","","","","Get a reference to the data, if this guard has been …","Get a mutable reference to the data, if this guard has …","","","","","","A pinned projection of a struct field.","An unpinned projection of a struct field.","","Like <code>Bitmap</code>, but for arrays. This is unfortunately needed …","Find <code>n</code> consecutive unset bits, set them and return the …","Find <code>n</code> consecutive unset bits, set them and return the …","Free <code>n</code> previously allocated bits, starting at <code>index</code>.","Free <code>n</code> previously allocated bits, starting at <code>index</code>.","Supports conversion to <code>Any</code>. Traits to be extended by …","Extends <code>Downcast</code> to support <code>Sync</code> traits that thus support …","Convert <code>&amp;Trait</code> (where <code>Trait: Downcast</code>) to <code>&amp;Anydyn Any</code>. …","Convert <code>&amp;mut Trait</code> (where <code>Trait: Downcast</code>) to <code>&amp;Anydyn Any</code>. …","Convert <code>Box&lt;Trait&gt;</code> (where <code>Trait: Downcast</code>) to <code>Box&lt;dyn Any&gt;</code>…","Convert <code>Arc&lt;Trait&gt;</code> (where <code>Trait: Downcast</code>) to <code>Arc&lt;dyn Any&gt;</code>…","Convert <code>Rc&lt;Trait&gt;</code> (where <code>Trait: Downcast</code>) to <code>Rc&lt;dyn Any&gt;</code>. …","<code>LinkerSymbol</code> is an extern type that represents a symbol …","","","","","","Divide <code>x</code> by <code>divide_by</code>, taking the ceiling if it does not …","","Fast integer <code>log2</code> that floors to the lower power-of-2 if <code>x</code> …","","","","Returns <code>true</code> if all values in <code>other</code> are within <code>self</code>.","","","Split <code>self</code> into three ranges: the portion before <code>other</code>, …"],"i":[0,0,2,7,2,7,0,0,2,7,2,7,0,2,2,2,7,7,7,0,7,2,7,2,7,2,7,2,7,0,0,0,0,2,2,7,7,7,2,7,2,7,7,0,0,0,0,23,24,23,24,0,0,25,25,25,26,25,0,17,0,0,0,0,0,0,0,21,21,0,27,27,27,27],"f":[0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[2,[-1]],3],4,[5,6]],[[[2,[-1]],3],4,[5,6]],[-1,-1,[]],[-1,-1,[]],[[[7,[-1]]],-1,[]],[[[7,[-1]]],-1,[]],0,[[[7,[-1]],-1],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[1]]],[]],[[[9,[-1]]],[[9,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],0,0,0,0,[-1,12,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[[7,[-1]]],[[14,[-1]]],[]],[[[7,[-1]]],[[14,[-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[[],[[7,[-1]]],[]],0,0,0,0,[[-1,16],[[14,[16]]],[]],[[-1,16],[[14,[16]]],[]],[[-1,16,16],8,[]],[[-1,16,16],8,[]],0,0,[-1,1,[]],[-1,1,[]],[[[9,[-1]]],[[9,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],0,[17,18],0,[[-1,-1],-1,[19,20]],[[-1,-1],-1,[6,21]],[[-1,-1],-1,[6,21]],[[16,16],16],[16,16],[16,16],[-1,22,[]],[-1,-1,[]],0,[[-1,-1],22,[]],[[-1,-1],[[14,[-1]]],[]],[[-1,-1],22,[]],[[-1,-1],[[8,[[14,[-1]],[14,[-1]],[14,[-1]]]]],[]]],"c":[],"p":[[8,"Any",74],[3,"BinaryPrettyPrint",0],[3,"Formatter",75],[6,"Result",75],[8,"Binary",75],[8,"PrimInt",76],[3,"InitGuard",0],[15,"tuple"],[3,"Box",77],[3,"Arc",78],[3,"Rc",79],[3,"String",80],[4,"Result",81],[4,"Option",82],[3,"TypeId",74],[15,"usize"],[20,"LinkerSymbol",58],[15,"u8"],[8,"Ord",83],[8,"Sub",84],[8,"PowerOfTwoable",60],[15,"bool"],[8,"Bitmap",45],[8,"BitmapSlice",45],[8,"Downcast",51],[8,"DowncastSync",51],[8,"RangeIntersect",69]],"b":[[13,"impl-Debug-for-BinaryPrettyPrint%3CT%3E"],[14,"impl-Display-for-BinaryPrettyPrint%3CT%3E"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[224,"proc_macro2::token_stream"],[239,"core::cmp"],[240,"core::marker"],[241,"core::convert"],[242,"core::iter::traits::collect"],[243,"core::fmt"],[244,"core::fmt"],[245,"proc_macro"],[246,"core::hash"],[247,"core::option"],[248,"core::ops::range"],[249,"alloc::string"],[250,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,10,11,12,12,7,7,5,5,5,5,22,22,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,22,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,22,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,6,8,9,1,12,5,1,22,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,22,7,8,9,1,12,5,0,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,10],[[10,10],15],[[11,11],15],[[12,-1],15,[16,[18,[17]]]],[[12,12],15],[[7,-1],13,19],[[7,-1],13,19],[20,5],[20,5],[21,5],[21,5],[[22,23],24],[[22,23],24],[[7,23],24],[[7,23],24],[[6,23],24],[[8,23],24],[[8,23],24],[[9,23],24],[[9,23],24],[[10,23],24],[[1,23],24],[[1,23],24],[[11,23],24],[[12,23],24],[[12,23],24],[[5,23],24],[[5,23],24],[-1,-1,[]],[25,7],[-1,-1,[]],[8,7],[-1,-1,[]],[26,6],[-1,-1,[]],[1,8],[9,8],[5,8],[12,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,19],[-1,7,19],[17,[[27,[7,22]]]],[17,[[27,[5,22]]]],[[12,-1],13,28],[29,5],[29,5],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,34],[7,15],[35,5],[35,5],[[6,6],[[36,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[17,6],12],[[12,12],[[36,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[1,11],[22,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[17,5],[[5,-1],[[36,[6]]],[[38,[37]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[41,5],[41,5],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[3,5],[3,5],[6,26],[37,5],[37,5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[[-1,-2],13,[],[]],[[34,23],24],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,[[36,[8]]]],[-1,-2,[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,40,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",239],[15,"bool"],[8,"Sized",240],[15,"str"],[8,"AsRef",241],[8,"IntoIterator",242],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",243],[6,"Result",243],[3,"TokenStream",244],[3,"Span",244],[4,"Result",245],[8,"Hasher",246],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",224],[15,"isize"],[4,"Option",247],[15,"usize"],[8,"RangeBounds",248],[3,"String",249],[3,"TypeId",250],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]],"b":[[67,"impl-PartialEq%3CT%3E-for-Ident"],[68,"impl-PartialEq-for-Ident"],[69,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[70,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[75,"impl-Debug-for-LexError"],[76,"impl-Display-for-LexError"],[77,"impl-Debug-for-TokenStream"],[78,"impl-Display-for-TokenStream"],[80,"impl-Display-for-TokenTree"],[81,"impl-Debug-for-TokenTree"],[82,"impl-Debug-for-Group"],[83,"impl-Display-for-Group"],[85,"impl-Display-for-Punct"],[86,"impl-Debug-for-Punct"],[88,"impl-Display-for-Ident"],[89,"impl-Debug-for-Ident"],[90,"impl-Debug-for-Literal"],[91,"impl-Display-for-Literal"],[93,"impl-From%3CTokenStream%3E-for-TokenStream"],[95,"impl-From%3CTokenTree%3E-for-TokenStream"],[99,"impl-From%3CPunct%3E-for-TokenTree"],[100,"impl-From%3CGroup%3E-for-TokenTree"],[101,"impl-From%3CLiteral%3E-for-TokenTree"],[102,"impl-From%3CIdent%3E-for-TokenTree"],[109,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[110,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]},\
"ptah":{"doc":"","t":"DCCCGGCCILLALFFLFLKLAFFLLLKLIIDNNENNNNNNNGNLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEDNGDIDNNLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CursorWriter","Deserialize","DeserializeOwned","Deserializer","Handle","HandleSlot","Serialize","Serializer","Writer","borrow","borrow_mut","de","from","from_wire","index_from_handle_slot","into","make_handle_slot","new","push_handle","push_handle","ser","serialized_size","to_wire","try_from","try_into","type_id","write","write","Deserialize","DeserializeOwned","Deserializer","EndOfStream","Err","Error","InvalidBoolMarker","InvalidChar","InvalidEnumTag","InvalidHandleSlot","InvalidOptionMarker","InvalidUtf8","Ok","Result","TrailingBytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","deserialize_bool","deserialize_char","deserialize_enum_tag","deserialize_f32","deserialize_f64","deserialize_handle","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_map_length","deserialize_option","deserialize_seq_length","deserialize_str","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","eq","fmt","from","from","from_wire","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Err","Error","MapSerializer","Ok","Result","SeqSerializer","Serialize","Serializer","WriterFullOfBytes","WriterFullOfHandles","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","from","from","into","into","into","into","new","serialize","serialize_bool","serialize_char","serialize_element","serialize_enum_variant","serialize_f32","serialize_f64","serialize_handle","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_value","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"ptah"],[28,"ptah::de"],[84,"ptah::ser"],[153,"core::result"],[154,"core::any"],[155,"core::option"],[156,"core::marker"],[157,"core::fmt"],[158,"core::fmt"]],"d":["This is a <code>Writer</code> that can be used to serialize a value …","","","","","","","","A <code>Writer</code> represents a consumer of the bytes produced by …","","","","Returns the argument unchanged.","Deserialize a <code>T</code> from some bytes and, optionally, some …","","Calls <code>U::from(self)</code>.","","","","","","It can sometimes be useful to know the size of a value in …","","","","","","","","A type implements <code>DeserializeOwned</code> if it does not borrow …","","","Contains the error value","Errors that can occur during deserialization.","","","","","","","Contains the success value","","","","","","","","","","","","Start deserializing an <code>enum</code>. Any data contained should be …","","","","","","","","","Start deserializing a <code>map</code>. Returns the number of elements …","","Start deserializing a <code>seq</code>. Returns the number of elements …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Contains the error value","Errors that can occur during serialization.","","Contains the success value","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Start serializing an enum - this encodes the tag that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,7,7,0,7,0,0,7,0,7,12,7,0,0,0,7,7,7,12,7,0,0,0,15,4,0,15,15,15,15,15,15,4,0,15,16,15,16,15,15,15,5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,16,15,16,16,15,15,16,15,16,15,16,15,8,0,0,8,0,0,0,0,35,35,36,37,38,35,36,37,38,35,35,35,35,35,36,37,38,35,36,37,38,35,36,10,36,36,37,36,36,36,36,36,36,36,36,36,38,36,36,36,36,36,36,36,36,36,36,38,35,36,37,38,35,36,37,38,35,36,37,38,35],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[[[2,[1]],[2,[3]]],[[4,[-1]]],5],[6,1],[-1,-2,[],[]],[1,6],[[[2,[1]]],7],[[-1,3],[[8,[6]]],[]],[[7,3],[[8,[6]]]],0,[-1,[[8,[9]]],10],[[-1,-2],[[8,[11]]],10,12],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[[-1,[2,[1]]],[[8,[11]]],[]],[[7,[2,[1]]],[[8,[11]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],11,[],[]],[16,[[4,[-1]]],[]],[16,[[4,[17]]]],[16,[[4,[18]]]],[16,[[4,[19]]]],[16,[[4,[20]]]],[16,[[4,[21]]]],[16,[[4,[3]]]],[16,[[4,[22]]]],[16,[[4,[23]]]],[16,[[4,[24]]]],[16,[[4,[25]]]],[16,[[4,[26]]]],[16,[[4,[19]]]],[16,[[4,[[27,[-1]]]]],[28,5]],[16,[[4,[19]]]],[16,[[4,[29]]]],[16,[[4,[30]]]],[16,[[4,[31]]]],[16,[[4,[19]]]],[16,[[4,[32]]]],[16,[[4,[1]]]],[[15,15],17],[[15,33],34],[-1,-1,[]],[-1,-1,[]],[[[2,[1]],[2,[3]]],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],11,[],[]],[[35,35],17],[[35,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-1]]],12],[[-1,[36,[-2]]],[[8,[11]]],[],12],[[[36,[-1]],17],[[8,[11]]],12],[[[36,[-1]],18],[[8,[11]]],12],[[[37,[-1]],-2],[[8,[11]]],12,[28,10]],[[[36,[-1]],19],[[8,[11]]],12],[[[36,[-1]],20],[[8,[11]]],12],[[[36,[-1]],21],[[8,[11]]],12],[[[36,[-1]],3],[[8,[11]]],12],[[[36,[-1]],22],[[8,[11]]],12],[[[36,[-1]],23],[[8,[11]]],12],[[[36,[-1]],24],[[8,[11]]],12],[[[36,[-1]],25],[[8,[11]]],12],[[[36,[-1]],26],[[8,[11]]],12],[[[38,[-1]],-2],[[8,[11]]],12,[28,10]],[[[36,[-1]],19],[[8,[[38,[-1]]]]],12],[[[36,[-1]]],[[8,[11]]],12],[[[36,[-1]],19],[[8,[[37,[-1]]]]],12],[[[36,[-1]],-2],[[8,[11]]],12,[28,10]],[[[36,[-1]],29],[[8,[11]]],12],[[[36,[-1]],30],[[8,[11]]],12],[[[36,[-1]],31],[[8,[11]]],12],[[[36,[-1]],19],[[8,[11]]],12],[[[36,[-1]],32],[[8,[11]]],12],[[[36,[-1]],1],[[8,[11]]],12],[[[38,[-1]],-2],[[8,[11]]],12,[28,10]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]]],"c":[],"p":[[15,"u8"],[15,"slice"],[6,"Handle",0],[6,"Result",28],[8,"Deserialize",28],[6,"HandleSlot",0],[3,"CursorWriter",0],[6,"Result",84],[15,"usize"],[8,"Serialize",84],[15,"tuple"],[8,"Writer",0],[4,"Result",153],[3,"TypeId",154],[4,"Error",28],[3,"Deserializer",28],[15,"bool"],[15,"char"],[15,"u32"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option",155],[8,"Sized",156],[15,"str"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"Formatter",157],[6,"Result",157],[4,"Error",84],[3,"Serializer",84],[3,"SeqSerializer",84],[3,"MapSerializer",84]],"b":[]},\
"ptah_derive":{"doc":"","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"ptah_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]],"b":[]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":"EDILLLLOLLLLLLLFLLLKLLLLLLLL","n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":[[0,"scopeguard"],[28,"core::ops::function"],[29,"core::fmt"],[30,"core::fmt"],[31,"core::any"]],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,8,1,8,0,1,1,1,1,8,1,8,0,1,8,1,3,8,1,8,1,8,1,8,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1,-2,-3]]],-1,[],2,3],[[[1,[-1,-2,-3]]],-1,[],2,3],[[[1,[-1,-2,-3]]],4,[],2,3],[[[1,[-1,-2,-3]],5],6,7,2,3],[[8,5],6],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[1,[-1,-2,8]]],[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2,-3]]],-1,[],2,3],[[],9],[[],9],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[[-1,-2],[[1,[-1,-2,-3]]],[],2,3]],"c":[],"p":[[3,"ScopeGuard",0],[8,"FnOnce",28],[8,"Strategy",0],[15,"tuple"],[3,"Formatter",29],[6,"Result",29],[8,"Debug",29],[4,"Always",0],[15,"bool"],[4,"Result",30],[3,"TypeId",31]],"b":[]},\
"seed":{"doc":"","t":"ANRNDNNNNNDNNRRRRRGDEENDDLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLMMLLLLLLLLMLLLLLLLMMMLLLLLLLMMMMMLMMMMMMMMLLLLLLLLLLLLLLMLLLLLLLMMM","n":["boot_info","AcpiReclaimable","BOOT_INFO_MAGIC","Bgr32","BootInfo","BootInfo","Conventional","FdtReclaimable","KernelHeap","KernelPageTables","LoadedImage","LoadedImage","Loader","MAX_CAPABILITY_STREAM_LENGTH","MAX_IMAGE_LOADED_SEGMENTS","MAX_IMAGE_NAME_LENGTH","MAX_LOADED_IMAGES","MAX_MEMORY_MAP_ENTRIES","MemoryMap","MemoryMapEntry","MemoryType","PixelFormat","Rgb32","Segment","VideoModeInfo","address_range","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capability_stream","clone","clone","clone","clone","clone","clone","default","default","default","default","default","entry_point","eq","eq","fdt_address","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_range","framebuffer_address","from","from","from","from","from","from","from","heap_address","heap_size","height","into","into","into","into","into","into","into","loaded_images","magic","master_tls","memory_map","name","new","physical_address","pixel_format","rsdp_address","segments","size","size","start","stride","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","video_mode","virtual_address","width"],"q":[[0,"seed"],[1,"seed::boot_info"],[122,"hal::memory::physical_address"],[123,"core::ops::range"],[124,"core::fmt"],[125,"core::fmt"],[126,"hal::memory"],[127,"core::result"],[128,"core::any"]],"d":["The “boot info” refers to a data structure passed from …","Memory that contains ACPI tables. After the OS has …","","Each pixel is represented by 4 bytes, with the layout: |…","","Memory that is occupied by the boot info constructed by …","Memory that can be used freely by the kernel.","Memory that contains the Flattened Device Tree (FDT). …","Memory that has been mapped for the kernel heap.","Memory that is occupied by page tables created by the …","Describes an image loaded from the filesystem by the …","Memory occupied by images that the loader has been asked …","Memory that the loader maps into the kernel address space. …","","","","","","","","","","Each pixel is represented by 4 bytes, with the layout: |…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The virtual address at which to start executing the image.","","","The physical address of the device tree, if one is present.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Map of available memory that the kernel. This only …","","","","","The physical address of the RSDP, the first ACPI table, if …","","","","","The number of pixels in each scan-line. May be greater …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,4,0,8,0,4,4,4,4,4,0,4,4,0,0,0,0,0,0,0,0,0,8,0,0,1,9,4,1,5,6,7,8,9,4,1,5,6,7,8,5,4,1,5,6,7,8,9,4,1,5,6,5,4,8,9,6,9,4,1,5,6,7,8,1,7,9,4,1,5,6,7,8,9,9,7,9,4,1,5,6,7,8,9,9,5,9,5,1,6,7,9,5,1,6,1,7,9,4,1,5,6,7,8,9,4,1,5,6,7,8,1,9,4,1,5,6,7,8,9,6,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[4,4],[1,1],[5,5],[6,6],[7,7],[8,8],[[],9],[[],4],[[],1],[[],5],[[],6],0,[[4,4],10],[[8,8],10],0,0,[[9,11],12],[[4,11],12],[[1,11],12],[[5,11],12],[[6,11],12],[[7,11],12],[[8,11],12],[1,[[3,[13]]]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[4,2,14],1],0,0,0,0,0,0,0,0,[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],0,0,0],"c":[],"p":[[3,"MemoryMapEntry",1],[3,"PAddr",122],[3,"Range",123],[4,"MemoryType",1],[3,"LoadedImage",1],[3,"Segment",1],[3,"VideoModeInfo",1],[4,"PixelFormat",1],[3,"BootInfo",1],[15,"bool"],[3,"Formatter",124],[6,"Result",124],[3,"Frame",125],[6,"Bytes",126],[4,"Result",127],[3,"TypeId",128]],"b":[]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":"GGGCGCGCGGCAAAAAAADDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLGGGGGGDDCCLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLKLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Barrier","Lazy","Mutex","MutexGuard","Once","RelaxStrategy","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","Spin","barrier","lazy","lock_api","mutex","once","relax","rwlock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","as_mut_ptr","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","SpinMutex","SpinMutexGuard","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","drop","fmt","from","from","from","get","get_mut","get_unchecked","initialized","into","is_completed","new","poll","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","is_locked","leak","leak","leak","lock_exclusive","lock_shared","lock_upgradable","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock_exclusive","try_lock_shared","try_lock_upgradable","try_read","try_upgrade","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","unlock_exclusive","unlock_shared","unlock_upgradable","upgrade","upgrade","upgradeable_read","write","writer_count"],"q":[[0,"spin"],[18,"spin::barrier"],[37,"spin::lazy"],[51,"spin::lock_api"],[57,"spin::mutex"],[96,"spin::mutex::spin"],[134,"spin::once"],[158,"spin::relax"],[178,"spin::rwlock"],[262,"core::result"],[263,"core::any"],[264,"core::default"],[265,"core::ops::function"],[266,"core::fmt"],[267,"core::fmt"],[268,"core::fmt"]],"d":["A primitive that synchronizes the execution of multiple …","A value which is initialized on the first access. See …","A primitive that synchronizes the execution of multiple …","","A primitive that provides lazy one-time initialization. …","","A lock that provides data access to either one writer or …","","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See …","","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Spin synchronisation primitives, but compatible with …","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","","","A lock that provides mutually exclusive data access …","A guard that provides mutable data access (compatible with …","A lock that provides data access to either one writer or …","A guard that provides immutable data access (compatible …","A guard that provides immutable data access but can be …","A guard that provides mutable data access (compatible with …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","","","Force unlock this <code>Mutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","","Locks the <code>Mutex</code> and returns a guard that permits access to …","Creates a new <code>Mutex</code> wrapping the supplied data.","A naïve spinning mutex.","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","Returns a mutable pointer to the underlying data.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this <code>SpinMutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>SpinMutex</code> and returns a guard that permits …","","Creates a new <code>SpinMutex</code> wrapping the supplied data.","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","Returns the argument unchanged.","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","Returns a mutable pointer to the underying data.","","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","","","","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Attempt to acquire this lock with shared read access.","","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,4,1,4,1,4,1,1,4,4,1,4,1,4,1,4,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,14,16,14,16,14,16,16,14,16,16,14,14,14,14,16,14,14,16,14,14,14,16,14,14,14,0,14,16,14,16,14,14,14,16,14,0,0,21,21,22,21,22,21,22,22,22,21,22,22,21,21,21,21,22,21,21,22,21,21,21,22,21,21,21,21,22,21,22,21,21,21,22,21,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,28,29,28,29,28,29,28,29,7,28,29,28,29,28,29,28,29,0,0,0,0,24,24,25,26,27,24,25,26,27,24,25,26,27,26,24,26,27,26,25,26,27,24,25,25,26,26,27,27,24,24,24,24,24,25,26,27,24,24,25,26,27,24,24,25,26,27,24,24,24,24,24,24,24,25,26,27,24,25,26,27,24,24,24,24,24,27,24,24,24,25,26,27,24,24,24,24,27,24,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,[[4,[-1]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[[[4,[-1]]],1,7],0,[[[8,[-1,-2,-3]]],[],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[-1,-2]]],9,[]],[[[8,[-1,-2,-3]]],-1,[],10,7],[[[8,[-1,-2,-3]],11],12,13,[],[]],[[[8,[-1,-2,-3]]],-1,[],10,7],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2,-1,-3]]],[],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[14,[-1,-2]]],[15,9],[]],[[[16,[-1]]],-1,15],[[[16,[-1]]],-1,15],[[[14,[-1,-2]],11],12,[15,13],[]],[[[16,[-1]],11],12,[15,17]],[[[16,[-1]],11],12,[15,13]],[[[14,[-1,-2]]],18,15,[]],[19,-1,[]],[-1,-1,[]],[-1,[[14,[-1,-2]]],[],[]],[-1,-1,[]],[[[14,[-1,-2]]],-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1,-2]]],-1,[],[]],[[[14,[-1,-2]]],2,15,[]],[[[14,[18,-1]]],2,7],[[[16,[-1]]],-1,15],[[[14,[18,-1]]],18,7],[[[14,[-1,-2]]],[[16,[-1]]],15,7],[-1,[[14,[-1,-2]]],[],[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[14,[-1,-2]]],[[20,[[16,[-1]]]]],15,[]],[[[14,[18,-1]]],2,7],[-1,6,[]],[-1,6,[]],[[[14,[18,-1]]],18,7],0,0,[[[21,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[21,[-1,-2]]],[15,9],[]],[[[22,[-1]]],-1,15],[[[22,[-1]]],-1,15],[[[22,[-1]]],18,15],[[[21,[-1,-2]],11],12,[15,13],[]],[[[22,[-1]],11],12,[15,17]],[[[22,[-1]],11],12,[15,13]],[[[21,[-1,-2]]],18,15,[]],[19,-1,[]],[-1,-1,[]],[-1,[[21,[-1,-2]]],[],[]],[-1,-1,[]],[[[21,[-1,-2]]],-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1,-2]]],-1,[],[]],[[[21,[-1,-2]]],2,15,[]],[[[21,[18,-1]]],2,7],[[[22,[-1]]],-1,15],[[[21,[-1,-2]]],[[22,[-1]]],15,7],[[[21,[18,-1]]],18,7],[-1,[[21,[-1,-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[21,[-1,-2]]],[[20,[[22,[-1]]]]],15,[]],[[[21,[18,-1]]],2,7],[-1,6,[]],[-1,6,[]],[[[21,[18,-1]]],18,7],0,0,[[[23,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1,-2]],-3],-1,[],7,10],[[[23,[-1,-2]]],18,[],[]],[[[23,[-1,-2]],11],12,13,[]],[-1,[[23,[-1,-2]]],[],[]],[-1,-1,[]],[19,-1,[]],[[[23,[-1,-2]]],[[20,[-1]]],[],[]],[[[23,[-1,-2]]],[[20,[-1]]],[],[]],[[[23,[-1,-2]]],-1,[],[]],[-1,[[23,[-1,-2]]],[],[]],[-1,-2,[],[]],[[[23,[-1,-2]]],2,[],[]],[[],[[23,[-1,-2]]],[],[]],[[[23,[-1,-2]]],[[20,[-1]]],[],7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[23,[-1,-2]]],[[20,[-1]]],[],[]],[-1,6,[]],[[[23,[-1,-2]]],-1,[],7],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],18],[[],18],[[],18],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],0,0,0,0,[[[24,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[24,[-1,-2]]],[15,9],[]],[[[25,[-1]]],-1,15],[[[26,[-1,-2]]],-1,15,[]],[[[27,[-1,-2]]],-1,15,[]],[[[26,[-1,-2]]],-1,15,[]],[[[24,[18,-1]]],18,7],[[[26,[-1,-2]]],[[25,[-1]]],15,[]],[[[27,[-1,-2]]],[[25,[-1]]],15,[]],[[[26,[-1,-2]]],[[27,[-1,-2]]],15,[]],[[[25,[-1]]],18,15],[[[26,[-1,-2]]],18,15,[]],[[[27,[-1,-2]]],18,15,[]],[[[24,[-1,-2]],11],12,[15,13],[]],[[[25,[-1]],11],12,[15,13]],[[[25,[-1]],11],12,[15,17]],[[[26,[-1,-2]],11],12,[15,13],[]],[[[26,[-1,-2]],11],12,[15,17],[]],[[[27,[-1,-2]],11],12,[15,17],[]],[[[27,[-1,-2]],11],12,[15,13],[]],[[[24,[-1,-2]]],18,15,[]],[[[24,[-1,-2]]],18,15,[]],[-1,[[24,[-1,-2]]],[],[]],[-1,-1,[]],[19,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[-1,-2]]],-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1,-2]]],-1,[],[]],[[[24,[18,-1]]],2,7],[[[25,[-1]]],-1,15],[[[26,[-1,-2]]],-1,15,[]],[[[27,[-1,-2]]],-1,15,[]],[[[24,[18,-1]]],18,7],[[[24,[18,-1]]],18,7],[[[24,[18,-1]]],18,7],[-1,[[24,[-1,-2]]],[],[]],[[[24,[-1,-2]]],[[25,[-1]]],15,7],[[[24,[-1,-2]]],3,15,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[24,[18,-1]]],2,7],[[[24,[18,-1]]],2,7],[[[24,[18,-1]]],2,7],[[[24,[-1,-2]]],[[20,[[25,[-1]]]]],15,[]],[[[24,[18,-1]]],2,7],[[[27,[-1,-2]]],[[5,[[26,[-1,-2]],[27,[-1,-2]]]]],15,[]],[[[24,[-1,-2]]],[[20,[[27,[-1,-2]]]]],15,[]],[[[24,[-1,-2]]],[[20,[[26,[-1,-2]]]]],15,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[24,[18,-1]]],18,7],[[[24,[18,-1]]],18,7],[[[24,[18,-1]]],18,7],[[[24,[18,-1]]],18,7],[[[27,[-1,-2]]],[[26,[-1,-2]]],15,7],[[[24,[-1,-2]]],[[27,[-1,-2]]],15,7],[[[24,[-1,-2]]],[[26,[-1,-2]]],15,7],[[[24,[-1,-2]]],3,15,[]]],"c":[],"p":[[3,"BarrierWaitResult",18],[15,"bool"],[15,"usize"],[3,"Barrier",18],[4,"Result",262],[3,"TypeId",263],[8,"RelaxStrategy",158],[3,"Lazy",37],[8,"Default",264],[8,"FnOnce",265],[3,"Formatter",266],[6,"Result",266],[8,"Debug",266],[3,"Mutex",57],[8,"Sized",267],[3,"MutexGuard",57],[8,"Display",266],[15,"tuple"],[15,"never"],[4,"Option",268],[3,"SpinMutex",96],[3,"SpinMutexGuard",96],[3,"Once",134],[3,"RwLock",178],[3,"RwLockReadGuard",178],[3,"RwLockWriteGuard",178],[3,"RwLockUpgradableGuard",178],[3,"Spin",158],[3,"Loop",158]],"b":[[69,"impl-Display-for-MutexGuard%3C\'a,+T%3E"],[70,"impl-Debug-for-MutexGuard%3C\'a,+T%3E"],[80,"impl-Mutex%3CT,+R%3E"],[81,"impl-RawMutex-for-Mutex%3C(),+R%3E"],[83,"impl-RawMutex-for-Mutex%3C(),+R%3E"],[84,"impl-Mutex%3CT,+R%3E"],[91,"impl-Mutex%3CT,+R%3E"],[92,"impl-RawMutex-for-Mutex%3C(),+R%3E"],[108,"impl-Display-for-SpinMutexGuard%3C\'a,+T%3E"],[109,"impl-Debug-for-SpinMutexGuard%3C\'a,+T%3E"],[119,"impl-SpinMutex%3CT,+R%3E"],[120,"impl-RawMutex-for-SpinMutex%3C(),+R%3E"],[122,"impl-SpinMutex%3CT,+R%3E"],[123,"impl-RawMutex-for-SpinMutex%3C(),+R%3E"],[129,"impl-SpinMutex%3CT,+R%3E"],[130,"impl-RawMutex-for-SpinMutex%3C(),+R%3E"],[204,"impl-Debug-for-RwLockReadGuard%3C\'rwlock,+T%3E"],[205,"impl-Display-for-RwLockReadGuard%3C\'rwlock,+T%3E"],[206,"impl-Debug-for-RwLockWriteGuard%3C\'rwlock,+T,+R%3E"],[207,"impl-Display-for-RwLockWriteGuard%3C\'rwlock,+T,+R%3E"],[208,"impl-Display-for-RwLockUpgradableGuard%3C\'rwlock,+T,+R%3E"],[209,"impl-Debug-for-RwLockUpgradableGuard%3C\'rwlock,+T,+R%3E"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":"II","n":["CloneStableDeref","StableDeref"],"q":[[0,"stable_deref_trait"]],"d":["An unsafe marker trait for types where clones deref to the …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDNNNNNEDGNNDENDNNNNNNNNNDNNNNNNNNNNNNDDNNNNEDDDNNDNNNNNNDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNEDDNNNEEDNNNCDDNDNDNNNNNNNCCDNNNNDNCCENNCCDCCDCCDCCDCCDCCDCCDNNDNNENNEENDDNNNNNNNNENNNNNNNNNNNDDNNNEDDDDNNDNNNNNNNNGNENNNNNNENNNNONDENNNNNDENNNNNDDDDDDDDDEDDDDDDDENNNNNNDDNNNDDDEDENNMMMMMMMMLMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMOMMMMOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLMMMOOMLLLMMMMMMMMMMMMMMMLLLLLMMMMMMMMMAMMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMLLLLMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMLMMMMLMMMMMMMLMMMMMMMMLLLLLLLLLLLMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLOLLLLOOFLLLLLMMMMMMMMMMMMMAMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLLLMMMMMMMLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKNDDDNQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Bool","BoundLifetimes","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Eq","Eq","Err","Error","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","Ident","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","Lit","LitBool","LitBool","LitBool","LitByte","LitByte","LitByte","LitByteStr","LitByteStr","LitByteStr","LitChar","LitChar","LitChar","LitFloat","LitFloat","LitFloat","LitInt","LitInt","LitInt","LitStr","LitStr","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulEq","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Ok","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemEq","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlEq","Shr","ShrEq","Slice","Str","StrStyle","Struct","Struct","Sub","SubEq","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variadic","Variant","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","const_params","const_params_mut","const_token","const_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","discriminant","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","get_ident","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","iter","iter_mut","leading_colon","left","len","len","lhs_ty","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lit","lt_token","lt_token","lt_token","lt_token","mac","make_where_clause","member","modifier","mutability","mutability","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","rhs_ty","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[2130,"syn::buffer"],[2164,"syn::ext"],[2168,"syn::parse"],[2263,"syn::parse::discouraged"],[2265,"syn::punctuated"],[2423,"syn::spanned"],[2425,"syn::token"],[4110,"core::str::traits"],[4111,"core::cmp"],[4112,"core::convert"],[4113,"core::marker"],[4114,"core::fmt"],[4115,"core::fmt"],[4116,"proc_macro2"],[4117,"core::convert"],[4118,"core::hash"],[4119,"proc_macro2"],[4120,"proc_macro2"],[4121,"alloc::string"],[4122,"core::any"],[4123,"proc_macro2"],[4124,"proc_macro2"],[4125,"core::ops::function"],[4126,"core::clone"],[4127,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","","A word of Rust code, which may be a keyword or legal …","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","","","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","","","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","","","A boolean literal: <code>true</code> or <code>false</code>.","","","A byte literal: <code>b&#39;f&#39;</code>.","","","A byte string literal: <code>b&quot;foo&quot;</code>.","","","A character literal: <code>&#39;a&#39;</code>.","","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","","","An integer literal: <code>1</code> or <code>1u16</code>.","","","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A particular type is returned.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …eturns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generics required to complete the definition.","If this path consists of a single ident, returns the ident.","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","Name of the struct or enum.","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","","","","","Panics","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the identifier that begins this structured meta …","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …ype of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","Visibility of the field.","Visibility of the struct or enum.","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,65,65,65,88,0,26,67,26,26,26,0,0,0,26,67,0,0,26,0,89,65,65,65,65,65,65,26,52,0,26,59,59,26,52,52,26,26,52,26,39,89,0,0,89,26,281,22,0,0,0,0,85,66,0,65,65,61,48,65,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,52,26,65,0,0,0,26,67,65,0,0,0,26,0,67,0,26,67,22,12,52,65,26,0,0,0,39,44,48,89,0,13,0,0,0,16,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,65,0,26,67,0,26,46,0,0,16,0,0,26,65,65,13,18,36,65,66,0,67,46,88,66,6,65,12,26,59,67,88,0,0,13,26,67,0,0,0,0,0,67,22,0,26,281,26,67,65,65,26,22,0,26,0,65,65,65,65,67,52,0,26,61,65,65,0,44,0,0,67,26,26,26,67,0,0,26,39,48,85,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,61,18,18,36,26,0,0,26,52,67,0,0,0,0,0,0,26,26,69,78,9,28,90,87,29,94,1,17,21,27,28,29,30,31,32,33,34,35,40,41,42,60,83,84,58,74,30,3,5,3,5,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,281,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,281,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,49,40,41,49,50,71,80,92,19,63,0,11,31,68,79,0,0,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,9,10,90,21,40,41,42,49,50,92,38,38,42,77,24,0,0,60,38,43,88,40,42,58,17,30,84,80,68,70,75,77,78,79,81,63,9,10,10,36,37,15,40,42,51,91,29,31,33,35,0,82,17,62,64,9,10,10,10,36,37,3,5,69,43,8,1,2,9,10,10,10,10,10,10,10,11,12,13,13,13,13,14,15,16,16,16,17,18,18,18,19,20,21,22,22,22,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,36,36,36,37,37,38,39,39,39,39,40,40,41,42,43,44,44,44,45,46,47,48,48,48,48,49,50,51,52,52,52,52,52,52,52,52,53,54,55,56,3,3,5,5,57,281,58,59,60,61,61,61,61,62,63,64,65,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,86,87,87,88,89,90,91,92,93,94,28,60,86,70,38,43,90,94,9,10,36,37,9,17,21,40,42,60,87,91,92,71,25,31,37,69,93,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,281,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,18,18,18,18,88,86,18,18,86,27,18,68,51,41,50,78,38,43,45,49,69,38,15,32,38,43,90,94,73,38,30,45,77,78,82,83,19,14,9,10,41,52,53,54,55,56,3,5,57,27,35,69,93,38,14,20,25,28,33,45,69,75,81,93,0,0,0,9,10,13,14,15,16,17,19,20,22,26,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,53,54,55,56,3,5,57,58,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,89,90,91,93,0,10,11,11,58,58,11,0,11,86,21,11,0,0,0,21,53,9,10,13,11,14,15,25,34,45,58,76,94,11,47,23,25,0,34,76,51,27,86,62,68,9,10,52,53,54,55,56,3,5,57,8,1,2,9,9,10,10,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,53,53,54,54,55,55,56,56,3,3,5,5,57,57,58,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,37,57,0,38,77,62,11,52,53,54,55,56,3,5,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,9,10,3,5,8,1,2,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,0,53,54,55,56,3,5,57,11,58,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,281,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,281,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,21,29,42,83,91,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,125,119,130,113,27,111,117,118,28,29,127,114,30,133,120,129,31,126,32,138,112,128,124,33,34,134,132,139,123,137,110,135,136,115,35,121,116,131,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,281,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,38,38,72,64,20,10,69,53,54,55,56,57,57,69,63,21,60,38,47,67,71,80,85,0,0,159,159,160,159,160,160,160,159,160,160,160,159,160,160,160,159,160,160,160,159,159,160,160,160,160,160,159,160,159,160,159,160,0,282,282,282,6,0,0,0,6,155,0,0,0,0,0,0,0,164,167,164,165,172,166,167,164,165,172,166,164,165,166,165,166,166,164,165,0,164,167,164,165,166,164,164,166,166,164,167,164,165,172,166,166,167,164,165,172,166,166,166,166,164,164,166,166,152,164,155,172,155,155,164,167,164,164,164,164,166,164,166,165,166,164,166,167,164,165,172,166,167,164,165,172,166,167,164,165,172,166,0,283,180,0,0,0,0,0,0,0,0,180,173,177,182,178,179,145,146,180,173,177,182,178,179,145,146,180,173,173,177,178,179,145,180,173,177,178,179,145,180,173,173,173,173,173,173,173,177,182,178,179,145,146,180,173,173,173,173,173,173,177,182,178,179,145,146,180,173,173,173,177,182,178,179,145,146,173,180,180,173,173,173,173,173,173,177,182,178,179,145,146,173,180,177,182,178,179,145,146,177,182,178,179,145,146,173,173,173,173,173,173,173,180,173,173,173,177,182,178,179,145,146,173,180,173,177,178,179,145,180,173,180,173,173,177,182,178,179,145,146,180,173,177,182,178,179,145,146,180,173,177,182,178,179,145,146,180,180,180,0,284,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,231,233,236,237,238,240,242,243,245,246,250,253,255,258,261,262,265,268,273,274,276,105,231,233,236,237,238,240,242,243,245,246,250,253,255,258,261,262,265,268,273,274,276,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,277,278,279,280,105,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,105,184,185,186,187,188,189,190,191,192,193,108,194,195,196,197,198,107,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,106,109,217,218,104,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280],"fc":[],"p":[[3,"TypeGenerics",0],[3,"Turbofish",0],[3,"LitInt",0],[15,"str"],[3,"LitFloat",0],[6,"Result",2168],[8,"FromStr",4110],[3,"ImplGenerics",0],[3,"Lifetime",0],[3,"Ident",0],[3,"Attribute",0],[4,"AttrStyle",0],[4,"Meta",0],[3,"MetaList",0],[3,"MetaNameValue",0],[4,"NestedMeta",0],[3,"Variant",0],[4,"Fields",0],[3,"FieldsNamed",0],[3,"FieldsUnnamed",0],[3,"Field",0],[4,"Visibility",0],[3,"VisPublic",0],[3,"VisCrate",0],[3,"VisRestricted",0],[4,"Expr",0],[3,"ExprBinary",0],[3,"ExprCall",0],[3,"ExprCast",0],[3,"ExprField",0],[3,"ExprIndex",0],[3,"ExprLit",0],[3,"ExprParen",0],[3,"ExprPath",0],[3,"ExprUnary",0],[4,"Member",0],[3,"Index",0],[3,"Generics",0],[4,"GenericParam",0],[3,"TypeParam",0],[3,"LifetimeDef",0],[3,"ConstParam",0],[3,"BoundLifetimes",0],[4,"TypeParamBound",0],[3,"TraitBound",0],[4,"TraitBoundModifier",0],[3,"WhereClause",0],[4,"WherePredicate",0],[3,"PredicateType",0],[3,"PredicateLifetime",0],[3,"PredicateEq",0],[4,"Lit",0],[3,"LitStr",0],[3,"LitByteStr",0],[3,"LitByte",0],[3,"LitChar",0],[3,"LitBool",0],[3,"Macro",0],[4,"MacroDelimiter",0],[3,"DeriveInput",0],[4,"Data",0],[3,"DataStruct",0],[3,"DataEnum",0],[3,"DataUnion",0],[4,"BinOp",0],[4,"UnOp",0],[4,"Type",0],[3,"TypeArray",0],[3,"TypeBareFn",0],[3,"TypeGroup",0],[3,"TypeImplTrait",0],[3,"TypeInfer",0],[3,"TypeMacro",0],[3,"TypeNever",0],[3,"TypeParen",0],[3,"TypePath",0],[3,"TypePtr",0],[3,"TypeReference",0],[3,"TypeSlice",0],[3,"TypeTraitObject",0],[3,"TypeTuple",0],[3,"Abi",0],[3,"BareFnArg",0],[3,"Variadic",0],[4,"ReturnType",0],[3,"Path",0],[3,"PathSegment",0],[4,"PathArguments",0],[4,"GenericArgument",0],[3,"AngleBracketedGenericArguments",0],[3,"Binding",0],[3,"Constraint",0],[3,"ParenthesizedGenericArguments",0],[3,"QSelf",0],[15,"tuple"],[4,"Ordering",4111],[15,"bool"],[8,"AsRef",4112],[8,"Sized",4113],[3,"Formatter",4114],[6,"Result",4114],[3,"Error",4114],[4,"Result",4115],[3,"Super",2425],[3,"Underscore",2425],[3,"SelfType",2425],[3,"Extern",2425],[3,"Crate",2425],[3,"SelfValue",2425],[3,"ExprTry",0],[3,"ExprBlock",0],[3,"ExprMacro",0],[3,"ExprAwait",0],[3,"ExprContinue",0],[3,"ExprType",0],[3,"ExprWhile",0],[3,"ExprBox",0],[3,"ExprBreak",0],[3,"ExprAssignOp",0],[3,"ExprGroup",0],[3,"ExprUnsafe",0],[3,"ExprArray",0],[3,"ExprReturn",0],[3,"ExprMethodCall",0],[3,"ExprAssign",0],[3,"ExprLet",0],[3,"ExprClosure",0],[3,"ExprMatch",0],[3,"ExprIf",0],[3,"ExprAsync",0],[3,"ExprYield",0],[3,"ExprReference",0],[3,"ExprForLoop",0],[3,"ExprRange",0],[3,"ExprTryBlock",0],[3,"ExprTuple",0],[3,"ExprStruct",0],[3,"ExprLoop",0],[3,"ExprRepeat",0],[15,"usize"],[3,"Literal",4116],[8,"Into",4112],[4,"Option",4117],[8,"Hasher",4118],[3,"Iter",2265],[3,"IterMut",2265],[3,"Span",4116],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream",4119],[8,"Parse",2168],[6,"ParseStream",2168],[3,"TokenStream",4116],[8,"Parser",2168],[3,"Vec",4120],[3,"String",4121],[3,"TypeId",4122],[3,"TokenBuffer",2130],[3,"Cursor",2130],[4,"Delimiter",4116],[3,"Punct",4116],[4,"TokenTree",4116],[3,"ParseBuffer",2168],[3,"StepCursor",2168],[3,"Error",2168],[3,"Lookahead1",2168],[8,"Display",4114],[8,"IntoIterator",4123],[3,"LexError",4116],[8,"ToTokens",4124],[3,"Nothing",2168],[3,"Punctuated",2265],[8,"Peek",2168],[8,"FnOnce",4125],[8,"Clone",4126],[3,"Pairs",2265],[3,"IntoPairs",2265],[3,"IntoIter",2265],[4,"Pair",2265],[8,"Default",4127],[3,"PairsMut",2265],[8,"Token",2425],[3,"Abstract",2425],[3,"As",2425],[3,"Async",2425],[3,"Auto",2425],[3,"Await",2425],[3,"Become",2425],[3,"Box",2425],[3,"Break",2425],[3,"Const",2425],[3,"Continue",2425],[3,"Default",2425],[3,"Do",2425],[3,"Dyn",2425],[3,"Else",2425],[3,"Enum",2425],[3,"Final",2425],[3,"Fn",2425],[3,"For",2425],[3,"If",2425],[3,"Impl",2425],[3,"In",2425],[3,"Let",2425],[3,"Loop",2425],[3,"Macro",2425],[3,"Match",2425],[3,"Mod",2425],[3,"Move",2425],[3,"Mut",2425],[3,"Override",2425],[3,"Priv",2425],[3,"Pub",2425],[3,"Ref",2425],[3,"Return",2425],[3,"Static",2425],[3,"Struct",2425],[3,"Trait",2425],[3,"Try",2425],[3,"Type",2425],[3,"Typeof",2425],[3,"Union",2425],[3,"Unsafe",2425],[3,"Unsized",2425],[3,"Use",2425],[3,"Virtual",2425],[3,"Where",2425],[3,"While",2425],[3,"Yield",2425],[3,"Add",2425],[3,"AddEq",2425],[3,"And",2425],[3,"AndAnd",2425],[3,"AndEq",2425],[3,"At",2425],[3,"Bang",2425],[3,"Caret",2425],[3,"CaretEq",2425],[3,"Colon",2425],[3,"Colon2",2425],[3,"Comma",2425],[3,"Div",2425],[3,"DivEq",2425],[3,"Dollar",2425],[3,"Dot",2425],[3,"Dot2",2425],[3,"Dot3",2425],[3,"DotDotEq",2425],[3,"Eq",2425],[3,"EqEq",2425],[3,"Ge",2425],[3,"Gt",2425],[3,"Le",2425],[3,"Lt",2425],[3,"MulEq",2425],[3,"Ne",2425],[3,"Or",2425],[3,"OrEq",2425],[3,"OrOr",2425],[3,"Pound",2425],[3,"Question",2425],[3,"RArrow",2425],[3,"LArrow",2425],[3,"Rem",2425],[3,"RemEq",2425],[3,"FatArrow",2425],[3,"Semi",2425],[3,"Shl",2425],[3,"ShlEq",2425],[3,"Shr",2425],[3,"ShrEq",2425],[3,"Star",2425],[3,"Sub",2425],[3,"SubEq",2425],[3,"Tilde",2425],[3,"Brace",2425],[3,"Bracket",2425],[3,"Paren",2425],[3,"Group",2425],[4,"StrStyle",0],[8,"IdentExt",2164],[8,"Speculative",2263],[8,"Spanned",2423]],"b":[[799,"impl-PartialEq-for-Ident"],[800,"impl-PartialEq%3CT%3E-for-Ident"],[818,"impl-Debug-for-Ident"],[819,"impl-Display-for-Ident"],[820,"impl-IdentFragment-for-Ident"],[832,"impl-From%3CSuper%3E-for-Ident"],[833,"impl-From%3CUnderscore%3E-for-Ident"],[834,"impl-From%3CSelfType%3E-for-Ident"],[835,"impl-From%3CExtern%3E-for-Ident"],[836,"impl-From%3CCrate%3E-for-Ident"],[837,"impl-From%3CSelfValue%3E-for-Ident"],[840,"impl-From%3CMetaNameValue%3E-for-Meta"],[841,"impl-From%3CMetaList%3E-for-Meta"],[843,"impl-From%3CPath%3E-for-Meta"],[846,"impl-From%3CMeta%3E-for-NestedMeta"],[848,"impl-From%3CLit%3E-for-NestedMeta"],[850,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[852,"impl-From%3CFieldsNamed%3E-for-Fields"],[857,"impl-From%3CVisRestricted%3E-for-Visibility"],[858,"impl-From%3CVisCrate%3E-for-Visibility"],[859,"impl-From%3CVisPublic%3E-for-Visibility"],[863,"impl-From%3CExprTry%3E-for-Expr"],[864,"impl-From%3CExprBlock%3E-for-Expr"],[865,"impl-From%3CExprMacro%3E-for-Expr"],[866,"impl-From%3CExprAwait%3E-for-Expr"],[867,"impl-From%3CExprContinue%3E-for-Expr"],[868,"impl-From%3CExprType%3E-for-Expr"],[869,"impl-From%3CExprWhile%3E-for-Expr"],[870,"impl-From%3CExprBinary%3E-for-Expr"],[871,"impl-From%3CExprBox%3E-for-Expr"],[872,"impl-From%3CExprField%3E-for-Expr"],[873,"impl-From%3CExprBreak%3E-for-Expr"],[874,"impl-From%3CExprAssignOp%3E-for-Expr"],[875,"impl-From%3CExprGroup%3E-for-Expr"],[876,"impl-From%3CExprUnsafe%3E-for-Expr"],[877,"impl-From%3CExprArray%3E-for-Expr"],[878,"impl-From%3CExprReturn%3E-for-Expr"],[879,"impl-From%3CExprParen%3E-for-Expr"],[881,"impl-From%3CExprMethodCall%3E-for-Expr"],[882,"impl-From%3CExprAssign%3E-for-Expr"],[883,"impl-From%3CExprLet%3E-for-Expr"],[884,"impl-From%3CExprUnary%3E-for-Expr"],[885,"impl-From%3CExprClosure%3E-for-Expr"],[886,"impl-From%3CExprMatch%3E-for-Expr"],[887,"impl-From%3CExprIf%3E-for-Expr"],[888,"impl-From%3CExprLit%3E-for-Expr"],[889,"impl-From%3CExprAsync%3E-for-Expr"],[890,"impl-From%3CExprCast%3E-for-Expr"],[891,"impl-From%3CExprYield%3E-for-Expr"],[892,"impl-From%3CExprPath%3E-for-Expr"],[893,"impl-From%3CExprCall%3E-for-Expr"],[894,"impl-From%3CExprReference%3E-for-Expr"],[895,"impl-From%3CExprForLoop%3E-for-Expr"],[896,"impl-From%3CExprRange%3E-for-Expr"],[897,"impl-From%3CExprTryBlock%3E-for-Expr"],[898,"impl-From%3CExprIndex%3E-for-Expr"],[899,"impl-From%3CExprTuple%3E-for-Expr"],[900,"impl-From%3CExprStruct%3E-for-Expr"],[901,"impl-From%3CExprLoop%3E-for-Expr"],[902,"impl-From%3CExprRepeat%3E-for-Expr"],[942,"impl-From%3CIdent%3E-for-Member"],[944,"impl-From%3CIndex%3E-for-Member"],[945,"impl-From%3Cusize%3E-for-Member"],[950,"impl-From%3CConstParam%3E-for-GenericParam"],[951,"impl-From%3CLifetimeDef%3E-for-GenericParam"],[952,"impl-From%3CTypeParam%3E-for-GenericParam"],[958,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[959,"impl-From%3CLifetime%3E-for-TypeParamBound"],[964,"impl-From%3CPredicateEq%3E-for-WherePredicate"],[965,"impl-From%3CPredicateType%3E-for-WherePredicate"],[966,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[971,"impl-From%3CLitBool%3E-for-Lit"],[972,"impl-From%3CLitByteStr%3E-for-Lit"],[973,"impl-From%3CLitInt%3E-for-Lit"],[974,"impl-From%3CLitStr%3E-for-Lit"],[975,"impl-From%3CLitChar%3E-for-Lit"],[976,"impl-From%3CLitByte%3E-for-Lit"],[978,"impl-From%3CLitFloat%3E-for-Lit"],[993,"impl-From%3CDataStruct%3E-for-Data"],[994,"impl-From%3CDataEnum%3E-for-Data"],[995,"impl-From%3CDataUnion%3E-for-Data"],[1001,"impl-From%3CTypeBareFn%3E-for-Type"],[1002,"impl-From%3CTypeImplTrait%3E-for-Type"],[1003,"impl-From%3CTypePtr%3E-for-Type"],[1004,"impl-From%3CTypeTuple%3E-for-Type"],[1005,"impl-From%3CTypeArray%3E-for-Type"],[1006,"impl-From%3CTypeInfer%3E-for-Type"],[1007,"impl-From%3CTypePath%3E-for-Type"],[1008,"impl-From%3CTypeSlice%3E-for-Type"],[1009,"impl-From%3CTypeReference%3E-for-Type"],[1010,"impl-From%3CTypeMacro%3E-for-Type"],[1012,"impl-From%3CTypeNever%3E-for-Type"],[1013,"impl-From%3CTypeTraitObject%3E-for-Type"],[1014,"impl-From%3CTypeGroup%3E-for-Type"],[1015,"impl-From%3CTypeParen%3E-for-Type"],[1194,"impl-IntoIterator-for-%26Fields"],[1195,"impl-IntoIterator-for-%26mut+Fields"],[1196,"impl-IntoIterator-for-Fields"],[1288,"impl-LitStr"],[1289,"impl-Parse-for-LitStr"],[1380,"impl-IdentFragment-for-Ident"],[1382,"impl-Ident"],[2206,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[2207,"impl-Display-for-ParseBuffer%3C\'a%3E"],[2208,"impl-Debug-for-Error"],[2209,"impl-Display-for-Error"],[2223,"impl-IntoIterator-for-Error"],[2224,"impl-IntoIterator-for-%26Error"],[2306,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[2307,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2318,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2319,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[2331,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"],[2332,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"],[2333,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"]]},\
"tracing":{"doc":"A scoped, structured logging and diagnostics system.","t":"ISDSDSIDDDSISLLLLLLLLLLLLLLLLAKLOOLALLLLLLLLLLKLOKLLLLLOOAKLOLOKLALLLLLLLLLLLLLLLLLLLLLLOOALLLLLLLLLLLLLLLALLLLLLLKLLLLLKKLKLLLAOOLOOLLLLLLLLLLLLLLOOIDDDLLLLLLLLKLLLLKLKLKLLKLLLLLLLLLLLLLKLLKLKLLLLLLLLLLLDDDLLLLLLLLLLFLLFLLLLLLLDLLLLLLLLLLLLLLLLLLIDDDDDDIDIKLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLSSSDSDRSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Collect","DEBUG","Dispatch","ERROR","Event","INFO","Instrument","Level","Metadata","Span","TRACE","Value","WARN","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","clone","clone","clone","clone_span","clone_span","cmp","collect","current_span","current_span","debug","debug_span","default","dispatch","downcast_raw","downcast_ref","downcast_ref","downcast_ref","downcast_ref","downcast_ref","downgrade","drop","drop_span","drop_span","enabled","enabled","enabled","enter","enter","eq","eq","eq","eq","error","error_span","event","event","event","event","event_enabled","event_enabled","exit","exit","field","fields","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_static","from_str","ge","ge","gt","gt","hash","hash","in_current_span","info","info_span","instrument","instrument","into","into","into","into","is","is","is","is","is","is_event","is_span","le","le","level","level_filters","line","lt","lt","max_level_hint","module_path","name","new","new_span","new_span","none","on_register_dispatch","partial_cmp","partial_cmp","record","record","record","record_follows_from","record_follows_from","register_callsite","register_callsite","span","span","span_enabled","target","trace","trace_span","try_close","try_close","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","warn","warn_span","Collect","Interest","NoCollector","SetGlobalDefaultError","always","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_span","current_span","current_span","default","downcast_raw","drop_span","enabled","enabled","enter","enter","event","event","event_enabled","exit","exit","fmt","fmt","from","from","into","into","is_always","is_never","is_sometimes","max_level_hint","never","new","new_span","new_span","on_register_dispatch","record","record","record_follows_from","record_follows_from","register_callsite","register_callsite","sometimes","try_close","try_from","try_from","try_into","try_into","type_id","type_id","Dispatch","SetGlobalDefaultError","WeakDispatch","borrow","borrow","borrow_mut","borrow_mut","clone","fmt","fmt","fmt","from","from","get_default","into","into","set_global_default","try_from","try_from","try_into","try_into","type_id","type_id","upgrade","Event","borrow","borrow_mut","child_of","dispatch","fields","fmt","from","into","is_contextual","is_root","metadata","new","new_child_of","parent","record","try_from","try_into","type_id","AsField","DebugValue","DisplayValue","Empty","Field","FieldSet","Iter","Value","ValueSet","Visit","as_field","as_field","as_field","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","callsite","clone","clone","clone","contains","debug","display","eq","eq","eq","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","name","new","next","record","record","record","record","record","record_bool","record_debug","record_f64","record_i128","record_i64","record_str","record_u128","record_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Instrument","Instrumented","borrow","borrow_mut","clone","fmt","from","in_current_span","inner","inner_mut","inner_pin_mut","inner_pin_ref","instrument","into","into_future","into_inner","poll","span","span_mut","try_from","try_into","type_id","DEBUG","ERROR","INFO","LevelFilter","OFF","ParseLevelFilterError","STATIC_MAX_LEVEL","TRACE","WARN","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","current","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_level","from_str","ge","ge","gt","gt","hash","into","into","into_level","le","le","lt","lt","partial_cmp","partial_cmp","try_from","try_from","try_into","try_into","type_id","type_id","AsId","Attributes","Entered","EnteredSpan","Id","Record","Span","as_id","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_of","child_of","clone","contains","contains","current","deref","drop","drop","enter","entered","eq","exit","field","fields","fmt","fmt","fmt","fmt","fmt","follows_from","from","from","from","from","from","from_non_zero_u64","from_u64","has_field","hash","id","id","in_scope","into","into","into","into","into","into_non_zero_u64","into_u64","is_contextual","is_disabled","is_empty","is_empty","is_none","is_root","metadata","metadata","new","new","new","new_disabled","new_root","new_root","none","or_current","parent","record","record","record","record_all","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","values","with_collector"],"q":[[0,"tracing"],[149,"tracing::collect"],[204,"tracing::dispatch"],[228,"tracing::event"],[247,"tracing::field"],[355,"tracing::instrument"],[377,"tracing::level_filters"],[426,"tracing::span"],[522,"tracing_core::callsite"],[523,"core::cmp"],[524,"tracing_core::span"],[525,"core::any"],[526,"core::ptr::non_null"],[527,"core::option"],[528,"core::any"],[529,"core::fmt"],[530,"tracing_core::metadata"],[531,"core::hash"],[532,"tracing_core::metadata"],[533,"core::convert"],[534,"core::clone"],[535,"core::fmt"],[536,"core::marker"],[537,"core::pin"],[538,"core::task::wake"],[539,"core::task::poll"],[540,"core::future::future"],[541,"core::num::nonzero"],[542,"core::ops::function"]],"d":["Trait representing the functions required to collect trace …","The “debug” level.","<code>Dispatch</code> trace data to a <code>Collect</code>.","The “error” level.","<code>Event</code>s represent single points in time where something …","The “info” level.","Attaches spans to a [<code>std::future::Future</code>].","Describes the level of verbosity of a span or event.","Metadata describing a span or event.","A handle representing a span, with the capability to enter …","The “trace” level.","A field value of an erased type.","The “warn” level.","Returns the string representation of the <code>Level</code>.","","","","","","","","","Returns an opaque <code>Identifier</code> that uniquely identifies the …","","","","Notifies the collector that a span ID has been cloned.","Notifies the collector that a span ID has been cloned.","","Collects and records trace data.","Returns a type representing this collector’s view of the …","Returns a type representing this collector’s view of the …","Constructs an event at the debug level.","Constructs a span at the debug level.","Returns the current default dispatcher","Dispatches trace events to a <code>Collect</code>.","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to the <code>Collect</code> this <code>Dispatch</code> …","Creates a <code>WeakDispatch</code> from this <code>Dispatch</code>.","","<strong>This method is deprecated.</strong>","Notifies the collector that a span ID has been dropped.","Returns true if a span or event with the specified metadata…","Returns true if a span with the specified metadata would be","Checks whether a span or event is enabled based on the …","Records that a span has been entered.","Records that a span has been can_enter.","","","","","Constructs an event at the error level.","Constructs a span at the error level.","Events represent single points in time during the …","Records that an <code>Event</code> has occurred.","Records that an <code>Event</code> has occurred.","Constructs a new <code>Event</code>.","Determine if an <code>Event</code> should be recorded.","Tests whether an event with the specified level and target …","Records that a span has been exited.","Records that a span has been exited.","Structured data associated with <code>Span</code>s and <code>Event</code>s.","Returns the names of the fields on the described span or …","Returns the name of the source code file where the span …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Dispatch</code> that forwards to the given static …","","","","","","","","Instruments this type with the current <code>Span</code>, returning an …","Constructs an event at the info level.","Constructs a span at the info level.","Attach a span to a <code>std::future::Future</code>.","Instruments this type with the provided <code>Span</code>, returning an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Dispatch</code> forwards to a collector of …","Returns true if the callsite kind is <code>Event</code>.","Return true if the callsite kind is <code>Span</code>.","","","Returns the level of verbosity of the described span or …","Trace verbosity level filtering.","Returns the line number in the source code file where the …","","","Returns the highest verbosity level that this <code>Collector</code> …","Returns the path to the Rust module where the span …","Returns the name of the span.","Construct new metadata for a span or event, with a name, …","Visit the construction of a new span, returning a new span …","Record the construction of a new span, returning a new ID …","Returns a new <code>Dispatch</code> that discards events and spans.","Invoked when this collector becomes a <code>Dispatch</code>.","","","Record a set of values on a span.","Visits this value with the given <code>Visitor</code>.","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this collector, returning …","Registers a new callsite with this collector, returning …","Spans represent periods of time in which a program was …","Constructs a new span.","Tests whether a span with the specified level and target …","Returns a string describing the part of the system where …","Constructs an event at the trace level.","Constructs a span at the trace level.","Notifies the collector that a <code>span ID</code> has been dropped, …","Notifies the collector that a span ID has been dropped, …","","","","","","","","","","","","","Constructs an event at the warn level.","Constructs a span at the warn level.","Trait representing the functions required to collect trace …","Indicates a <code>Collect</code>’s interest in a particular callsite.","A no-op collector.","Returned if setting the global dispatcher fails.","Returns an <code>Interest</code> indicating the collector is always …","","","","","","","Notifies the collector that a span ID has been cloned.","Returns a type representing this collector’s view of the …","","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","<strong>This method is deprecated.</strong>","Returns true if a span or event with the specified metadata…","","Records that a span has been entered.","","Records that an <code>Event</code> has occurred.","","Determine if an <code>Event</code> should be recorded.","Records that a span has been exited.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the collector is always interested in …","Returns <code>true</code> if the collector is never interested in being …","Returns <code>true</code> if the collector is sometimes interested in …","Returns the highest verbosity level that this <code>Collector</code> …","Returns an <code>Interest</code> indicating that the collector is never …","Returns a new <code>NoCollector</code> instance.","Visit the construction of a new span, returning a new span …","","Invoked when this collector becomes a <code>Dispatch</code>.","Record a set of values on a span.","","Adds an indication that <code>span</code> follows from the span with …","","Registers a new callsite with this collector, returning …","","Returns an <code>Interest</code> indicating the collector is sometimes …","Notifies the collector that a <code>span ID</code> has been dropped, …","","","","","","","<code>Dispatch</code> trace data to a <code>Collect</code>.","Returned if setting the global dispatcher fails.","<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Executes a closure with a reference to the current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets this dispatch as the global default for the duration …","","","","","","","Attempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.","<code>Event</code>s represent single points in time where something …","","","Constructs a new <code>Event</code> with the specified metadata and set …","Constructs a new <code>Event</code> with the specified metadata and set …","Returns an iterator over the set of values on this <code>Event</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if the new event’s parent should be …","Returns true if the new event should be a root.","Returns metadata describing this <code>Event</code>.","Returns a new <code>Event</code> in the current span, with the …","Returns a new <code>Event</code> as a child of the specified span, with …","Returns the new event’s explicitly-specified parent, if …","Visits all the fields on this <code>Event</code> with the specified …","","","","Trait implemented to allow a type to be used as a field …","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.","A <code>Value</code> which serializes using <code>fmt::Display</code>.","An empty field.","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","Describes the fields present on a span.","An iterator over a set of fields.","A field value of an erased type.","A set of fields and values for a span.","Visits typed values.","Attempts to convert <code>&amp;self</code> into a <code>Field</code> with the specified …","","","","","","","","","","","","","","","","","","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","","","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …","","","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns whether or not this <code>FieldSet</code> has fields.","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.","Returns the number of fields in this <code>FieldSet</code>.","Returns a string representing the name of the field.","Constructs a new <code>FieldSet</code> with the given array of field …","","Visits this value with the given <code>Visitor</code>.","Visits all the fields in this <code>ValueSet</code> with the provided …","","","","Visit a boolean value.","Visit a value implementing <code>fmt::Debug</code>.","Visit a double-precision floating point value.","Visit a signed 128-bit integer value.","Visit a signed 64-bit integer value.","Visit a string value.","Visit an unsigned 128-bit integer value.","Visit an unsigned 64-bit integer value.","","","","","","","","","","","","","","","","","","","","","","Attaches spans to a [<code>std::future::Future</code>].","A <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.","","","","","Returns the argument unchanged.","Instruments this type with the current <code>Span</code>, returning an …","Borrows the wrapped type.","Mutably borrows the wrapped type.","Get a pinned mutable reference to the wrapped type.","Get a pinned reference to the wrapped type.","Instruments this type with the provided <code>Span</code>, returning an …","Calls <code>U::from(self)</code>.","","Consumes the <code>Instrumented</code>, returning the wrapped type.","","Borrows the <code>Span</code> that this type is instrumented by.","Mutably borrows the <code>Span</code> that this type is instrumented by.","","","","The “debug” level.","The “error” level.","The “info” level.","A filter comparable to a verbosity <code>Level</code>.","The “off” level.","Indicates that a string could not be parsed to a valid …","The statically configured maximum trace level.","The “trace” level.","The “warn” level.","","","","","","","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a <code>LevelFilter</code> that enables spans and events with …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the most verbose <code>Level</code> that this filter accepts, …","","","","","","","","","","","","","Trait implemented by types which have a span <code>Id</code>.","Attributes provided to a collector describing a new span …","A guard representing a span which has been entered and is …","An owned version of <code>Entered</code>, a guard representing a span …","Identifies a span within the context of a collector.","A set of fields recorded by a span.","A handle representing a span, with the capability to enter …","Returns the <code>Id</code> of the span that <code>self</code> corresponds to, or …","","","","","","","","","","","Constructs a new <code>Span</code> as child of the given parent span, …","Returns <code>Attributes</code> describing a new child span of the …","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …","Returns <code>true</code> if this <code>Record</code> contains a value for the given …","Returns a handle to the span considered by the <code>Collector</code> …","","","","Enters this span, returning a guard that will exit the …","Enters this span, consuming it and returning a guard that …","","Exits this span, returning the underlying <code>Span</code>.","Returns a <code>Field</code> for the field with the given <code>name</code>, if one …","Returns the set of all fields defined by this span’s …","","","","","","Indicates that the span with the given ID has an indirect …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new span ID from the given <code>NonZeroU64</code>.","Constructs a new span ID from the given <code>u64</code>.","Returns true if this <code>Span</code> has a field for the given <code>Field</code> …","","Returns this span’s <code>Id</code>, if it is enabled.","Returns this span’s <code>Id</code>, if it is enabled.","Executes the given function in the context of this span.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the span’s ID as a <code>NonZeroU64</code>.","Returns the span’s ID as a <code>u64</code>.","Returns true if the new span’s parent should be …","Returns <code>true</code> if this span was disabled by the collector …","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.","Returns true if this <code>Record</code> contains <em>no</em> values.","Returns <code>true</code> if this span was constructed by <code>Span::none</code> …","Returns true if the new span should be a root.","Returns this span’s <code>Metadata</code>, if it is enabled.","Returns a reference to the new span’s metadata.","Constructs a new <code>Span</code> with the given metadata and set of …","Returns <code>Attributes</code> describing a new child span of the …","Constructs a new <code>Record</code> from a <code>ValueSet</code>.","Constructs a new disabled span with the given <code>Metadata</code>.","Constructs a new <code>Span</code> as the root of its own trace tree, …","Returns <code>Attributes</code> describing a new span at the root of …","Constructs a new span that is <em>completely disabled</em>.","Returns this span, if it was enabled by the current …","Returns the new span’s explicitly-specified parent, if …","Records that the field described by <code>field</code> has the value …","Records all the fields in this set of <code>Attributes</code> with the …","Records all the fields in this <code>Record</code> with the provided …","Records all the fields in the provided <code>ValueSet</code>.","","","","","","","","","","","","","","","","Returns a reference to a <code>ValueSet</code> containing any values …","Invokes a function with a reference to this span’s ID …"],"i":[0,1,0,1,0,1,0,0,0,0,1,0,1,1,5,3,6,1,5,3,6,1,3,5,6,1,14,6,1,0,14,6,0,0,6,0,14,14,14,14,14,6,6,5,14,6,14,6,0,14,6,5,3,1,1,0,0,0,14,6,0,14,0,14,6,0,3,3,5,23,23,3,6,1,1,5,3,6,1,6,1,1,1,1,1,5,1,67,0,0,0,67,5,3,6,1,14,14,14,14,6,3,3,1,1,3,0,3,1,1,14,3,3,3,14,6,6,14,1,1,14,23,6,14,6,14,6,0,0,0,3,0,0,14,6,5,3,6,1,5,3,6,1,5,3,6,1,0,0,0,0,0,0,35,35,36,35,36,35,36,14,14,36,36,14,14,14,36,14,36,14,36,14,14,36,35,36,35,36,35,36,35,35,35,14,35,36,14,36,14,14,36,14,36,14,36,35,14,35,36,35,36,35,36,0,0,0,37,16,37,16,16,37,37,16,37,16,0,37,16,0,37,16,37,16,37,16,16,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,64,33,33,33,20,39,33,47,41,42,45,20,39,33,47,41,42,45,39,33,33,42,45,20,0,0,20,33,47,20,20,20,39,39,33,33,47,41,42,42,45,20,39,33,47,41,42,45,33,20,39,33,47,41,42,45,20,41,20,20,20,33,20,41,23,39,47,42,45,34,34,34,34,34,34,34,34,20,39,33,47,41,42,45,20,39,33,47,41,42,45,20,39,33,47,41,42,45,0,0,28,28,28,28,28,67,28,28,28,28,67,28,28,28,28,28,28,28,28,28,18,18,18,0,18,0,0,18,18,18,61,18,61,18,61,18,18,18,18,18,18,61,61,18,18,18,61,18,18,18,18,18,18,18,18,61,18,18,18,18,18,18,18,18,61,18,61,18,61,0,0,0,0,0,0,0,68,63,62,7,31,32,63,62,7,31,32,5,31,7,31,32,5,62,63,62,5,5,7,62,5,31,63,62,7,31,32,5,63,62,7,31,32,7,7,5,7,5,62,5,63,62,7,31,32,7,7,31,5,31,32,5,31,5,31,5,31,32,5,5,31,5,5,31,5,31,32,5,63,62,7,31,32,63,62,7,31,32,63,62,7,31,32,31,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[5,5],[6,6],[1,1],[[-1,7],7,[]],[[6,7],7],[[1,1],8],0,[-1,9,[]],[6,9],0,0,[[],6],0,[[-1,10],[[13,[[12,[11]]]]],[]],[14,[[13,[-1]]],15],[14,[[13,[-1]]],15],[14,[[13,[-1]]],15],[14,[[13,[-1]]],15],[6,[[13,[-1]]],15],[6,16],[5,11],[[-1,7],11,[]],[[6,7],11],[[-1,3],17,[]],[[6,3],17],0,[[-1,7],11,[]],[[6,7],11],[[5,5],17],[[3,3],17],[[1,1],17],[[1,18],17],0,0,0,[[-1,19],11,[]],[[6,19],11],0,[[-1,19],17,[]],0,[[-1,7],11,[]],[[6,7],11],0,[3,20],[3,[[13,[2]]]],[[5,21],22],[[23,21],[[25,[11,24]]]],[[23,21],[[25,[11,24]]]],[[3,21],[[25,[11,24]]]],[[6,21],[[25,[11,24]]]],[[1,21],[[25,[11,24]]]],[[1,21],[[25,[11,24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,6],[2,[[25,[1,26]]]],[[1,1],17],[[1,18],17],[[1,1],17],[[1,18],17],[[5,-1],11,27],[[1,-1],11,27],[-1,[[28,[-1]]],[]],0,0,0,[[-1,5],[[28,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,17],[14,17],[14,17],[14,17],[6,17],[3,17],[3,17],[[1,18],17],[[1,1],17],[3,1],0,[3,[[13,[29]]]],[[1,1],17],[[1,18],17],[-1,[[13,[18]]],[]],[3,[[13,[2]]]],[3,2],[[2,2,1,[13,[2]],[13,[29]],[13,[2]],20,30],3],[[-1,31],7,[]],[[6,31],7],[[],6],[[-1,6],11,[]],[[1,18],[[13,[8]]]],[[1,1],[[13,[8]]]],[[-1,7,32],11,[]],[[-1,33,34],11,[]],[[6,7,32],11],[[-1,7,7],11,[]],[[6,7,7],11],[[-1,3],35,[]],[[6,3],35],0,0,0,[3,2],0,0,[[-1,7],17,[]],[[6,7],17],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,[[],35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[36,36],[[-1,7],7,[]],[-1,9,[]],[36,9],[[],36],[[-1,10],[[13,[[12,[11]]]]],[]],[[-1,7],11,[]],[[-1,3],17,[]],[[36,3],17],[[-1,7],11,[]],[[36,7],11],[[-1,19],11,[]],[[36,19],11],[[-1,19],17,[]],[[-1,7],11,[]],[[36,7],11],[[35,21],[[25,[11,24]]]],[[36,21],[[25,[11,24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,17],[35,17],[35,17],[-1,[[13,[18]]],[]],[[],35],[[],36],[[-1,31],7,[]],[[36,31],7],[[-1,6],11,[]],[[-1,7,32],11,[]],[[36,7,32],11],[[-1,7,7],11,[]],[[36,7,7],11],[[-1,3],35,[]],[[36,3],35],[[],35],[[-1,7],17,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[37,21],[[25,[11,24]]]],[[37,21],[[25,[11,24]]]],[[16,21],[[25,[11,24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,38,[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,[[25,[11,37]]]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[16,[[13,[6]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,3,39],11,[[40,[[13,[7]]]]]],[[3,39],11],[19,41],[[19,21],[[25,[11,24]]]],[-1,-1,[]],[-1,-2,[],[]],[19,17],[19,17],[19,3],[[3,39],19],[[-1,3,39],19,[[40,[[13,[7]]]]]],[19,[[13,[7]]]],[[19,34],11],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,0,[[-1,3],[[13,[33]]],[]],[[33,3],[[13,[33]]]],[[33,3],[[13,[33]]]],[33,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,4],[33,4],[33,33],[[[42,[-1]]],[[42,[-1]]],[43,44]],[[[45,[-1]]],[[45,[-1]]],[43,46]],[[20,33],17],[-1,[[45,[-1]]],46],[-1,[[42,[-1]]],44],[[20,20],17],[[33,33],17],[[47,47],17],[[20,-1],[[13,[33]]],[[48,[2]],49]],[[20,21],[[25,[11,24]]]],[[20,21],[[25,[11,24]]]],[[39,21],[[25,[11,24]]]],[[39,21],[[25,[11,24]]]],[[33,21],[[25,[11,24]]]],[[33,21],[[25,[11,24]]]],[[47,21],[[25,[11,24]]]],[[41,21],[[25,[11,24]]]],[[[42,[-1]],21],[[25,[11,24]]],44],[[[42,[-1]],21],[[25,[11,24]]],44],[[[45,[-1]],21],[[25,[11,24]]],46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[33,-1],11,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20],[-1,-2,[],[]],[20,17],[20,41],[20,50],[33,2],[[[51,[2]],4],20],[41,[[13,[33]]]],[[-1,33,34],11,[]],[[39,34],11],[[47,33,34],11],[[[42,[-1]],33,34],11,44],[[[45,[-1]],33,34],11,[46,46]],[[-1,33,17],11,[]],[[-1,33,46],11,[]],[[-1,33,52],11,[]],[[-1,33,53],11,[]],[[-1,33,54],11,[]],[[-1,33,2],11,[]],[[-1,33,55],11,[]],[[-1,33,56],11,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1]]],[[28,[-1]]],43],[[[28,[-1]],21],22,46],[-1,-1,[]],[-1,[[28,[-1]]],[]],[[[28,[-1]]],-1,[]],[[[28,[-1]]],-1,[]],[[[57,[[28,[-1]]]]],[[57,[-1]]],[]],[[[57,[[28,[-1]]]]],[[57,[-1]]],[]],[[-1,5],[[28,[-1]]],[]],[-1,-2,[],[]],[-1,[],[]],[[[28,[-1]]],-1,[]],[[[57,[[28,[-1]]]],58],59,60],[[[28,[-1]]],5,[]],[[[28,[-1]]],5,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[61,61],[[18,18],8],[[],18],[[18,18],17],[[18,1],17],[[18,21],[[25,[11,24]]]],[[18,21],[[25,[11,24]]]],[[61,21],[[25,[11,24]]]],[[61,21],[[25,[11,24]]]],[[[13,[1]]],18],[-1,-1,[]],[1,18],[-1,-1,[]],[1,18],[2,[[25,[18]]]],[[18,18],17],[[18,1],17],[[18,18],17],[[18,1],17],[[18,-1],11,27],[-1,-2,[],[]],[-1,-2,[],[]],[18,[[13,[1]]]],[[18,18],17],[[18,1],17],[[18,18],17],[[18,1],17],[[18,18],[[13,[8]]]],[[18,1],[[13,[8]]]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,0,[-1,[[13,[7]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,3,39],5,[[40,[[13,[7]]]]]],[[7,3,39],31],[7,7],[[31,33],17],[[32,33],17],[[],5],[62,5],[63,11],[62,11],[5,63],[5,62],[[7,7],17],[62,5],[[5,-1],[[13,[33]]],[64,49]],[31,20],[[63,21],22],[[62,21],22],[[7,21],[[25,[11,24]]]],[[31,21],[[25,[11,24]]]],[[32,21],[[25,[11,24]]]],[[5,-1],5,[[40,[[13,[7]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[65,7],[56,7],[[5,-1],17,[64,49]],[[7,-1],11,27],[5,[[13,[7]]]],[62,[[13,[7]]]],[[5,-1],-2,66,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,65],[7,56],[31,17],[5,17],[31,17],[32,17],[5,17],[31,17],[5,[[13,[3]]]],[31,3],[[3,39],5],[[3,39],31],[39,32],[3,5],[[3,39],5],[[3,39],31],[[],5],[5,5],[31,[[13,[7]]]],[[5,-1,-2],5,[64,49],23],[[31,34],11],[[32,34],11],[[5,39],5],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[31,39],[[5,-1],[[13,[-2]]],66,[]]],"c":[44,45,165],"p":[[3,"Level",0],[15,"str"],[3,"Metadata",0],[3,"Identifier",522],[3,"Span",0],[3,"Dispatch",0],[3,"Id",426],[4,"Ordering",523],[3,"Current",524],[3,"TypeId",525],[15,"tuple"],[3,"NonNull",526],[4,"Option",527],[8,"Collect",0],[8,"Any",525],[3,"WeakDispatch",204],[15,"bool"],[3,"LevelFilter",377],[3,"Event",228],[3,"FieldSet",247],[3,"Formatter",528],[6,"Result",528],[8,"Value",0],[3,"Error",528],[4,"Result",529],[3,"ParseLevelError",530],[8,"Hasher",531],[3,"Instrumented",355],[15,"u32"],[3,"Kind",530],[3,"Attributes",426],[3,"Record",426],[3,"Field",247],[8,"Visit",247],[3,"Interest",149],[3,"NoCollector",149],[3,"SetGlobalDefaultError",204],[8,"FnMut",532],[3,"ValueSet",247],[8,"Into",533],[3,"Iter",247],[3,"DisplayValue",247],[8,"Clone",534],[8,"Display",528],[3,"DebugValue",247],[8,"Debug",528],[3,"Empty",247],[8,"Borrow",535],[8,"Sized",536],[15,"usize"],[15,"slice"],[15,"f64"],[15,"i128"],[15,"i64"],[15,"u128"],[15,"u64"],[3,"Pin",537],[3,"Context",538],[4,"Poll",539],[8,"Future",540],[3,"ParseLevelFilterError",377],[3,"EnteredSpan",426],[3,"Entered",426],[8,"AsField",247],[3,"NonZeroU64",541],[8,"FnOnce",532],[8,"Instrument",0],[8,"AsId",426]],"b":[[37,"impl-dyn+Collect+%2B+Sync"],[38,"impl-dyn+Collect+%2B+Send+%2B+Sync"],[39,"impl-dyn+Collect"],[40,"impl-dyn+Collect+%2B+Send"],[53,"impl-PartialEq-for-Level"],[54,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[69,"impl-Debug-for-dyn+Value"],[70,"impl-Display-for-dyn+Value"],[73,"impl-Debug-for-Level"],[74,"impl-Display-for-Level"],[81,"impl-PartialOrd-for-Level"],[82,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[83,"impl-PartialOrd-for-Level"],[84,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[96,"impl-dyn+Collect+%2B+Sync"],[97,"impl-dyn+Collect"],[98,"impl-dyn+Collect+%2B+Send"],[99,"impl-dyn+Collect+%2B+Send+%2B+Sync"],[103,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[104,"impl-PartialOrd-for-Level"],[108,"impl-PartialOrd-for-Level"],[109,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[118,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[119,"impl-PartialOrd-for-Level"],[212,"impl-Debug-for-SetGlobalDefaultError"],[213,"impl-Display-for-SetGlobalDefaultError"],[258,"impl-AsField-for-Field"],[259,"impl-AsField-for-%26Field"],[287,"impl-Debug-for-FieldSet"],[288,"impl-Display-for-FieldSet"],[289,"impl-Display-for-ValueSet%3C\'a%3E"],[290,"impl-Debug-for-ValueSet%3C\'a%3E"],[291,"impl-Debug-for-Field"],[292,"impl-Display-for-Field"],[295,"impl-Display-for-DisplayValue%3CT%3E"],[296,"impl-Debug-for-DisplayValue%3CT%3E"],[394,"impl-PartialEq-for-LevelFilter"],[395,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[396,"impl-Debug-for-LevelFilter"],[397,"impl-Display-for-LevelFilter"],[398,"impl-Display-for-ParseLevelFilterError"],[399,"impl-Debug-for-ParseLevelFilterError"],[400,"impl-From%3COption%3CLevel%3E%3E-for-LevelFilter"],[402,"impl-From%3CLevel%3E-for-LevelFilter"],[406,"impl-PartialOrd-for-LevelFilter"],[407,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[408,"impl-PartialOrd-for-LevelFilter"],[409,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[414,"impl-PartialOrd-for-LevelFilter"],[415,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[416,"impl-PartialOrd-for-LevelFilter"],[417,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[418,"impl-PartialOrd-for-LevelFilter"],[419,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"]]},\
"tracing_core":{"doc":"Core primitives for <code>tracing</code>.","t":"IIDDDCCDDDLLLLLLLLLLLLLALLLLLLLAKLALLKKLLLLLLAKLKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLAKOKLLLLLKKLKALLLLLLLLLLLLLLLLLLLIDDLLLLLLLLLLLLLKLFFKLLLLLLIDDLLLLLLLLKLLLLLLLLKLKLKLLKLLLLLLLLLLLLLLLLLKLLKLKLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFLLLLLLLLDLLLLLLLLLLDDDDDDIDILLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSDDDDSDDSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Callsite","Collect","Dispatch","Event","Field","Interest","Kind","Level","LevelFilter","Metadata","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","clone","clone","clone","clone","clone_span","cmp","cmp","collect","current_span","default","dispatch","downcast_raw","drop_span","enabled","enter","eq","eq","eq","eq","eq","eq","event","event","event_enabled","exit","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","identify_callsite","into","into","into","into","into","into","le","le","le","le","lt","lt","lt","lt","max_level_hint","metadata","metadata","metadata","new_span","on_register_dispatch","partial_cmp","partial_cmp","partial_cmp","partial_cmp","record","record_follows_from","register_callsite","set_interest","span","try_close","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Callsite","Identifier","Registration","borrow","borrow","borrow_mut","borrow_mut","clone","eq","fmt","fmt","from","from","hash","into","into","metadata","new","rebuild_interest_cache","register","set_interest","try_from","try_from","try_into","try_into","type_id","type_id","Collect","Interest","NoCollector","always","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_span","current_span","current_span","default","downcast_raw","downcast_ref","downcast_ref","downcast_ref","downcast_ref","drop_span","enabled","enabled","enter","enter","event","event","event_enabled","exit","exit","fmt","fmt","from","from","into","into","is","is","is","is","is_always","is_never","is_sometimes","max_level_hint","never","new","new_span","new_span","on_register_dispatch","record","record","record_follows_from","record_follows_from","register_callsite","register_callsite","sometimes","try_close","try_from","try_from","try_into","try_into","type_id","type_id","Dispatch","SetGlobalDefaultError","WeakDispatch","borrow","borrow","borrow_mut","borrow_mut","clone","clone_span","current_span","downcast_ref","downgrade","drop_span","enabled","enter","event","exit","fmt","fmt","fmt","from","from","from_static","get_default","into","into","is","new_span","none","record","record_follows_from","register_callsite","set_global_default","try_close","try_from","try_from","try_into","try_into","type_id","type_id","upgrade","Event","child_of","dispatch","fields","is_contextual","is_root","metadata","new","new_child_of","parent","record","DebugValue","DisplayValue","Empty","Field","FieldSet","Iter","Value","ValueSet","Visit","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","callsite","clone","clone","contains","debug","display","eq","eq","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","name","new","next","record","record","record","record","record","record_bool","record_debug","record_f64","record_i128","record_i64","record_str","record_u128","record_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DEBUG","DEBUG","ERROR","ERROR","EVENT","HINT","INFO","INFO","Kind","Level","LevelFilter","Metadata","OFF","ParseLevelError","ParseLevelFilterError","SPAN","TRACE","TRACE","WARN","WARN","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","callsite","clone","clone","current","eq","fields","file","fmt","fmt","fmt","fmt","fmt","from","from","from","from_level","hint","into","into","into","into_level","is_event","is_event","is_hint","is_span","is_span","level","line","module_path","name","new","target","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Attributes","Current","Id","Record","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_of","clone","contains","contains","eq","fields","fmt","fmt","fmt","fmt","from","from","from","from","from_non_zero_u64","from_u64","hash","id","into","into","into","into","into_inner","into_non_zero_u64","into_u64","is_contextual","is_empty","is_empty","is_known","is_root","metadata","metadata","new","new","new","new_root","none","parent","record","record","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unknown","values"],"q":[[0,"tracing_core"],[129,"tracing_core::callsite"],[156,"tracing_core::collect"],[218,"tracing_core::dispatch"],[259,"tracing_core::event"],[270,"tracing_core::field"],[363,"tracing_core::metadata"],[431,"tracing_core::span"],[497,"core::cmp"],[498,"core::any"],[499,"core::ptr::non_null"],[500,"core::option"],[501,"core::fmt"],[502,"core::fmt"],[503,"core::hash"],[504,"core::any"],[505,"core::convert"],[506,"core::clone"],[507,"core::fmt"],[508,"core::marker"],[509,"core::num::nonzero"]],"d":["Trait implemented by callsites.","Trait representing the functions required to collect trace …","<code>Dispatch</code> trace data to a <code>Collect</code>.","<code>Event</code>s represent single points in time where something …","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","","","Describes the level of verbosity of a span or event.","A filter comparable to a verbosity <code>Level</code>.","Metadata describing a span or event.","","","","","","","","","","","","","","Callsites represent the source locations from which spans …","","","","","Notifies the collector that a span ID has been cloned.","","","Collectors collect and record trace data.","Returns a type representing this collector’s view of the …","Returns the current default dispatcher","Dispatches trace events to <code>Collect</code>s.","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","<strong>This method is deprecated.</strong>","Returns true if a span or event with the specified metadata…","Records that a span has been entered.","","","","","","","Events represent single points in time during the …","Records that an <code>Event</code> has occurred.","Determine if an <code>Event</code> should be recorded.","Records that a span has been exited.","Span and <code>Event</code> key-value data.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Statically constructs an <code>Identifier</code> for the provided …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the highest verbosity level that this <code>Collector</code> …","Metadata describing trace data.","Returns the metadata associated with the callsite.","Statically constructs new span metadata.","Visit the construction of a new span, returning a new span …","Invoked when this collector becomes a <code>Dispatch</code>.","","","","","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this collector, returning …","Sets the <code>Interest</code> for this callsite.","Spans represent periods of time in the execution of a …","Notifies the collector that a <code>span ID</code> has been dropped, …","","","","","","","","","","","","","","","","","","","Trait implemented by callsites.","Uniquely identifies a <code>Callsite</code>","A registration with the callsite registry.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the metadata associated with the callsite.","Construct a new <code>Registration</code> from some …","Clear and reregister interest on every <code>Callsite</code>","Register a new <code>Callsite</code> with the global registry.","Sets the <code>Interest</code> for this callsite.","","","","","","","Trait representing the functions required to collect trace …","Indicates a <code>Collect</code>’s interest in a particular callsite.","A no-op collector.","Returns an <code>Interest</code> indicating the collector is always …","","","","","","","Notifies the collector that a span ID has been cloned.","Returns a type representing this collector’s view of the …","","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to this <code>Collector</code> value if it is of …","Returns some reference to this <code>Collector</code> value if it is of …","<strong>This method is deprecated.</strong>","Returns true if a span or event with the specified metadata…","","Records that a span has been entered.","","Records that an <code>Event</code> has occurred.","","Determine if an <code>Event</code> should be recorded.","Records that a span has been exited.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Collector</code> is the same type as <code>T</code>.","Returns <code>true</code> if the collector is always interested in …","Returns <code>true</code> if the collector is never interested in being …","Returns <code>true</code> if the collector is sometimes interested in …","Returns the highest verbosity level that this <code>Collector</code> …","Returns an <code>Interest</code> indicating that the collector is never …","Returns a new <code>NoCollector</code> instance.","Visit the construction of a new span, returning a new span …","","Invoked when this collector becomes a <code>Dispatch</code>.","Record a set of values on a span.","","Adds an indication that <code>span</code> follows from the span with …","","Registers a new callsite with this collector, returning …","","Returns an <code>Interest</code> indicating the collector is sometimes …","Notifies the collector that a <code>span ID</code> has been dropped, …","","","","","","","<code>Dispatch</code> trace data to a <code>Collect</code>.","Returned if setting the global dispatcher fails.","<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …","","","","","","Notifies the collector that a span ID has been cloned.","Returns a type representing this collector’s view of the …","Returns some reference to the <code>Collect</code> this <code>Dispatch</code> …","Creates a <code>WeakDispatch</code> from this <code>Dispatch</code>.","Notifies the collector that a span ID has been dropped.","Returns true if a span with the specified metadata would be","Records that a span has been can_enter.","Records that an <code>Event</code> has occurred.","Records that a span has been exited.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Dispatch</code> that forwards to the given static …","Executes a closure with a reference to the current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>Dispatch</code> forwards to a collector of …","Record the construction of a new span, returning a new ID …","Returns a new <code>Dispatch</code> that discards events and spans.","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this collector, returning …","Sets this dispatch as the global default for the duration …","Notifies the collector that a span ID has been dropped, …","","","","","","","Attempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.","<code>Event</code>s represent single points in time where something …","Constructs a new <code>Event</code> with the specified metadata and set …","Constructs a new <code>Event</code> with the specified metadata and set …","Returns an iterator over the set of values on this <code>Event</code>.","Returns true if the new event’s parent should be …","Returns true if the new event should be a root.","Returns metadata describing this <code>Event</code>.","Returns a new <code>Event</code> in the current span, with the …","Returns a new <code>Event</code> as a child of the specified span, with …","Returns the new event’s explicitly-specified parent, if …","Visits all the fields on this <code>Event</code> with the specified …","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.","A <code>Value</code> which serializes using <code>fmt::Display</code>.","An empty field.","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","Describes the fields present on a span.","An iterator over a set of fields.","A field value of an erased type.","A set of fields and values for a span.","Visits typed values.","","","","","","","","","","","","","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …","","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns whether or not this <code>FieldSet</code> has fields.","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.","Returns the number of fields in this <code>FieldSet</code>.","Returns a string representing the name of the field.","Constructs a new <code>FieldSet</code> with the given array of field …","","Visits this value with the given <code>Visitor</code>.","Visits all the fields in this <code>ValueSet</code> with the provided …","","","","Visit a boolean value.","Visit a value implementing <code>fmt::Debug</code>.","Visit a double-precision floating point value.","Visit a signed 128-bit integer value.","Visit a signed 64-bit integer value.","Visit a string value.","Visit an unsigned 128-bit integer value.","Visit an unsigned 64-bit integer value.","","","","","","","","","","","","","","","","","","","The “debug” level.","The “debug” level.","The “error” level.","The “error” level.","<code>Event</code> callsite","<code>enabled!</code> callsite. <code>Collect</code>s can assume this <code>Kind</code> means …","The “info” level.","The “info” level.","Indicates whether the callsite is a span or event.","Describes the level of verbosity of a span or event.","A filter comparable to a verbosity <code>Level</code>.","Metadata describing a span or event.","The “off” level.","Returned if parsing a <code>Level</code> fails.","Indicates that a string could not be parsed to a valid …","<code>Span</code> callsite","The “trace” level.","The “trace” level.","The “warn” level.","The “warn” level.","Returns the string representation of the <code>Level</code>.","","","","","","","Returns an opaque <code>Identifier</code> that uniquely identifies the …","","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …","","Returns the names of the fields on the described span or …","Returns the name of the source code file where the span …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>LevelFilter</code> that enables spans and events with …","Sets that this <code>Kind</code> is a hint.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the most verbose <code>Level</code> that this filter accepts, …","Returns true if the callsite kind is <code>Event</code>.","Return true if the callsite kind is <code>Event</code>","Return true if the callsite kind is <code>Hint</code>","Return true if the callsite kind is <code>Span</code>.","Return true if the callsite kind is <code>Span</code>","Returns the level of verbosity of the described span or …","Returns the line number in the source code file where the …","Returns the path to the Rust module where the span …","Returns the name of the span.","Construct new metadata for a span or event, with a name, …","Returns a string describing the part of the system where …","","","","","","","","","","Attributes provided to a collector describing a new span …","Indicates what the collector considers the “current” …","Identifies a span within the context of a collector.","A set of fields recorded by a span.","","","","","","","","","Returns <code>Attributes</code> describing a new child span of the …","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …","Returns <code>true</code> if this <code>Record</code> contains a value for the given …","","Returns the set of all fields defined by this span’s …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new span ID from the given <code>NonZeroU64</code>.","Constructs a new span ID from the given <code>u64</code>.","","Borrows the <code>Id</code> of the current span, if one exists and is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code> and returns the span <code>Id</code> and <code>Metadata</code> of the …","Returns the span’s ID as a <code>NonZeroU64</code>.","Returns the span’s ID as a <code>u64</code>.","Returns true if the new span’s parent should be …","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.","Returns true if this <code>Record</code> contains <em>no</em> values.","Returns <code>true</code> if the collector that constructed this <code>Current</code>…","Returns true if the new span should be a root.","Returns a reference to the new span’s metadata.","Borrows the <code>Metadata</code> of the current span, if one exists …","Returns <code>Attributes</code> describing a new child span of the …","Constructs a new <code>Record</code> from a <code>ValueSet</code>.","Constructs a new <code>Current</code> that indicates the current …","Returns <code>Attributes</code> describing a new span at the root of …","Constructs a new <code>Current</code> that indicates the current …","Returns the new span’s explicitly-specified parent, if …","Records all the fields in this set of <code>Attributes</code> with the …","Records all the fields in this <code>Record</code> with the provided …","","","","","","","","","","","","","Constructs a new <code>Current</code> that indicates the collector does …","Returns a reference to a <code>ValueSet</code> containing any values …"],"i":[0,0,0,0,0,0,0,0,0,0,1,13,3,15,1,4,5,13,3,15,1,4,5,0,3,1,4,5,27,4,5,0,27,3,0,27,27,27,27,13,1,4,4,5,5,0,27,27,27,0,13,3,15,1,1,4,4,5,5,13,3,15,1,4,5,5,5,4,5,4,4,5,5,4,4,5,5,1,4,5,0,13,3,15,1,4,5,4,4,5,5,4,4,5,5,27,0,57,0,27,27,4,4,5,5,27,27,27,57,0,27,13,3,15,1,4,5,13,3,15,1,4,5,13,3,15,1,4,5,0,0,0,25,24,25,24,24,24,25,24,25,24,24,25,24,57,25,0,0,57,25,24,25,24,25,24,0,0,0,23,23,26,23,26,23,26,27,27,26,26,27,27,27,27,27,27,27,26,27,26,27,26,27,27,26,23,26,23,26,23,26,27,27,27,27,23,23,23,27,23,26,27,26,27,27,26,27,26,27,26,23,27,23,26,23,26,23,26,0,0,0,30,29,30,29,29,3,3,3,3,3,3,3,3,3,30,30,29,30,29,3,0,30,29,3,3,3,3,3,3,0,3,30,29,30,29,30,29,29,0,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,41,32,42,34,36,39,41,32,42,34,36,39,32,1,36,39,41,0,0,41,42,41,41,41,32,32,45,45,42,34,36,36,39,41,32,42,34,36,39,41,32,42,34,36,39,41,34,41,41,41,1,41,34,45,32,42,36,39,35,35,35,35,35,35,35,35,41,32,42,34,36,39,41,32,42,34,36,39,41,32,42,34,36,39,4,5,4,5,53,53,4,5,0,0,0,0,5,0,0,53,4,5,4,5,4,53,54,18,53,54,18,13,53,54,5,53,13,13,53,54,54,18,18,53,54,18,5,53,53,54,18,5,13,53,53,13,53,13,13,13,13,13,13,53,54,18,53,54,18,53,54,18,0,0,0,0,6,21,22,8,6,21,22,8,21,6,21,22,6,21,6,21,22,8,6,21,22,8,6,6,6,8,6,21,22,8,8,6,6,21,21,22,8,21,21,8,21,22,8,21,8,21,21,22,6,21,22,8,6,21,22,8,6,21,22,8,8,21],"f":[0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[3,3],[1,1],[4,4],[5,5],[[-1,6],6,[]],[[4,4],7],[[5,5],7],0,[-1,8,[]],[[],3],0,[[-1,9],[[12,[[11,[10]]]]],[]],[[-1,6],10,[]],[[-1,13],14,[]],[[-1,6],10,[]],[[13,13],14],[[1,1],14],[[4,4],14],[[4,5],14],[[5,4],14],[[5,5],14],0,[[-1,15],10,[]],[[-1,15],14,[]],[[-1,6],10,[]],0,[[13,16],17],[[3,16],17],[[15,16],17],[[1,16],17],[[1,16],17],[[4,16],17],[[4,16],17],[[5,16],17],[[5,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,5],[[[12,[4]]],5],[2,[[19,[4,18]]]],[2,[[19,[5]]]],[[4,5],14],[[4,4],14],[[5,4],14],[[5,5],14],[[4,5],14],[[4,4],14],[[5,4],14],[[5,5],14],[[1,-1],10,20],[[4,-1],10,20],[[5,-1],10,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,5],14],[[4,4],14],[[5,4],14],[[5,5],14],[[4,5],14],[[4,4],14],[[5,4],14],[[5,5],14],[-1,[[12,[5]]],[]],0,[-1,13,[]],0,[[-1,21],6,[]],[[-1,3],10,[]],[[4,4],[[12,[7]]]],[[4,5],[[12,[7]]]],[[5,5],[[12,[7]]]],[[5,4],[[12,[7]]]],[[-1,6,22],10,[]],[[-1,6,6],10,[]],[[-1,13],23,[]],[[-1,23],10,[]],0,[[-1,6],14,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[24,24],14],[[25,16],17],[[24,16],17],[-1,-1,[]],[-1,-1,[]],[[24,-1],10,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,[[25,[-1]]],[]],[[],10],[25,10],[[-1,23],10,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],0,0,0,[[],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[26,26],[[-1,6],6,[]],[-1,8,[]],[26,8],[[],26],[[-1,9],[[12,[[11,[10]]]]],[]],[27,[[12,[-1]]],28],[27,[[12,[-1]]],28],[27,[[12,[-1]]],28],[27,[[12,[-1]]],28],[[-1,6],10,[]],[[-1,13],14,[]],[[26,13],14],[[-1,6],10,[]],[[26,6],10],[[-1,15],10,[]],[[26,15],10],[[-1,15],14,[]],[[-1,6],10,[]],[[26,6],10],[[23,16],17],[[26,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,14],[27,14],[27,14],[27,14],[23,14],[23,14],[23,14],[-1,[[12,[5]]],[]],[[],23],[[],26],[[-1,21],6,[]],[[26,21],6],[[-1,3],10,[]],[[-1,6,22],10,[]],[[26,6,22],10],[[-1,6,6],10,[]],[[26,6,6],10],[[-1,13],23,[]],[[26,13],23],[[],23],[[-1,6],14,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[[3,6],6],[3,8],[3,[[12,[-1]]],28],[3,29],[[3,6],10],[[3,13],14],[[3,6],10],[[3,15],10],[[3,6],10],[[30,16],17],[[30,16],17],[[29,16],17],[-1,-1,[]],[-1,-1,[]],[27,3],[-1,-2,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,14],[[3,21],6],[[],3],[[3,6,22],10],[[3,6,6],10],[[3,13],23],[3,[[19,[10,30]]]],[[3,6],14],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[29,[[12,[3]]]],0,[[-1,13,32],10,[[33,[[12,[6]]]]]],[[13,32],10],[15,34],[15,14],[15,14],[15,13],[[13,32],15],[[-1,13,32],15,[[33,[[12,[6]]]]]],[15,[[12,[6]]]],[[15,35],10],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,24],[1,24],[[[36,[-1]]],[[36,[-1]]],[37,38]],[[[39,[-1]]],[[39,[-1]]],[37,40]],[[41,1],14],[-1,[[39,[-1]]],40],[-1,[[36,[-1]]],38],[[41,41],14],[[42,42],14],[[41,-1],[[12,[1]]],[[43,[2]],44]],[[41,16],17],[[41,16],17],[[32,16],17],[[32,16],17],[[45,16],17],[[45,16],17],[[42,16],17],[[34,16],17],[[[36,[-1]],16],17,38],[[[36,[-1]],16],17,38],[[[39,[-1]],16],17,40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41],[-1,-2,[],[]],[41,14],[41,34],[41,46],[1,2],[[[47,[2]],24],41],[34,[[12,[1]]]],[[-1,1,35],10,[]],[[32,35],10],[[42,1,35],10],[[[36,[-1]],1,35],10,38],[[[39,[-1]],1,35],10,40],[[-1,1,14],10,[]],[[-1,1,40],10,[]],[[-1,1,48],10,[]],[[-1,1,49],10,[]],[[-1,1,50],10,[]],[[-1,1,2],10,[]],[[-1,1,51],10,[]],[[-1,1,52],10,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[4,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,24],[53,53],[54,54],[[],5],[[53,53],14],[13,41],[13,[[12,[2]]]],[[53,16],17],[[54,16],17],[[54,16],17],[[18,16],17],[[18,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,5],[53,53],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[12,[4]]]],[13,14],[53,14],[53,14],[13,14],[53,14],[13,4],[13,[[12,[55]]]],[13,[[12,[2]]]],[13,2],[[2,2,4,[12,[2]],[12,[55]],[12,[2]],41,53],13],[13,2],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,13,32],21],[6,6],[[21,1],14],[[22,1],14],[[6,6],14],[21,41],[[6,16],17],[[21,16],17],[[22,16],17],[[8,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[56,6],[52,6],[[6,-1],10,20],[8,[[12,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,[[12,[[10,[6,13]]]]]],[6,56],[6,52],[21,14],[21,14],[22,14],[8,14],[21,14],[21,13],[8,[[12,[13]]]],[[13,32],21],[32,22],[[6,13],8],[[13,32],21],[[],8],[21,[[12,[6]]]],[[21,35],10],[[22,35],10],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[],8],[21,32]],"c":[36,175,230],"p":[[3,"Field",0],[15,"str"],[3,"Dispatch",0],[3,"Level",0],[3,"LevelFilter",0],[3,"Id",431],[4,"Ordering",497],[3,"Current",431],[3,"TypeId",498],[15,"tuple"],[3,"NonNull",499],[4,"Option",500],[3,"Metadata",0],[15,"bool"],[3,"Event",0],[3,"Formatter",501],[6,"Result",501],[3,"ParseLevelError",363],[4,"Result",502],[8,"Hasher",503],[3,"Attributes",431],[3,"Record",431],[3,"Interest",156],[3,"Identifier",129],[3,"Registration",129],[3,"NoCollector",156],[8,"Collect",0],[8,"Any",498],[3,"WeakDispatch",218],[3,"SetGlobalDefaultError",218],[8,"FnMut",504],[3,"ValueSet",270],[8,"Into",505],[3,"Iter",270],[8,"Visit",270],[3,"DisplayValue",270],[8,"Clone",506],[8,"Display",501],[3,"DebugValue",270],[8,"Debug",501],[3,"FieldSet",270],[3,"Empty",270],[8,"Borrow",507],[8,"Sized",508],[8,"Value",270],[15,"usize"],[15,"slice"],[15,"f64"],[15,"i128"],[15,"i64"],[15,"u128"],[15,"u64"],[3,"Kind",363],[3,"ParseLevelFilterError",363],[15,"u32"],[3,"NonZeroU64",509],[8,"Callsite",0]],"b":[[41,"impl-PartialEq-for-Level"],[42,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[43,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[44,"impl-PartialEq-for-LevelFilter"],[53,"impl-Debug-for-Field"],[54,"impl-Display-for-Field"],[55,"impl-Debug-for-Level"],[56,"impl-Display-for-Level"],[57,"impl-Display-for-LevelFilter"],[58,"impl-Debug-for-LevelFilter"],[65,"impl-From%3CLevel%3E-for-LevelFilter"],[66,"impl-From%3COption%3CLevel%3E%3E-for-LevelFilter"],[69,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[70,"impl-PartialOrd-for-Level"],[71,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[72,"impl-PartialOrd-for-LevelFilter"],[73,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[74,"impl-PartialOrd-for-Level"],[75,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[76,"impl-PartialOrd-for-LevelFilter"],[87,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[88,"impl-PartialOrd-for-Level"],[89,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[90,"impl-PartialOrd-for-LevelFilter"],[91,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[92,"impl-PartialOrd-for-Level"],[93,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[94,"impl-PartialOrd-for-LevelFilter"],[101,"impl-PartialOrd-for-Level"],[102,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[103,"impl-PartialOrd-for-LevelFilter"],[104,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[171,"impl-dyn+Collect+%2B+Sync"],[172,"impl-dyn+Collect+%2B+Send"],[173,"impl-dyn+Collect"],[174,"impl-dyn+Collect+%2B+Send+%2B+Sync"],[191,"impl-dyn+Collect"],[192,"impl-dyn+Collect+%2B+Send"],[193,"impl-dyn+Collect+%2B+Sync"],[194,"impl-dyn+Collect+%2B+Send+%2B+Sync"],[235,"impl-Display-for-SetGlobalDefaultError"],[236,"impl-Debug-for-SetGlobalDefaultError"],[301,"impl-Debug-for-FieldSet"],[302,"impl-Display-for-FieldSet"],[303,"impl-Display-for-ValueSet%3C\'a%3E"],[304,"impl-Debug-for-ValueSet%3C\'a%3E"],[305,"impl-Display-for-dyn+Value"],[306,"impl-Debug-for-dyn+Value"],[309,"impl-Debug-for-DisplayValue%3CT%3E"],[310,"impl-Display-for-DisplayValue%3CT%3E"],[398,"impl-Debug-for-ParseLevelFilterError"],[399,"impl-Display-for-ParseLevelFilterError"],[400,"impl-Display-for-ParseLevelError"],[401,"impl-Debug-for-ParseLevelError"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":"RIKK","n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":[[0,"unicode_xid"]],"d":["The version of Unicode that this version of unicode-xid is …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,2,2],"f":[0,0,[-1,1,[]],[-1,1,[]]],"c":[],"p":[[15,"bool"],[8,"UnicodeXID",0]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
